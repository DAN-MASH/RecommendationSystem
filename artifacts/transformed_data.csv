id,title,body,slug,tags,status,likes,views,image.url
6,top 10 resources to supercharge your web development journey,"<p>web development can be difficult, but with the right tools the journey could be a smooth ride. there are various resources available for developers, with the rise of ai making it even easier for web developers to bootstrap applications. here are top 10 resources that you will wish you knew earlier.</p>
<p><strong>1. next.js:</strong></p>
<p>next.js is a react framework highly recommended by the react team for building react applications. next.js is super fast as it enables static site generation( this thing does not have a single html page, wow). next.js has several developer tools, such as server-side rendering, making routing and authentication seamless. it's great for seo and performance and has many built-in features that make development easier. however, next also comes with some challenges, such as errors that are not easy to read and pre-rendering, which fetches data after navigating to a page; thus, if you need to change something during the next navigation, this becomes challenging.</p>
<p>2. <strong>sanity.io:</strong></p>
<p>sanity.io is a schematic database that empowers web development without building custom backends. it offers an intuitive content management system (cms) and an api for quickly creating and managing content. sanity.io allows developers to focus on front-end development while seamlessly integrating with their preferred backend data. this site is super helpful, especially if you are building a blog.</p>
<p><strong>3. tailwind css:</strong></p>
<p>at first, tailwind css looks like blasphemy, with many bloated html classes that make your code difficult to read. however, tailwind s a utility-first css framework that makes it easy to style your web pages. it's great for beginners and experienced developers and is very flexible. tailwind allows for code reusability through the @apply directive and also has a ui library (tailwind ui) that can supercharge web development without writing any css.</p>
<p><strong>4. material and daisy ui:</strong></p>
<p>material ui and daisy ui are powerful ui component libraries that offer a rich selection of pre-designed and customizable components. material ui adheres to the material design guidelines, while daisy ui provides a lightweight and elegant component set. both libraries save developers time by offering ready-to-use components for their web applications.</p>
<p><strong>5. framer.io:</strong></p>
<p>framer is similar to figma but has an ai tool that generates a website design super-fast. using a framer, you can generate your design inspiration within seconds. framer also allows you to customize the generated site to your preference. other similar tools include wix.com and durable.</p>
<p><strong>6. webflow:</strong></p>
<p>the age of no-code websites is here, and webflow is the king in this arena. webflow is a visual web design and development tool that bridges the gap between design and development. it allows developers to create responsive websites without writing code, providing a drag-and-drop interface, powerful styling options, and a content management system (cms). furthermore, webflow also allows you to add javascript code for interactivity and host your website for free.</p>
<p><strong>7. firebase and supabase:</strong></p>
<p>firebase is a google cloud platform that helps build and deploy websites. however, the most useful firebase feature is hosting web apis and allowing users to sign in using their google accounts (this is similar to what is offered by auth0 ). however, firebase also provides hosting, real-time database, authentication, and cloud functions. firebase simplifies backend development and empowers developers to focus on creating exceptional front-end experiences. supabase is a free alternative to firebase.</p>
<p><strong>8. express.js:</strong></p>
<p>express is a javascript library for backend development integrated with node.js. express helps build the backend with javascript and makes it easier to deploy apis. it simplifies building web applications and apis by providing robust features and middleware. express.js is highly extensible and widely used in the node.js ecosystem, making it an excellent choice for web developers.</p>
<p><strong>9. midjourney:</strong></p>
<p>first, mid-journey is only partially free and available in their discord channel. midjourney is a popular ai tool enabling individuals to generate text images. most developers use midjourney to inspire their designs and create stunning visuals and 3d models. if you do not know photoshop, mid-journey got you covered. for free alternatives, check dalle.e and blue willow (available on discord)</p>
<p><strong>10. jquery:</strong></p>
<p>jquery can be less useful when using frameworks such as react. however, while building sites with vanilla javascript, jquery makes selecting dom elements, event handling, and animation easier. for example, to select an h1 tag using jquery, we use a dollar sign $(h1).</p>
<p>other tools not mentioned in this list include vercel v0, which helps develop frontend designs and codes, ai tools such as gemini and bing, google fonts, vercel and many more. kindly share your favorite resources below.</p>",top-10-resources-to-supercharge-your-web-development-journey,"webdev,resources,javascript,nextjs",published,8,3203,http://res.cloudinary.com/dipkbpinx/image/upload/v1725020356/tech-tales/cover-images/yepz27huctfyeqnjot8y.jpg
60,markdown tutorial: from basics to advanced 🚀🚀,"<p>markdown is a lightweight markup language that formats text with simple syntax. it's widely used for blog posts, documentation, and code comments. in this comprehensive guide, we'll cover all the essential markdown elements, empowering you to easily write beautifully formatted content.</p>
<h2>headings</h2>
<p>headings are used to structure your content and create a hierarchy. use the pound sign (#) to create headings of different levels:</p>
<pre class=""language-markdown""><code>
# heading 1 (largest)
## heading 2
### heading 3
#### heading 4
##### heading 5
###### heading 6 (smallest)
</code></pre>
<h2>emphasis</h2>
<p>you can emphasize text using bold, italic, or both:</p>
<pre class=""language-markdown""><code>
**bold text**
*italic text*
***bold and italic text***
</code></pre>
<p>this will display as:</p>
<p><strong>bold text</strong></p>
<p><em>italic text</em></p>
<p><em><strong>bold and italic text</strong></em></p>
<h2>links</h2>
<p>links are crucial for providing context and directing readers to relevant resources. use square brackets [ ] for the link text and parentheses () for the url:</p>
<pre class=""language-markdown""><code>
[this is a link](https://www.example.com)
</code></pre>
<p><strong>this will display as:</strong><br><a title=""this link"" href=""https://www.example.com"">this is a link</a></p>
<h2>images</h2>
<p>images add visual interest and enhance your content. use an exclamation mark (!) followed by square brackets [ ] for the alt text and parentheses () for the image url:</p>
<pre class=""language-markdown""><code>
![github](https://github.blog/wp-content/uploads/2024/07/github-logo.png)
</code></pre>
<p><strong>this will display as:</strong></p>
<p><img style=""display: block; margin-left: auto; margin-right: auto; border-width: 1px; border-style: solid;"" src=""https://github.blog/wp-content/uploads/2024/07/github-logo.png"" alt=""github logo"" width=""585"" height=""368""></p>
<blockquote>
<p><strong>hyperlink</strong>&nbsp;and&nbsp;<strong>images</strong>&nbsp;both syntax are same expect one&nbsp;<strong>exclamation mark</strong>&nbsp;(<strong>!</strong>) which is point beginning of the&nbsp;<strong>images tag</strong>.</p>
</blockquote>
<h2>lists</h2>
<p>markdown supports both ordered and unordered lists:</p>
<h3>ordered lists</h3>
<p>use numbers followed by a period (.) to create ordered lists:</p>
<pre class=""language-markdown""><code>
1. first item
2. second item
3. third item
</code></pre>
<h3>unordered lists</h3>
<p>use hyphens (-), asterisks (*), or plus signs (+) to create unordered lists:</p>
<pre class=""language-markdown""><code>
- first item
* second item
+ third item
</code></pre>
<h3>nested lists</h3>
<pre class=""language-markdown""><code>1. item 1
   - sub-item 1
   - sub-item 2
2. item 2
   - sub-item 1
   - sub-item 2
</code></pre>
<p><strong>this will display as:</strong></p>
<ol>
<li>item 1
<ul>
<li>sub-item 1</li>
<li>sub-item 2</li>
</ul>
</li>
<li>item 2
<ul>
<li>sub-item 1</li>
<li>sub-item 2</li>
</ul>
</li>
</ol>
<h2>code blocks</h2>
<p>code blocks are essential for displaying code snippets within your content. use triple backticks (```) to wrap the code:</p>
<pre class=""language-markdown""><code>
```python
def greet(name):
  print(f""hello, {name}!"")

greet(""world"")
```
</code></pre>
<p><strong>this will display as:</strong></p>
<pre class=""language-python""><code>def greet(name):
  print(f""hello, {name}!"")

greet(""world"")</code></pre>
<h3>inline code</h3>
<p>to add inline code blocks, just add&nbsp;<strong>` `</strong> between the words. for example,&nbsp;</p>
<pre class=""language-markdown""><code>this website uses `prism.js` for syntax highlighting.</code></pre>
<p>this would display as:</p>
<p class=""highlight plaintext"">this website uses <code>prism.js</code> for syntax highlighting.</p>
<h2>blockquotes</h2>
<p>to create a blockquote,&nbsp;<strong>start a line with greater than &gt; followed by an optional space</strong>. blockquotes can be nested, and can also contain other formatting. to keep the quote together, blank lines inside the quote must contain the &gt; character.</p>
<pre class=""language-markdown""><code>&gt;  i am not in danger, skyler. i am the danger. 
    a guy opens his door and gets shot, and you think that of me? 
    no. i am the one who knocks!</code></pre>
<p><strong>this will display as:</strong><br><br></p>
<blockquote>
<p>i am not in danger, skyler. i am the danger. a guy opens his door and gets shot, and you think that of me? no. i am the one who knocks!</p>
</blockquote>
<h2>tables</h2>
<p>tables allow you to organize data effectively:</p>
<pre class=""language-markdown""><code>
| header 1 | header 2 |
|---|---|
| row 1, column 1 | row 1, column 2 |
| row 2, column 1 | row 2, column 2 |
</code></pre>
<p><strong>this will display as:</strong></p>
<table style=""border-collapse: collapse; width: 100%;"" border=""1""><colgroup> <col> <col> </colgroup>
<tbody>
<tr>
<td style=""padding: 8px; border: 1px solid black;"">
<h3>header 1</h3>
</td>
<td style=""padding: 8px; border: 1px solid black;"">
<h3>header 2</h3>
</td>
</tr>
<tr>
<td style=""padding: 8px; border: 1px solid black;"">row 1, column 1</td>
<td style=""padding: 8px; border: 1px solid black;"">row 1, column 2</td>
</tr>
<tr>
<td style=""padding: 8px; border: 1px solid black;"">row 2, column 1</td>
<td style=""padding: 8px; border: 1px solid black;"">row 2, column 2</td>
</tr>
</tbody>
</table>
<h2>horizontal rules</h2>
<p>use three or more hyphens (-) to create a horizontal rule:</p>
<pre class=""language-markdown""><code>
---
</code></pre>
<h2>line breaks</h2>
<p>to create a line break, use two spaces at the end of a line, followed by a new line:</p>
<pre class=""language-markdown""><code>
this is a line. 
this is another line.
</code></pre>
<h2>escaping characters</h2>
<p>if you need to use a special character like a backslash (\) or an asterisk (*) within your text, escape it with a backslash (\):</p>
<pre class=""language-markdown""><code>
this is a line with a backslash: \
this is a line with an asterisk: \*
</code></pre>
<h2>conclusion</h2>
<p>now you're equipped with the essential markdown knowledge to write beautifully formatted content. practice these elements and explore further advanced features to unlock the full potential of markdown. don&rsquo;t wait for the perfect moment to learn markdown. the power to simplify and enhance your writing is already within your reach. start today, and watch how this simple tool transforms the way you create, share, and collaborate. happy writing!</p>
<h2>resources</h2>
<p>markdown can render differently on various platforms and you can preview how your code will look on <a href=""https://markdownlivepreview.com/"" target=""_blank"" rel=""noopener noreferrer"">markdownlivepreview.</a> other useful resources include:</p>
<ul>
<li><a href=""https://commonmark.org/"" target=""_blank"" rel=""nofollow noopener noreferrer"">commonmark</a>&nbsp;&ndash; a markdown specification with better clarity and compatibility</li>
<li><a href=""https://babelmark.github.io/"" target=""_blank"" rel=""nofollow noopener noreferrer"">babelmark3</a> - a tool to see and compare the output of different markdown engines for a given input.</li>
</ul>",markdown-tutorial-from-basics-to-advanced-,"github,tutorials,webdev,markdown",published,2,300,http://res.cloudinary.com/dipkbpinx/image/upload/v1729881110/tech-tales/cover-images/eyttr8zivbxwanveuhfd.png
4,why my opinion on nextjs is changing,"<p>i have been the greatest fan of nextjs, but i believe there is more hype to the framework. my opinion about nextjs is changing and i am considering switching to <em><span style=""color: #236fa1;""><a title=""remix"" href=""https://remix.run"" target=""_blank"" rel=""noopener"">remix</a> </span></em>or just the old plain react<span style=""color: #000000;"">. here is why i think nextjs is overhyped.</span></p>
<p><span style=""color: #000000;""><br>nextjs, which is a react framework that enables developers create full-stack react-based web applications with server-side rendering and static website generation, is currently in version 14. ironically, react is currently in version 18 despite being released in 2013 while nextjs was released in 2016.<strong> </strong>undoubtedly<strong> </strong>the framework is way over its head.</span></p>
<p>one of the major concerns is that nextjs packages and ships <span style=""color: #ba372a;""><strong>experimental react features,&nbsp;</strong><span style=""color: #000000;"">and marks them as stable, ultimately using developers as guinea pigs for new features. shipping experimental react features such as <strong>useserver&nbsp;</strong>significantly introduces a lot of bugs into nextjs code, requiring the work of a bounty hunter!<br></span></span></p>
<p><img src=""https://miro.medium.com/v2/resize:fit:1024/0*zwzgevbfduq8qlg-.png"" alt=""make money by hacking?? bug bounty guide (resources) | by om arora |  infosec write-ups""></p>
<p>call me a noob but i have not experienced any improvement in <a class=""gl9hy"" href=""https://www.google.com/search?sca_esv=3dde2fcdc36845ac&amp;sxsrf=adlywiirvkb-jhhduyousz8kwoeacehdjq:1719853951835&amp;q=performance&amp;spell=1&amp;sa=x&amp;ved=2ahukewili_weq4ahaxvdhf0hhx1zaoaqbsgaegqichab""><strong><em>performance</em></strong></a> after switching to nextjs. as a matter of fact, my application has gotten too slow compared to applications created using react. however, other developers have reported perfomance improvements after switching to nextjs. i presume i have not been able to fully leverage nextjs server-side rendering and data fetching.</p>
<p>another significant issue is that <a title=""vercel"" href=""https://vercel.com"" target=""_blank"" rel=""noopener"">vercel&nbsp;</a> has made it exceedingly difficult to host nextjs code in other hosting service providers such as netlify. but part of the problem is that the line between next.js and vercel is very thin so if you're not deploying on vercel, you're actually using a different framework from what's documented in the next.js docs and it's not always clear what those differences are because vercel isn't incentivized to invest time in that.<br>we can argue about whether vercel is right or wrong about their current approach. but the fact remains that if vercel&rsquo;s pricing or other things become a problem for you, getting off of vercel will also be a problem. it comes back down to the incentives, although the company still remains unprofitable</p>
<p>let me know what you guys think about nextjs. ps this website is built using nextjs!</p>",why-my-opinion-on-nextjs-is-changing,"nextjs,react,vercel,rendering",published,14,2840,http://res.cloudinary.com/dipkbpinx/image/upload/v1725022044/tech-tales/cover-images/havacmhllusjfhofarsp.png
58,how to write clean code – ten tips and best practices,"<h3 id=""heading-simplicity""></h3>
<p>clean code is a joy to work with. it is easy to understand, maintain, and extend. in this blog post, we'll explore some tips and best practices for writing clean code, using javascript as our example language.</p>
<p>clean code is a term used to describe computer code that is easy to read, understand, and maintain. clean code is written in a way that makes it simple, concise, and expressive. it follows a set of conventions, standards, and practices that make it easy to read and follow.</p>
<p>clean code is free from complexity, redundancy, and other code smells and anti-patterns that can make it difficult to maintain, debug, and modify.</p>
<p>i can't overstate the importance of clean code. when code is easy to read and understand, it makes it easier for developers to work on the codebase. this can lead to increased productivity and reduced errors.</p>
<p>also, when code is easy to maintain, it ensures that the codebase can be improved and updated over time. this is especially important for long-term projects where code must be maintained and updated for years to come.</p>
<h2>1. dry (don't repeat yourself)</h2>
<p>the dry principle encourages you to avoid duplicating code. this helps to reduce the risk of errors and makes your code easier to maintain.</p>
<pre class=""language-javascript""><code>
// bad: duplicated code
function calculatearea(length, width) {
  return length * width;
}

function calculateperimeter(length, width) {
  return 2 * (length + width);
}

// good: dry principle applied
function calculatearea(length, width) {
  return length * width;
}

function calculateperimeter(length, width) {
  return 2 * calculatearea(length, width);
}
</code></pre>
<h2>2. meaningful variable names</h2>
<p>use descriptive variable names that indicate the purpose of the variable. avoid using single-letter variable names or abbreviations that are not widely understood. when you create a <code>variable</code> a&nbsp;<code>function</code>, give it a name that tells&nbsp;<u>what it does</u>. this eliminates the need for extra comments explaining what the variable or the function is.</p>
<pre class=""language-javascript""><code>
// bad: unclear variable names
let a = 10;
let b = 20;
let c = a + b;

// good: meaningful variable names
let totalitems = 10;
let priceperitem = 20;
let totalprice = totalitems * priceperitem;
</code></pre>
<h2>3. avoid useless comments</h2>
<p>comments should clarify the code, not repeat what is already obvious. if the code is self-explanatory, comments are unnecessary. instead of adding comments everywhere, try to&nbsp;<u>make your code self-explanatory</u>&nbsp;by using&nbsp;<strong>good names</strong>.</p>
<pre class=""language-javascript""><code>
// bad: useless comment
let totalprice = totalitems * priceperitem; // calculates the total price

// good: no need for a comment
let totalprice = totalitems * priceperitem;
</code></pre>
<h2>4. single responsibility principle (srp)</h2>
<p>each function or class should have a single, well-defined responsibility. this makes it easier to understand, test, and maintain your code. a function should do&nbsp;<strong>one job</strong>&nbsp;and do it well.</p>
<p>this makes it easier to understand and fix if needed. it&rsquo;s like having one tool for one task, like a pencil for writing and scissors for cutting.</p>
<pre class=""language-javascript""><code>
// bad: multiple responsibilities
function processorder(order) {
  calculatetotalprice(order);
  sendorderconfirmationemail(order);
  updateinventory(order);
}

// good: single responsibility
function calculatetotalprice(order) {
  // ...
}

function sendorderconfirmationemail(order) {
  // ...
}

function updateinventory(order) {
  // ...
}
</code></pre>
<h2>5. code readability</h2>
<p>write code that is easy to read and understand. use consistent indentation, whitespace, and formatting.&nbsp;</p>
<p>use&nbsp;<strong>spaces</strong>,&nbsp;<strong>indentation</strong>, and&nbsp;<strong>line breaks</strong>&nbsp;to keep your code neat.</p>
<p>just like writing a paragraph, you should break your code into smaller pieces so it&rsquo;s not all in one line.</p>
<pre class=""language-javascript""><code>
// bad: unreadable code
let totalitems = 10;
let priceperitem = 20;
let totalprice = totalitems * priceperitem;

// good: readable code
let totalitems = 10;
let priceperitem = 20;

let totalprice = totalitems * priceperitem;
</code></pre>
<h2>6. writing unit tests</h2>
<p>unit tests ensure that individual components of your code work as expected. writing unit tests helps to identify and fix bugs early in the development process.</p>
<pre class=""language-javascript""><code>
// sample unit test
const calculatearea = require('./areacalculator');

describe('calculatearea', () =&gt; {
  it('should return the correct area for a rectangle', () =&gt; {
    expect(calculatearea(4, 5)).tobe(20);
  });
});
</code></pre>
<h2>7. clear flow and execution</h2>
<p>logically organize your code, making it easy to follow the flow of execution. use meaningful variable names and comments to help guide the reader.</p>
<pre class=""language-javascript""><code>
// good: clear flow and execution
function processorder(order) {
  let totalprice = calculatetotalprice(order);
  sendorderconfirmationemail(order, totalprice);
  updateinventory(order);
}
</code></pre>
<h2>8. organizing files</h2>
<p>organize your code into files and folders based on functionality. this helps to keep your project organized and easy to navigate.</p>
<p>for example, you might have a <code>utils</code> folder for helper functions, a <code>component</code>s folder for react components, and a <code>services</code> folder for api calls.</p>
<p>here are examples of a good and a bad folder structure using a react project as an example:</p>
<pre class=""language-javascript""><code>// bad folder structure
my - app /
├── app.js
├── index.js
├── components /
│   ├── button.js
│   ├── card.js
│   └── navbar.js
├── containers /
│   ├── home.js
│   ├── login.js
│   └── profile.js
├── pages /
│   ├── home.js
│   ├── login.js
│   └── profile.js
└── utilities /
├── api.js
└── helpers.js</code></pre>
<p>in this example, the project structure is organized around file types, such as components, containers, and pages.</p>
<p>however, this approach can lead to confusion and duplication, as it's not clear which files belong where. for example, the <code>home</code>&nbsp;component is present in both the&nbsp;<code>containers</code>&nbsp;and&nbsp;<code>pages</code> folders. it can also make it challenging to find and modify code, as developers may need to navigate multiple folders to find the code they need.</p>
<pre class=""language-javascript""><code>// good folder structure
my - app /
├── src /
│   ├── components /
│   │   ├── button /
│   │   │   ├── button.js
│   │   │   ├── button.module.css
│   │   │   └── index.js
│   │   ├── card /
│   │   │   ├── card.js
│   │   │   ├── card.module.css
│   │   │   └── index.js
│   │   └── navbar /
│   │       ├── navbar.js
│   │       ├── navbar.module.css
│   │       └── index.js
│   ├── pages /
│   │   ├── home /
│   │   │   ├── home.js
│   │   │   ├── home.module.css
│   │   │   └── index.js
│   │   ├── login /
│   │   │   ├── login.js
│   │   │   ├── login.module.css
│   │   │   └── index.js
│   │   └── profile /
│   │       ├── profile.js
│   │       ├── profile.module.css
│   │       └── index.js
│   ├── utils /
│   │   ├── api.js
│   │   └── helpers.js
│   ├── app.js
│   └── index.js
└── public /
├── index.html
└── favicon.ico</code></pre>
<p>in this example, the project structure is organized around features, such as components, pages, and utils. each feature has its folder, which contains all the files related to that feature.</p>
<h2 id=""heading-simplicity"">9. simplicity</h2>
<p>and last comes&nbsp;<strong>simplicity</strong>. this is the toughest one to evaluate because it's subjective, it depends on the person who reads the code. but some guidelines we can follow are:</p>
<ol>
<li>
<p>can you easily understand what the program does at each line?</p>
</li>
<li>
<p>do functions and variables have names that represent their responsibilities?</p>
</li>
<li>
<p>is the code indented correctly and spaced with the same format all along the codebase?</p>
</li>
<li>
<p>is there any documentation available for the code? are comments used to explain complex parts of the program?</p>
</li>
<li>
<p>how quickly can you identify in which part of the codebase are certain features of the program? can you delete/add new features without the need to modify many other parts of the code?</p>
</li>
<li>
<p>does the code follow a modular approach, with different features separated into components?</p>
</li>
<li>
<p>is code reused when possible?</p>
</li>
<li>
<p>are the same architecture, design, and implementation decisions followed equally all along the codebase?</p>
</li>
</ol>
<h2>10. only expose and consume the data you need</h2>
<p>one important principle of writing clean code is to only expose and consume the information that is necessary for a particular task. this helps to reduce complexity, increase efficiency, and avoid errors that can arise from using unnecessary data.</p>
<p>when data that is not needed is exposed or consumed, it can lead to performance issues and make the code more difficult to understand and maintain.</p>
<p>suppose you have an object with multiple properties, but you only need to use a few of them. one way to do this would be to reference the object and the specific properties every time you need them. but this can become verbose and error-prone, especially if the object is deeply nested. a cleaner and more efficient solution would be to use object destructuring to only expose and consume the information you need.</p>
<pre class=""language-javascript""><code>// original object
const user = {
    id: 1,
    name: 'alice',
    email: 'alice@example.com',
    age: 25,
    address: {
        street: '123 main st',
        city: 'anytown',
        state: 'ca',
        zip: '12345'
    }
};

// only expose and consume the name and email properties
const { name, email } = user;

console.log(name); // 'alice'
console.log(email); // 'alice@example.com'</code></pre>
<h2>conclusion</h2>
<p>these are just a few tips for writing clean code. by following these best practices, you can create code that is easier to understand, maintain, and extend, leading to a more enjoyable and productive development experience. remember good documentation also helps the developer who wrote the code understand it better in the future but also makes it easier for other developers to read and understand the codebase. when code is well-documented, it can save time and effort in debugging and maintaining the code.</p>",how-to-write-clean-code-ten-tips-and-best-practices,"bestpractices,javascript,webdev,programming",published,1,308,http://res.cloudinary.com/dipkbpinx/image/upload/v1729773238/tech-tales/cover-images/favcpvfgybha2egwbayr.webp
39,top 5 best css frameworks for developers in 2024,"<p>writing semantic css is often hated by developers as it can lead to a lot of bugs and zombie code that unnecessarily bloats the code base. maintaining a large website with custom css is also overwhelming. luckily, there are css frameworks that also come with pre-styled components and thus make web dev faster.</p>
<p>css frameworks are pre-prepared libraries that are meant to be used to speed up the process of building websites or web applications. css frameworks are used to create familiar and consistent user interfaces, simplify responsive design, and enhance collaboration among development teams.</p>
<p>css frameworks come in three different categories: <code>components-based</code>, <code>utility-first</code>, and <code>css-in-js </code>frameworks. <strong>components-based frameworks</strong> offer a set of pre-built ui components that developers can plug into their applications to assemble interfaces quickly. the goal is to provide a modular and reusable design system that can help you create consistent and visually appealing web apps without starting from scratch every time.</p>
<p><strong>utility-first libraries</strong> focus on functionality and thus offer css classes that can be used in the application to style components. unline components-based frameworks, these libraries do not offer any component, but classes can be reused.</p>
<p>lastly, the <strong>css-in-js</strong> frameworks utilize the dynamic nature of javascript to provide a way of writing interactive css styles that are performant and based on user data and interactions.</p>
<h1>5 best css frameworks to use</h1>
<h1>1. bootstrap</h1>
<p>bootstrap is a popular component-based framework originally developed by twitter(now x) and open-sourced in 2011. <a href=""https://getbootstrap.com/"">bootstrap</a> is one of the most widely used css frameworks, with a focus on responsive, mobile-first web design.</p>
<p>bootstrap offers a robust collection of css and javascript components, such as its grid system and responsive ui components like buttons, navigation menus, and forms, that streamline the process of building clean and consistent web layouts.</p>
<p>it also has a large community making it easy to find documentation and help. however, bootstrap can lead to websites that look similar to each other since it is so widely used and its large size can lead to slow loading time. another consideration is that bootstrap's default styles may require customization to fit with the design aesthetic of a particular project.</p>
<p><img src=""https://res.cloudinary.com/dipkbpinx/image/upload/v1727989387/tech-tales/blog-images/o0muyiagesnquxsblkqs.png"" alt=""bootsrap"" width=""1280"" height=""746""></p>
<h3>how to use bootstrap</h3>
<p>to get started, you can add the bootstrap cdn in the header of your html, or install the package if you are using single-page applications such as react.</p>
<pre class=""language-markup""><code>&lt;!doctype html&gt;
&lt;html lang=""en""&gt;
  &lt;head&gt;
    &lt;meta charset=""utf-8"" /&gt;
    &lt;meta name=""viewport"" content=""width=device-width, initial-scale=1.0"" /&gt;
    &lt;link
      href=""https://cdn.jsdelivr.net/npm/bootstrap@5.3.3/dist/css/bootstrap.min.css""
      rel=""stylesheet""
      integrity=""sha384-qwtkzyjppejisv5waru9oferpok6yctnymdr5pnlyt2brjxh0jmhjy6hw+alewih""
      crossorigin=""anonymous"" /&gt;
    &lt;title&gt;bootstrap tutorial&lt;/title&gt;
    &lt;script
      src=""https://cdn.jsdelivr.net/npm/bootstrap@5.3.3/dist/js/bootstrap.bundle.min.js""
      integrity=""sha384-yvpcryf0ty3lhb60nnkmxc5s9fdvzlesaaa55ndzoxhy9gkcidslk1en7n6jiehz""
      crossorigin=""anonymous""&gt;&lt;/script&gt;
  &lt;/head&gt;
  &lt;body&gt;
    &lt;ul
      class=""nav nav-pills nav-fill gap-2 p-1 small bg-primary rounded-5 shadow-sm""
      id=""pillnav2""
      role=""tablist""
      style=""
        --bs-nav-link-color: var(--bs-white);
        --bs-nav-pills-link-active-color: var(--bs-primary);
        --bs-nav-pills-link-active-bg: var(--bs-white);
      ""&gt;
      &lt;li class=""nav-item"" role=""presentation""&gt;
        &lt;button
          class=""nav-link active rounded-5""
          id=""home-tab2""
          data-bs-toggle=""tab""
          type=""button""
          role=""tab""
          aria-selected=""true""&gt;
          home
        &lt;/button&gt;
      &lt;/li&gt;
      &lt;li class=""nav-item"" role=""presentation""&gt;
        &lt;button
          class=""nav-link rounded-5""
          id=""profile-tab2""
          data-bs-toggle=""tab""
          type=""button""
          role=""tab""
          aria-selected=""false""&gt;
          profile
        &lt;/button&gt;
      &lt;/li&gt;
      &lt;li class=""nav-item"" role=""presentation""&gt;
        &lt;button
          class=""nav-link rounded-5""
          id=""contact-tab2""
          data-bs-toggle=""tab""
          type=""button""
          role=""tab""
          aria-selected=""false""&gt;
          contact
        &lt;/button&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/body&gt;
&lt;/html&gt;
</code></pre>
<p>you can also install the bootstrap npm package or gem and import only the needed code by running <code>npm install bootstrap @latest </code>or <code>gem install bootstrap -v 5.3.3</code>. this helps minimize the code and thus increase loading time.</p>
<pre class=""language-javascript""><code>//src/index.js
import 'bootstrap/dist/css/bootstrap.min.css';
import react from 'react';
function app() {
  return (
    &lt;div classname=""container""&gt;
      &lt;h1&gt;hello, bootstrap in react!&lt;/h1&gt;
      &lt;button classname=""btn btn-primary""&gt;click me&lt;/button&gt;
    &lt;/div&gt;
  );
}
export default app;</code></pre>
<h1>2. tailwind css</h1>
<p>tailwind css is by far my best css framework and could be at the top of the list, but then i would be biased. tailwind css is a popular utility-first css framework that provides a set of pre-defined classes that can be used to style html elements.</p>
<p>unlike bootstrap, tailwind is not opinionated and thus gives developers a lot of flexibility. tailwind css is highly customizable and allows you to configure and modify various aspects of the framework to suit your specific needs. it also scales well as unused classes are purged during build time.</p>
<p>however, tailwind css can also cause your code to look like blasphemy. since tailwind css relies on pre-defined classes, it can result in more html markup than is necessary, which may make the html code more complex and harder to maintain.</p>
<p>furthermore, without careful consideration, it's easy to overuse tailwind css classes, resulting in bloated css and html files, which can negatively impact website performance.</p>
<p><img src=""https://res.cloudinary.com/dipkbpinx/image/upload/v1727989425/tech-tales/blog-images/nr6i6bmzgz422pwxg9q8.png"" alt=""tailwind css"" width=""1280"" height=""746""></p>
<h2>how to use tailwind css</h2>
<p>you can use tailwind css through a cdn by adding the cdn link in the head of your document or by installing it using <code>npm i tailwindcss </code>and <code>npx tailwindcss init</code>. tailwind also offers components but they are in paid plans, although other popular libraries such as <code>daisy ui , flowbite, preline</code>and <code>shad cn</code> provide free tailwind-styled components.</p>
<p>here is a sample code using the cdn link:</p>
<pre class=""language-markup""><code>&lt;!doctype html&gt;
&lt;html&gt;
&lt;head&gt;
  &lt;meta charset=""utf-8""&gt;
  &lt;meta name=""viewport"" content=""width=device-width, initial-scale=1.0""&gt;
  &lt;script src=""https://cdn.tailwindcss.com""&gt;&lt;/script&gt;
&lt;/head&gt;
&lt;body&gt;
  &lt;h1 class=""text-3xl font-bold underline""&gt;
    hello world!
  &lt;/h1&gt;
&lt;/body&gt;
&lt;/html&gt;</code></pre>
<h1>3. material ui</h1>
<p>material ui is a component-based library for building react ⚛️applications built and maintained by google. material ui offers a modern and visually appealing design system. it features a suite of customization options that make it easy for developers to implement custom design systems on top of the library, making it a popular choice for creating consistent uis in react applications.</p>
<p>however, material ui suffers the same fate as bootstrap in that it is opinionated and websites styled with material ui tend to look the same. using pre-styled components can limit your design choices, and material ui can also increase loading time.</p>
<p><img src=""https://res.cloudinary.com/dipkbpinx/image/upload/v1727989458/tech-tales/blog-images/t4sd1cpctrkkagpmyuon.png"" alt=""material-ui"" width=""1280"" height=""694""></p>
<h2>how to use material ui</h2>
<p>to use material ui, you need to install the npm package for one of the core ui libraries, with a choice between <code>material ui</code>, <code>joy ui</code>, <code>base ui</code>, and <code>mui system</code>. the package can be installed by running the npm command:</p>
<pre class=""language-javascript""><code>npm install @mui/material @emotion/react @emotion/styled</code></pre>
<p>you can then import and use components that you need and let the library worry about styling them.</p>
<pre class=""language-javascript""><code>import button from ""@mui/material/button"";
export default function button() {
  return (
      &lt;button variant=""contained""&gt;hello world&lt;/button&gt;
  );
}
</code></pre>
<h1>4. foundation</h1>
<p>foundation is a css-in-js library that brags about being <em>""the most advanced responsive front-end framework in the world""</em>. it includes a wide range of pre-designed components and a responsive grid system. it also includes javascript plugins for added functionality.</p>
<p>it includes common ui components like bootstrap but is more utility-focused and gives developers more options for customizing components. with almost too many features, it can be considerably more complex and harder to fully understand how everything works compared to other frameworks.</p>
<p>the framework is less popular and its documentation is less comprehensive compared to other frameworks. furthermore, foundation has a smaller user community compared to bootstrap, so finding support and resources can be more challenging. some of its features can be less intuitive to use than bootstrap's.</p>
<p><img src=""https://res.cloudinary.com/dipkbpinx/image/upload/v1727989557/tech-tales/blog-images/guj1gwykghyskhqdn9mj.png"" alt=""foundation"" width=""1280"" height=""647""></p>
<h2>how to use foundation ui</h2>
<p>you can install foundation in your project with a package manager.</p>
<pre class=""language-javascript""><code>npm install foundation-sites</code></pre>
<p>now you can use its styles and components in your application. note that you do not import anything but rather utilize its pre-styled classes.&nbsp;</p>
<pre class=""language-markup""><code>&lt;div class=""card"" style=""width: 300px""&gt;
  &lt;div class=""card-divider""&gt;this is a header&lt;/div&gt;
  &lt;img src=""assets/img/generic/rectangle-1.jpg"" /&gt;
  &lt;div class=""card-section""&gt;
    &lt;h4&gt;this is a card.&lt;/h4&gt;
    &lt;p&gt;it has an easy to override visual style.&lt;/p&gt;
  &lt;/div&gt;
&lt;/div&gt;</code></pre>
<p>since you will probably never use this library, here is a codepen of a sample of how the library-styled components look like:</p>
<p><iframe style=""box-sizing: inherit; border: 0px; --tw-border-spacing-x: 0; --tw-border-spacing-y: 0; --tw-translate-x: 0; --tw-translate-y: 0; --tw-rotate: 0; --tw-skew-x: 0; --tw-skew-y: 0; --tw-scale-x: 1; --tw-scale-y: 1; --tw-scroll-snap-strictness: proximity; --tw-ring-offset-width: 0px; --tw-ring-offset-color: #fff; --tw-ring-color: rgba(59,130,246,.5); --tw-ring-offset-shadow: 0 0 #0000; --tw-ring-shadow: 0 0 #0000; --tw-shadow: 0 0 #0000; --tw-shadow-colored: 0 0 #0000; scrollbar-width: auto; scrollbar-color: rgb(59, 130, 246) rgb(255, 255, 255); display: block; vertical-align: middle; margin: max(3.2vmin, 24px) 0px 0px; overflow-x: auto; border-radius: 5px !important; width: 946.667px; max-width: 100%; font-style: normal; font-variant-ligatures: normal; font-variant-caps: normal; font-variant-numeric: inherit; font-variant-east-asian: inherit; font-variant-alternates: inherit; font-variant-position: inherit; font-weight: 400; font-stretch: inherit; line-height: inherit; font-family: -apple-system, blinkmacsystemfont, 'segoe ui', roboto, oxygen, ubuntu, cantarell, 'fira sans', 'droid sans', 'helvetica neue', sans-serif; font-optical-sizing: inherit; font-kerning: inherit; font-feature-settings: inherit; font-variation-settings: inherit; font-size: 16px; padding: 0px; grid-column: main-start / main-end; color: rgba(255, 255, 255, 0.75); letter-spacing: normal; orphans: 2; text-align: start; text-indent: 0px; text-transform: none; widows: 2; word-spacing: 0px; -webkit-text-stroke-width: 0px; white-space: normal; background-color: #151719; text-decoration-thickness: initial; text-decoration-style: initial; text-decoration-color: initial; height: 399px;"" title=""&lt;details&gt; and &lt;summary&gt; tag"" src=""https://codepen.io/iammanchanda/embed/xrqjxj?default-tab=result&amp;theme-id=light"" width="""" height=""300"" frameborder=""no"" scrolling=""no"" allowfullscreen=""allowfullscreen"" loading=""lazy""></iframe></p>
<h1>5. mantine ui</h1>
<p>i am not sure whether this library makes the list since it is fairly unpopular. mantine ui is a new css framework that includes more than 100 customizable components and 50 hooks to cover you in any situation. the library has over <code>360,295</code> weekly downloads on npm.</p>
<p>unlike other libraries, mantine comes with everything in one package, including state management utils, tables with pagination, forms with verification, a rich text editor, spotlight, and dom utils. mantine also allows you to install only the library that you are using, with an example of<code> @mantine/core</code>, <code>@mantine/hooks</code>, <code>@mantine/utils</code>, <code>@mantine/styles</code>, <code>@mantine/prism</code>, and <code>@mantine/datatable</code> among others.</p>
<p>however, the library is fairly new and thus lacks community support although it is expected to reach a wider audience. if you are working on side projects or your personal projects or if you want to give a life to your idea quickly then you can try this.</p>
<p><img src=""https://res.cloudinary.com/dipkbpinx/image/upload/v1724304467/tech-tales/blog-images/sr9yduoekzam0xhnaaiu.png"" alt=""mantine-ui"" width=""1225"" height=""616""></p>
<h2>how to use mantine ui</h2>
<p>you can use mantine ui by installing parts of the library that you need using your package manager.</p>
<pre class=""language-javascript""><code>npm install @mantine/core @mantine/hooks @mantine/form</code></pre>
<p>the library supports various react frameworks such as vite, gatsby, nextjs, and remix, and provides templates that are ready to use. after installing the framework, you need to import the css file into your root file.</p>
<pre class=""language-javascript""><code>//app.jsx
// core styles are required for all packages
import '@mantine/core/styles.css';

// other css files are required only if
// you are using components from the corresponding package
// import '@mantine/dates/styles.css';
// import '@mantine/dropzone/styles.css';
// import '@mantine/code-highlight/styles.css';
</code></pre>
<p>after this, you need to wrap your page with a mantime provider to get access to all mantine functionalities such as themes, although this is not necessary. alternatively, you can directly import the components that you need and use them in your app.</p>
<pre class=""language-javascript""><code>import { createtheme, mantineprovider } from '@mantine/core';
const theme = createtheme({
  /** put your mantine theme override here */
});
function demo() {
  return (
    &lt;mantineprovider theme={theme}&gt;
      {/* your app here */}
    &lt;/mantineprovider&gt;
  );
}
//your app component
import { pininput } from '@mantine/core';
function onetimecodeinput() {
  return &lt;pininput onetimecode /&gt;;
}</code></pre>
<h1>conclusion</h1>
<p>in this blog, we have explored some of the 5 most popular and use css libraries/frameworks in 2024. these libraries can be time-saving as they allow you to quickly bootstrap applications. when choosing the right framework, you need to consider customizability, learning curve, community support, and how the library fits into your project.</p>
<blockquote>
<p>don't choose a framework because it makes your work easier, rather because it fits well with your project!</p>
</blockquote>",top-5-best-css-frameworks-for-developers-in-2024,"css,web-dev,frontend,css-frameworks",published,2,1123,http://res.cloudinary.com/dipkbpinx/image/upload/v1725020667/tech-tales/cover-images/ymawwf6xn24avdlcidhu.png
31,how to use gemini api in nextjs,"<p style=""box-sizing: border-box; margin: 0px; padding: 0px;"">ai apps are evolving rapidly, which is great news for developers and users. i'm interested in using ai to generate blog article summaries to make it easier for readers to grasp the main points before diving into the full article.</p>
<p style=""box-sizing: border-box; margin: 0px; padding: 0px;"">this article discusses the process of integrating the gemini api in nextjs and the various functionalities it offers. you'll be surprised to learn how straightforward incorporating the api into your app is. before i begin, i'd like to shout out to avinash prasad for providing a simple guide.""</p>
<p><iframe style=""display: table; margin-left: auto; margin-right: auto;"" src=""https://www.youtube.com/embed/6cgentjwkfs"" width=""560"" height=""314"" allowfullscreen=""allowfullscreen""></iframe></p>
<h1 id=""step-3-obtain-the-gemini-api-key"">step 1: obtain the gemini api key</h1>
<p>to begin, head over to <a title=""google ai studio"" href=""https://ai.google.dev/aistudio"" target=""_blank"" rel=""noopener"">google ai studio</a> and create a free gemini api key. this key will enable you to communicate with various gemini models. save the key in .env file as gemini_api_key.</p>
<pre class=""language-javascript""><code>//.env
gemini_api_key=""your_key_here""</code></pre>
<h1>step 2: install google generative ai package</h1>
<p>install the google ai javascript sdk enables you to use google&rsquo;s generative ai models. make sure you are in your project&rsquo;s root directory and run the following command in your terminal:</p>
<pre class=""language-javascript""><code>npm install @google/generative-ai</code></pre>
<h1>step 3: create an api route to handle requests</h1>
<p>in the api folder, create a router handle that helps you communicate with gemini. for this tutorial, i named the file gemini and added a route.ts file. requests to gemini will go to /api/gemini</p>
<pre class=""language-javascript""><code>//api/gemini/route.ts
//i recommend using typescript for type safety
import { nextrequest, nextresponse } from ""next/server"";
import { googlegenerativeai } from ""@google/generative-ai"";
export async function post(req: nextrequest, res: nextresponse) {
  try {
    const apikey = process.env.gemini_api_key as string;
//to avoid type-error where typescript complains the api-key could be null
    if (!apikey) {
      throw new error(
        ""gemini_api_key is not defined in the environment variables.""
      );
    }
    const genai = new googlegenerativeai(apikey);
    const model = genai.getgenerativemodel({ model: ""gemini-1.5-flash"" }); //you can choose other models such as gemini-pro and gemini
    const { message } = await req.json();
    const result = await model.generatecontent(message);
    const response = await result.response.text();
    return nextresponse.json({ message: response });
  } catch (error) {
    console.error(error);
    return nextresponse.json(
      { error: ""something went wrong"" },
      { status: 503 }
    );
  }
}
</code></pre>
<h1>step 4: create a helper function</h1>
<p>since this is a post route, we need a function that receives the message body and fetches data from this route. i recommend creating a function in a lib file for reusability and type safety.</p>
<pre class=""language-javascript""><code>//lib/generate
import { baseurl } from ""."";
type data = {
  message: string;
};
export async function handlegenerate(data: data) {
  try {
    const response = await fetch(`${baseurl}/gemini`, {
      method: ""post"",
      headers: {
        accept: ""application/json"",
        ""content-type"": ""application/json"",
      },
      body: json.stringify(data),
    });
    if (!response.ok) {
      throw new error(`http error! status: ${response.status}`);
    }
    const  data = await response.json();
    return data;
  } catch (error) {
    console.error(error);
    return null;
  }
}
</code></pre>
<h1>step 4: fetching data</h1>
<p>we can now import this function and call it whenever we need to contact gemini by passing the message prop.</p>
<pre class=""language-javascript""><code>//example component chat.js
import {handlegenerate} from ""@/lib/generate""
export default function chat(){
return (
  &lt;form action={handlegenerate}&gt;
       &lt;input type=""text"" name=""message"" id=""message"" placeholder=""type your message here""&gt;&lt;/input&gt;
       &lt;button type=""submit"" classname=""add styling""&gt;send&lt;/button&gt;
&lt;/form&gt;
)};</code></pre>
<p>this simple code uses server actions to send the message. however, we need to handle what to do with the data and might need to usestate to store the response we get from the handlegenerate</p>
<h1>step 5: rendering data</h1>
<pre class=""language-javascript""><code>//example component chat.js
(""use client"");
import react, { usestate } from ""react"";
import { handlegenerate } from ""@/lib/generate"";
export default function chat() {
  const [message, setmessage] = usestate("""");
  const [response, setresponse] = usestate("""");
  async function handlesubmit() {
    const data = await handlegenerate(message);
    setresponse(data);
    setmessage("""");
  }
  const parse = new domparser().parsefromstring(htmlstring, ""text/html"");
  return (
    &lt;form action={handlesubmit}&gt;
      &lt;input
        type=""text""
        name=""message""
        value={message}
        onchange={(e) =&gt; setmessage(e.target.value)}
        placeholder=""type your message here""&gt;&lt;/input&gt;
      &lt;button type=""submit"" classname=""add styling""&gt;
        send
      &lt;/button&gt;
      &lt;div classname=""bg-transparent rounded mt-7 p-2 flex justify-center""&gt;
        {parse(response)}
      &lt;/div&gt;
    &lt;/form&gt;
  );
}
</code></pre>
<h1>advanced&nbsp;</h1>
<p>depending on your use case, you might need to stream the incoming data to the client. for example, if you are creating a chatbot. you can stream the data by using gemini in combination with fastapi to return chucks:</p>
<pre class=""language-javascript""><code>import { nextrequest, nextresponse } from ""next/server"";
import { googlegenerativeai } from ""@google/generative-ai"";
export async function post(req: nextrequest, res: nextresponse) {
  try {
    const apikey = process.env.gemini_api_key as string;
    if (!apikey) {
      throw new error(
        ""gemini_api_key is not defined in the environment variables.""
      );
    }
    const genai = new googlegenerativeai(apikey);
    const model = genai.getgenerativemodel({ model: ""gemini-1.5-flash"" });
    const { message } = await req.json();
    const result = await model.generatecontentstream(message);
        for await (const chunk of result.stream) {
            const chunktext = chunk.text();
            console.log(chunktext);
         return nextresponse.json({ message: chunktext });
         }
  } catch (error) {
    console.error(error);
    return nextresponse.json(
      { error: ""something went wrong"" },
      { status: 503 }
    );
  }
}
</code></pre>
<h1>conclusion</h1>
<p>integrating the gemini model into your app is as simple as adding the above code block. however, note there are rate limitations and you might need to modify your model to limit the tokens utilized per each response.</p>
<h1>resources:</h1>
<ul>
<li><a href=""https://dev.to/thevinitgupta/google-gemini-based-ai-chatbot-using-nextjs-2n09"">https://dev.to/thevinitgupta/google-gemini-based-ai-chatbot-using-nextjs-2n09</a></li>
<li><a href=""https://developer.mozilla.org/en-us/docs/web/api/domparser/parsefromstring"">https://developer.mozilla.org/en-us/docs/web/api/domparser/parsefromstring</a></li>
<li><a href=""https://medium.com/technology-hits/lets-build-an-ai-chatbot-with-gemini-ai-in-next-js-14-fc74e5c3a70d"">let&rsquo;s build an ai chatbot with gemini ai in next.js 14 | by charles e. | technology hits | medium</a></li>
</ul>",how-to-use-gemini-api-in-nextjs,"gemini,nextjs,ai,node",published,4,1801,http://res.cloudinary.com/dipkbpinx/image/upload/v1725018695/tech-tales/cover-images/a164mdrmrpdwgzeo7tzk.png
53,"building a rest api with prisma, nodejs and postgresql","<p>i once shared that i have migrated my database from <code>active record</code> using <code>ruby on rails</code> to a <code>prisma orm</code> and <code>node js</code> server powered by <code>nextjs</code>. this tutorial will create a simple api for tesla vehicles to help you get started. prisma is a powerful database toolkit that simplifies working with databases by providing a modern, type-safe query builder.</p>
<div id=""toc"" class=""mce-toc"">
<h2>table of contents</h2>
<ol>
<li>1. <a href=""#prerequisites"">prerequisites</a></li>
<li>2. <a href=""#step-by-step-guide"">step by step guide</a>
<ol>
<li>2.1 <a href=""#step-1:-setting-up-your-node.js-project"">step 1: setting up your node.js project</a></li>
<li>2.2 <a href=""#step-2-setting-up-prisma-with-postgresql"">step 2 &mdash; setting up prisma with postgresql</a></li>
<li>2.3 <a href=""#step-3-defining-your-data-model-and-creating-database-tables"">step 3 &mdash; defining your data model and creating database tables</a></li>
<li>2.4 <a href=""#step-5:-generating-a-prisma-client"">step 5: generating a prisma client</a></li>
<li>2.5 <a href=""#step-6:-seeding-the-database"">step 6: seeding the database</a></li>
<li>2.6 <a href=""#step-7:-create-crud-operations"">step 7: create crud operations</a></li>
</ol>
</li>
<li>3. <a href=""#conclusion"">conclusion</a></li>
</ol>
</div>
<h1 id=""conclusion"">prerequisites</h1>
<p>before starting, ensure you have the following:</p>
<ul>
<li>node.js installed (version 14 or higher)</li>
<li>a postgresql database (you can create a free database with vercel or neon db)</li>
</ul>
<h1>step by step guide</h1>
<h2 id=""step-7:-create-crud-operations"">step 1: setting up your node.js project</h2>
<p>the first step is to initialize a new nodejs project in the terminal. this project will be the foundation for the rest api you will build in this tutorial. to do this, you must first create a folder and a typescript project.</p>
<pre class=""language-javascript""><code>mkdir tesla-api
cd tesla-api
npm init -y</code></pre>
<p>after creating a new nodejs project, we need to install other prerequisites such as typescript and prisma cli.</p>
<pre class=""language-javascript""><code>npm install typescript ts-node @types/node --save-dev
npm install express prisma @prisma/client
</code></pre>
<p>lastly, we need to add a <code>tsconfig.json</code> file to make sure typescript works correctly. you can create the file manually or use <code><span class=""token function"">nano</span> tsconfig.json</code> and add the following code.</p>
<pre class=""language-typescript""><code>{
  ""compileroptions"": {
    ""sourcemap"": true,
    ""outdir"": ""dist"",
    ""strict"": true,
    ""lib"": [""esnext""],
    ""esmoduleinterop"": true
  }
}</code></pre>
<h2 id=""step-2-setting-up-prisma-with-postgresql"">step 2 &mdash; setting up prisma with postgresql</h2>
<p>the second step is to initialize prisma and create our vehicle model to map with the database. we first need to add our database url to the <code>.env</code> file so that prisma knows how to connect with the database.</p>
<pre class=""language-bash""><code>nano .env
</code></pre>
<p>now update the <code>.env</code> file to add your database url from vercel, neondb, or another database provider. if you are using ubuntu, you can also run postgresql locally using pgadmin. if you are on a pooled database you also need a non-pooling url to be used for seeding.</p>
<pre class=""language-typescript""><code>//tesla-api/.env
database_url=""postgresql://johndoe:your_password@localhost:5432/my-blog?schema=public""
non_pooling_database_url=""postgresql://johndoe:your_password@localhost:5432/my-blog?schema=public""</code></pre>
<p>make sure to change the database credentials to the ones you specified in your hosted database or localhost database. once you&rsquo;re done, save and exit the file and initialize prisma by running. <code>npx prisma init</code>.</p>
<pre class=""language-bash""><code>npx prisma init
output
✔ your prisma schema was created at prisma/schema.prisma.
  you can now open it in your favorite editor.</code></pre>
<h2 id=""step-3-defining-your-data-model-and-creating-database-tables"">step 3 &mdash; defining your data model and creating database tables</h2>
<p>now that your project is initialized, it's time to define your data model. navigate to the&nbsp;<code>prisma/schema.prisma</code> file in your project directory. here, you'll define your database schema using prisma's intuitive schema language.</p>
<pre class=""language-typescript""><code>datasource db {
  provider  = ""postgresql""
  url       = env(""database_url"")
  directurl = env(""non_pooling_database_url"")
}

generator client {
  provider = ""prisma-client-js""
}

model vehicle {
  id        int     @id @default(autoincrement())
  model     string
  price     float
  picture   string
  year      int
  createdat datetime @default(now())
  updatedat datetime @updatedat
}
</code></pre>
<p>we are defining just one model for the vehicle with fields for model, price, picture, and year, but you can add a user model if you like. save the changes and close the file.</p>
<p>with these models in place, you can now create the corresponding tables in the database using prisma migrate. in your terminal, run the following command:</p>
<pre class=""language-bash""><code>npx prisma migrate dev --name init</code></pre>
<p>this command generates a new migration file based on your data model changes. the sql migration file in the&nbsp;<code>prisma/migrations/<mark>20241209084626</mark>_init/migration.sql</code> directory has the following statements that were executed against the database.</p>
<h2>step 5: generating a prisma client</h2>
<p>it is often a good practice to create a global prisma client to prevent recreating a new instance every time. to do this, we initialize prisma client using&nbsp;<code>npx prisma generate</code> and create a new folder where we declare a prisma client and export the client for use in other files.</p>
<pre class=""language-bash""><code>npx prisma generate</code></pre>
<p>now create a file named <code>prisma.ts</code> under the <code>prisma</code> folder and add the following code:</p>
<pre class=""language-typescript""><code>//prisma.prisma.ts
import { prismaclient } from ""@prisma/client"";
declare global {
    let prisma: prismaclient | undefined;
  }
  const globalforprisma = global as typeof global &amp; { prisma?: prismaclient };
  let prisma: prismaclient;
  if (!globalforprisma.prisma) {
    globalforprisma.prisma = new prismaclient();
  }
  prisma = globalforprisma.prisma;
  export default prisma;</code></pre>
<h2>step 6: seeding the database</h2>
<p>prisma allows us to seed the database if we have some seed data. to seed your database, you need to add a <code>seed.ts </code>file and add our seed data. in a larger project, you might need to edit the <code>package.json</code> to add a seed script.</p>
<pre class=""language-typescript""><code>//prisma/seed.js
import prisma from ""../prisma/prisma""
async function main() {
  await prisma.vehicle.createmany({
    data: [
      { model: 'tesla model s', price: '51885.17', picture: 'https://static-assets.tesla.com/configurator/compositor?&amp;options=$mt337,$ppsw,$w40b,$ibb1&amp;view=stud_front34&amp;model=m3&amp;size=1920&amp;bkba_opt=2&amp;version=v0028d202109300916&amp;crop=0,0,0,0&amp;version=v0028d202109300916', year: 2012 },
      { model: 'tesla model 3', price: '100990', picture: 'https://static-assets.tesla.com/configurator/compositor?&amp;options=$mts10,$ppsw,$ws90,$ibe00&amp;view=front34&amp;model=ms&amp;size=1920&amp;bkba_opt=2&amp;version=v0028d202109300916&amp;crop=0,0,0,0&amp;version=v0028d202109300916', year: 2017 },
      { model: 'tesla model x', price: '120990', picture: 'https://static-assets.tesla.com/configurator/compositor?&amp;options=$mtx10,$ppsw,$wx00,$ibe00&amp;view=front34&amp;model=mx&amp;size=1920&amp;bkba_opt=2&amp;version=v0028d202109300916&amp;crop=0,0,0,0&amp;version=v0028d202109300916', year: 2015 },
      { model: 'tesla model y', price: '65000', picture: 'https://static-assets.tesla.com/configurator/compositor?&amp;options=$mty07,$ppsw,$wy19b,$inpb0&amp;view=front34&amp;model=my&amp;size=1920&amp;bkba_opt=2&amp;version=v0028d202109300916&amp;crop=0,0,0,0&amp;version=v0028d202109300916', year: 2020 }
    ]
  });
}

main()
  .then(() =&gt; {
    console.log('database seeded');
  })
  .catch((e) =&gt; {
    console.error(e);
    process.exit(1);
  })
  .finally(async () =&gt; {
    await prisma.$disconnect();
  });
</code></pre>
<p>next, run the seed script in the terminal by running the command:</p>
<pre class=""language-bash""><code>node prisma/seed.js</code></pre>
<h2>step 7: create crud operations</h2>
<p>the next step is to initiate a <code>expressjs</code> server to interact with the database and perform crud operations.</p>
<p>first, create a <code>index.ts</code> file to add our server code.</p>
<pre class=""language-bash""><code>nano src/index.ts</code></pre>
<p>in the <code>src/index.ts</code> file, add the following code to create the api routes.</p>
<pre class=""language-typescript""><code>import express from ""express"";
import prisma from ""../prisma/prisma""
const app = express();
app.use(express.json());
// get all vehicles
app.get('/vehicles', async (req, res) =&gt; {
  const vehicles = await prisma.vehicle.findmany();
  res.json(vehicles);
});
// get a vehicle by id
app.get('/vehicles/:id', async (req, res) =&gt; {
  const { id } = req.params;
  const vehicle = await prisma.vehicle.findunique({
    where: { id: parseint(id) },
  });
  res.json(vehicle);
});
// create a new vehicle
app.post('/vehicles', async (req, res) =&gt; {
  const { model, price, picture, year } = req.body;
  const newvehicle = await prisma.vehicle.create({
    data: { model, price, picture, year },
  });
  res.json(newvehicle);
});
// update a vehicle
app.put('/vehicles/:id', async (req, res) =&gt; {
  const { id } = req.params;
  const { model, price, picture, year } = req.body;
  const updatedvehicle = await prisma.vehicle.update({
    where: { id: parseint(id) },
    data: { model, price, picture, year },
  });
  res.json(updatedvehicle);
});
// delete a vehicle
app.delete('/vehicles/:id', async (req, res) =&gt; {
  const { id } = req.params;
  await prisma.vehicle.delete({
    where: { id: parseint(id) },
  });
  res.sendstatus(204);
});
// start the server
app.listen(3000, () =&gt; {
  console.log('server is running on http://localhost:3000');
});
</code></pre>
<p>test the server by running the following command</p>
<pre class=""language-bash""><code>npx ts-node src/index.ts
or
node src/index.ts</code></pre>
<p>you can modify the routes to add <code>try catch</code> blocks for error handling. you can also edit the&nbsp;<code>package.json</code> file to make it easier to run the server by adding a run script. update the package.json file to add the following code.</p>
<pre class=""language-javascript""><code>""scripts"": {
  ""build"": ""tsc"",
  ""start"": ""node dist/index.js"",
  ""dev"": ""ts-node src/index.ts""
}</code></pre>
<p>now you can start the development server using npm as follows:</p>
<pre class=""language-bash""><code>npm run dev</code></pre>
<h1>conclusion</h1>
<p>in this article, you created a rest api server with several different routes to create, read, update, and delete user and post data for a sample blogging application. inside the api routes, you use the prisma client to send the respective queries to your database.</p>
<p>as next steps, you can implement additional api routes or extend your database schema using prisma migrate. visit the&nbsp;<a href=""https://www.prisma.io/docs"" target=""_blank"" rel=""ugc nofollow noopener"">prisma documentation</a>&nbsp;to learn about different aspects of prisma and explore some ready-to-run example projects using tools such as&nbsp;<a href=""https://www.prisma.io/docs/understand-prisma/prisma-in-your-stack/graphql"" target=""_blank"" rel=""ugc nofollow noopener"">graphql</a>&nbsp;or&nbsp;<a href=""https://github.com/prisma/prisma-examples/tree/master/typescript/grpc"" target=""_blank"" rel=""ugc nofollow noopener"">grpc apis</a>&nbsp;in the&nbsp;<a href=""https://github.com/prisma/prisma-examples/"" target=""_blank"" rel=""ugc nofollow noopener""><code>prisma-examples</code></a>&nbsp;repository.</p>
<p>&nbsp;</p>",building-a-rest-api-with-prisma-nodejs-and-postgresql,"restapi,prisma,nodejs,postgresql
",published,1,934,http://res.cloudinary.com/dipkbpinx/image/upload/v1726541867/tech-tales/cover-images/zcu7y27vk5y6eg35hxr8.jpg
38,ten useful css features you might not know about,"<p>css is full of new tricks and features that you might not even know about. these features can help us become better in our daily development and even solve our problems. here are 10 css features that you might not know about.</p>
<h1>1. color-mix()</h1>
<p><a title=""css color-mix()"" href=""https://developer.mozilla.org/en-us/docs/web/css/color_value/color-mix"" target=""_blank"" rel=""noopener"">css color-mix()</a> has full support in all modern browsers. for me, this is one of the coolest css features introduced in 2022, which allows us to mix different colors without using gradients.</p>
<p>the&nbsp;<span style=""background-color: #ecf0f1;""><strong><code>color-mix()</code></strong></span>&nbsp;functional notation takes two<span style=""background-color: #ecf0f1;"">&nbsp;</span><code><a href=""https://developer.mozilla.org/en-us/docs/web/css/color_value""><span style=""background-color: #ecf0f1;"">&lt;color&gt;</span></a></code> values and returns the result of mixing them in a given colorspace by a given amount.&nbsp;</p>
<p>functional notation:&nbsp;<code>color-mix(&lt;color-interpolation-method&gt;, &lt;color&gt;[&lt;percentage&gt;], &lt;color&gt;[&lt;percentage&gt;])</code></p>
<dl>
<dt id=""color-interpolation-method"">
<h3><span style=""font-family: georgia, palatino, serif;""><code>color-interpolation-method</code></span></h3>
</dt>
<dd>
<p>specifies what interpolation method should be used to mix the colors. it consists of the&nbsp;<code>in</code>&nbsp;keyword followed by a&nbsp;<a href=""https://developer.mozilla.org/en-us/docs/glossary/color_space"">color space</a>&nbsp;name. the following three types are available:</p>
<ul>
<li><code>&lt;rectangular-color-space&gt;</code>:&nbsp;<a href=""https://developer.mozilla.org/en-us/docs/glossary/color_space#srgb""><code>srgb</code></a>,&nbsp;<a href=""https://developer.mozilla.org/en-us/docs/glossary/color_space#srgb-linear""><code>srgb-linear</code></a>,&nbsp;<a href=""https://developer.mozilla.org/en-us/docs/glossary/color_space#display-p3""><code>display-p3</code></a>,&nbsp;<a href=""https://developer.mozilla.org/en-us/docs/glossary/color_space#a98-rgb""><code>a98-rgb</code></a>,&nbsp;<a href=""https://developer.mozilla.org/en-us/docs/glossary/color_space#prophoto-rgb""><code>prophoto-rgb</code></a>,&nbsp;<a href=""https://developer.mozilla.org/en-us/docs/glossary/color_space#rec2020""><code>rec2020</code></a>,&nbsp;<a href=""https://developer.mozilla.org/en-us/docs/glossary/color_space#cielab_color_spaces""><code>lab</code></a>,&nbsp;<a href=""https://developer.mozilla.org/en-us/docs/glossary/color_space#oklab""><code>oklab</code></a>,&nbsp;<a href=""https://developer.mozilla.org/en-us/docs/glossary/color_space#xyz_color_spaces""><code>xyz</code></a>,&nbsp;<a href=""https://developer.mozilla.org/en-us/docs/glossary/color_space#xyz""><code>xyz-d50</code></a>, and&nbsp;<a href=""https://developer.mozilla.org/en-us/docs/glossary/color_space#xyz-d50""><code>xyz-d65</code></a>.</li>
<li><code>&lt;polar-color-space&gt;</code>:&nbsp;<a href=""https://developer.mozilla.org/en-us/docs/web/css/color_value/hsl""><code>hsl</code></a>,&nbsp;<a href=""https://developer.mozilla.org/en-us/docs/web/css/color_value/hwb""><code>hwb</code></a>,&nbsp;<a href=""https://developer.mozilla.org/en-us/docs/web/css/color_value/lch""><code>lch</code></a>, and&nbsp;<a href=""https://developer.mozilla.org/en-us/docs/web/css/color_value/oklch""><code>oklch</code></a>.</li>
<li>custom-color-space:&nbsp;<a href=""https://developer.mozilla.org/en-us/docs/web/css/dashed-ident#using_with_color-profile""><code>&lt;dashed-ident&gt;</code></a>&nbsp;referring to a custom&nbsp;<a href=""https://developer.mozilla.org/en-us/docs/web/css/@color-profile"">@color profile</a></li>
</ul>
</dd>
</dl>
<p>example of color mix:</p>
<p><iframe style=""box-sizing: inherit; border: 0px; --tw-border-spacing-x: 0; --tw-border-spacing-y: 0; --tw-translate-x: 0; --tw-translate-y: 0; --tw-rotate: 0; --tw-skew-x: 0; --tw-skew-y: 0; --tw-scale-x: 1; --tw-scale-y: 1; --tw-scroll-snap-strictness: proximity; --tw-ring-offset-width: 0px; --tw-ring-offset-color: #fff; --tw-ring-color: rgba(59,130,246,.5); --tw-ring-offset-shadow: 0 0 #0000; --tw-ring-shadow: 0 0 #0000; --tw-shadow: 0 0 #0000; --tw-shadow-colored: 0 0 #0000; scrollbar-width: auto; scrollbar-color: rgb(59, 130, 246) rgb(255, 255, 255); display: block; vertical-align: middle; margin: max(3.2vmin, 24px) 0px 0px; overflow-x: auto; width: 100%; max-width: 100%; font-style: normal; font-variant-ligatures: normal; font-variant-caps: normal; font-variant-numeric: inherit; font-variant-east-asian: inherit; font-variant-alternates: inherit; font-variant-position: inherit; font-weight: 400; font-stretch: inherit; line-height: inherit; font-family: -apple-system, blinkmacsystemfont, 'segoe ui', roboto, oxygen, ubuntu, cantarell, 'fira sans', 'droid sans', 'helvetica neue', sans-serif; font-optical-sizing: inherit; font-kerning: inherit; font-feature-settings: inherit; font-variation-settings: inherit; font-size: 16px; padding: 0px; grid-column: main-start / main-end; color: rgba(255, 255, 255, 0.75); letter-spacing: normal; orphans: 2; text-align: start; text-indent: 0px; text-transform: none; widows: 2; word-spacing: 0px; -webkit-text-stroke-width: 0px; white-space: normal; background-color: #151719; text-decoration-thickness: initial; text-decoration-style: initial; text-decoration-color: initial; height: 399px; border-radius: 5px !important;"" title=""&lt;details&gt; and &lt;summary&gt; tag"" src=""https://codepen.io/kevinpowell/embed/poxvmyb?default-tab=css%2cresult&amp;editable=true&amp;theme-id=light"" width="""" height=""300"" frameborder=""no"" scrolling=""no"" allowfullscreen=""allowfullscreen"" loading=""lazy""></iframe></p>
<h1>2. marker (::marker)</h1>
<p>if you still use<span style=""background-color: #ecf0f1;"">::before</span> to style list elements, you might be surprised to know there is an easier way of doing that. the&nbsp;<strong><code>::marker</code></strong>&nbsp;<a href=""https://developer.mozilla.org/en-us/docs/web/css"">css</a>&nbsp;<a href=""https://developer.mozilla.org/en-us/docs/web/css/pseudo-elements"">pseudo-element</a>&nbsp;selects the marker box of a list item, which typically contains a bullet or number. it works on any element or pseudo-element set to&nbsp;<a href=""https://developer.mozilla.org/en-us/docs/web/css/display""><code>display: list-item</code></a>, such as the&nbsp;<a href=""https://developer.mozilla.org/en-us/docs/web/html/element/li""><code>&lt;li&gt;</code></a>&nbsp;and&nbsp;<a href=""https://developer.mozilla.org/en-us/docs/web/html/element/summary""><code>&lt;summary&gt;</code></a> elements.</p>
<pre class=""language-css""><code>li::marker {
  content: '✅ ';
  font-size: 1.2em;
}</code></pre>
<h3>results ⤵</h3>
<div style=""background-color: #f5f2f0; padding: 5px; border-radius: 8px; border: 1px solid #ccc;""><span style=""font-family: georgia, palatino, serif;"">✅ cheese</span><br><br><span style=""font-family: georgia, palatino, serif;"">✅ mango</span><br><br><span style=""font-family: georgia, palatino, serif;"">✅ avocado</span></div>
<p>however, browser support is not great and it is currently not supported in safari and safari on ios with animation or transition properties. hopefully, it will be supported very soon.</p>
<h1>3. current-color (currentcolor)</h1>
<p>i have often seen the currentcolor property in most svgs i work with and assumed it is an svg feature. however, currentcolor can work on any property. what if you want the border color of an element to be the same as the text color? assuming you have a&nbsp;<code>&lt;div&gt;</code> whose border and the text inside it are blue, you can use currentcolor to set the border to blue.</p>
<pre class=""language-markup""><code>&lt;div style=""color: blue; border: 1px dashed currentcolor;""&gt;
  the color of this text is blue.
  &lt;div style=""background: currentcolor; height:9px;""&gt;&lt;/div&gt;
  this block is surrounded by a blue border.
&lt;/div&gt;
</code></pre>
<h3>result ⤵</h3>
<div style=""color: blue; border: 1px dashed currentcolor;"">the color of this text is blue.
<div style=""background: currentcolor; height: 9px;"">&nbsp;</div>
this block is surrounded by a blue border.</div>
<h1>4. mix-blend-mode</h1>
<p>the&nbsp;<strong><code>mix-blend-mode</code></strong>&nbsp;<a href=""https://developer.mozilla.org/en-us/docs/web/css"">css</a> property sets how an element's content should blend with the content of the element's parent and the element's background.</p>
<p>there are over 20 mix-blend modes, although the support for some of them such as plus-lighter and plus-darker is not great. the blend mode on svgs is also not fully supported in all browsers.</p>
<pre class=""language-css""><code>.img {
  mix-blend-mode: multiply;
}</code></pre>
<h3>results ⤵</h3>
<p><img src=""https://res.cloudinary.com/dipkbpinx/image/upload/v1725020702/tech-tales/blog-images/b8qhyznwdyvtzt7iuby0.png"" width=""905"" height=""892""></p>
<h1><strong>5. clip-path</strong></h1>
<p>we have all seen some nice-looking borders and svgs. &nbsp;the <strong><code>clip-path</code></strong>&nbsp;<a href=""https://developer.mozilla.org/en-us/docs/web/css"">css</a> property creates a clipping region that sets what part of an element should be shown. parts that are inside the region are shown, while those outside are hidden. this can be overwhelming at first and i recommend using <a title=""clippy"" href=""https://bennettfeely.com/clippy"" target=""_blank"" rel=""noopener"">clippy</a> to create your clip-paths.</p>
<p>the clip path takes a basic shape such as a circle, polygon, &nbsp;<code><span class=""token function"">ellipse,</span></code>rect, or a path for an svg. you can use <code class=""mv6bhd"">clip-path</code>&nbsp;to turn boxes into different shapes, which can help break up the monotony of most websites, where everything is a box with straight edges.</p>
<p><iframe style=""box-sizing: inherit; border: 0px; --tw-border-spacing-x: 0; --tw-border-spacing-y: 0; --tw-translate-x: 0; --tw-translate-y: 0; --tw-rotate: 0; --tw-skew-x: 0; --tw-skew-y: 0; --tw-scale-x: 1; --tw-scale-y: 1; --tw-scroll-snap-strictness: proximity; --tw-ring-offset-width: 0px; --tw-ring-offset-color: #fff; --tw-ring-color: rgba(59,130,246,.5); --tw-ring-offset-shadow: 0 0 #0000; --tw-ring-shadow: 0 0 #0000; --tw-shadow: 0 0 #0000; --tw-shadow-colored: 0 0 #0000; scrollbar-width: auto; scrollbar-color: rgb(59, 130, 246) rgb(255, 255, 255); display: block; vertical-align: middle; margin: max(3.2vmin, 24px) 0px 0px; overflow-x: auto; width: 100%; max-width: 100%; font-style: normal; font-variant-ligatures: normal; font-variant-caps: normal; font-variant-numeric: inherit; font-variant-east-asian: inherit; font-variant-alternates: inherit; font-variant-position: inherit; font-weight: 400; font-stretch: inherit; line-height: inherit; font-family: -apple-system, blinkmacsystemfont, 'segoe ui', roboto, oxygen, ubuntu, cantarell, 'fira sans', 'droid sans', 'helvetica neue', sans-serif; font-optical-sizing: inherit; font-kerning: inherit; font-feature-settings: inherit; font-variation-settings: inherit; font-size: 16px; padding: 0px; grid-column: main-start / main-end; color: rgba(255, 255, 255, 0.75); letter-spacing: normal; orphans: 2; text-align: start; text-indent: 0px; text-transform: none; widows: 2; word-spacing: 0px; -webkit-text-stroke-width: 0px; white-space: normal; background-color: #151719; text-decoration-thickness: initial; text-decoration-style: initial; text-decoration-color: initial; height: 399px; border-radius: 5px !important;"" title=""&lt;details&gt; and &lt;summary&gt; tag"" src=""https://codepen.io/donvine254/embed/wvlmeog?default-tab=css%2cresult&amp;editable=true&amp;theme-id=light"" width="""" height=""300"" frameborder=""no"" scrolling=""no"" allowfullscreen=""allowfullscreen"" loading=""lazy""></iframe></p>
<h1>6. accent color</h1>
<p>if you have worked with forms, you probably know how difficult it is to change the color of checkboxes and radio inputs. the <strong><code>accent-color</code></strong>&nbsp;<a href=""https://developer.mozilla.org/en-us/docs/web/css"">css</a>&nbsp;property sets the&nbsp;<a href=""https://developer.mozilla.org/en-us/docs/glossary/accent"">accent</a> color for user-interface controls generated by some elements. the accent color is currently supported in the input type of checkbox, range, radio, and the progress element.</p>
<pre class=""language-css""><code>input[type='checkbox'] {
  accent-color: purple;
}</code></pre>
<h3>results ⤵</h3>
<div style=""padding: 5px; border: 1px solid #ccc; background-color: #f5f2f0; border-radius: 8px; width: 100%; font-size: 14px;""><label for=""check1"">☑️ checkbox input</label></div>
<h1>7. counter&nbsp;</h1>
<p>if you use unordered lists, they do not have any order. however, css counter allows you to set a counter for the &lt;ol&gt; and &lt;ul&gt; elements. <strong>css counters</strong> let you adjust the appearance of content based on its location in a document. for example, you can use counters to automatically number the headings on a webpage or to change the numbering on ordered lists.</p>
<pre class=""language-css""><code>li {
  font-size: 30px;
  margin-bottom: 20px;
  counter-increment: li;
  list-style: none;
}
.list li::before {
  content: counter(li);
  margin-right: 10px;
  width: 30px;
  height: 30px;
  border-radius: 30%;
  display: inline-block;
  background-color: #ffa500;
  color: white;
  text-align: center;
  line-height: 30px;
}</code></pre>
<h3>results ⤵</h3>
<div style=""background-color: #f5f2f0; padding: 5px; border-radius: 8px; border: 1px solid #ccc;"">
<div style=""font-size: 14px; margin-bottom: 2px;"">
<div style=""display: inline-block; width: 14px; height: 14px; border-radius: 50%; background-color: #ffa500; color: white; text-align: center; line-height: 14px; margin-right: 10px;"">1</div>
bread</div>
<div style=""font-size: 14px; margin-bottom: 2px;"">
<div style=""display: inline-block; width: 14px; height: 14px; border-radius: 50%; background-color: #ffa500; color: white; text-align: center; line-height: 14px; margin-right: 10px;"">2</div>
milk</div>
<div style=""font-size: 14px; margin-bottom: 2px;"">
<div style=""display: inline-block; width: 14px; height: 14px; border-radius: 50%; background-color: #ffa500; color: white; text-align: center; line-height: 14px; margin-right: 10px;"">3</div>
eggs</div>
</div>
<h1>8. any link (:any-link)</h1>
<p>if you have trouble styling links, especially when they lack a href, the&nbsp; <strong><code><span style=""background-color: #ecf0f1;"">:any-link</span></code></strong>&nbsp;<a href=""https://developer.mozilla.org/en-us/docs/web/css"">css</a>&nbsp;<a href=""https://developer.mozilla.org/en-us/docs/web/css/pseudo-classes"">pseudo-class</a> would be the best choice for you. the selector represents an element that acts as the source anchor of a hyperlink, independent of whether it has been visited.</p>
<p>in other words, it matches every&nbsp;<a href=""https://developer.mozilla.org/en-us/docs/web/html/element/a""><code>&lt;a&gt;</code></a>&nbsp;or&nbsp;<a href=""https://developer.mozilla.org/en-us/docs/web/html/element/area""><code>&lt;area&gt;</code></a> the element that has an&nbsp;<code><span style=""background-color: #ecf0f1;"">href</span></code>&nbsp;attribute. thus, it matches all elements that match&nbsp;<a href=""https://developer.mozilla.org/en-us/docs/web/css/:link""><code>:link</code></a>&nbsp;or&nbsp;<a href=""https://developer.mozilla.org/en-us/docs/web/css/:visited""><code>:visited</code></a>. take note because this means that visited links might also have the same styling.</p>
<pre class=""language-css""><code>a:any-link {
  color: forestgreen;
  text-decoration-color: hotpink;
}
/*you might need to style visited links */
a:visited {
  color: purple;
}</code></pre>
<h1>9: empty (:empty)</h1>
<p>in this blog, i have a section where i render the blog summary after the user generates the summary. however, i do not want to render the summary when it is empty. this is where css empty selector comes in handy and avoids the need to use javascript.</p>
<p>the&nbsp;<span style=""background-color: #ecf0f1;""><strong><code>:empty</code></strong></span>&nbsp;<a href=""https://developer.mozilla.org/en-us/docs/web/css"">css</a>&nbsp;<a href=""https://developer.mozilla.org/en-us/docs/web/css/pseudo-classes"">pseudo-class</a>&nbsp;represents any element that has no children. children can be either element nodes or text (including whitespace). comments, processing instructions, and css&nbsp;<span style=""background-color: #ecf0f1;""><a style=""background-color: #ecf0f1;"" href=""https://developer.mozilla.org/en-us/docs/web/css/content""><code>content</code></a></span> do not affect whether an element is considered empty.</p>
<pre class=""language-css""><code>.summary:empty {
  /* do not display it when it is empty */
  display: none;
}
/* do not confuse with blank */
.summary:blank {
  display: block;
}</code></pre>
<p>take note not to confuse empty with blank. the&nbsp;<span style=""background-color: #ecf0f1;""><code class="" prettyprinted""><span class=""pun"">:</span><span class=""pln"">blank</span></code></span>&nbsp;pseudo-class targets elements that have whitespace content, but no visible content. this means that an element containing only spaces, tabs, or line breaks is considered &ldquo;blank&rdquo; by the&nbsp;<code class="" prettyprinted""><span class=""pun"" style=""background-color: #ecf0f1;"">:</span><span class=""pln""><span style=""background-color: #ecf0f1;"">blank</span></span></code> pseudo-class, but an element containing visible content, even if it&rsquo;s just a single character, is not considered blank.</p>
<h2>10. inset&nbsp;</h2>
<p>the <code>inset</code> property is a shorthand in css that combines the <code>top</code>, <code>right</code>, <code>bottom</code>, and <code>left</code> properties. it is used to position an absolutely or relatively positioned element within its containing block. this&nbsp;<a href=""https://developer.mozilla.org/en-us/docs/glossary/inset_properties"">inset property</a> has no effect on non-positioned elements.</p>
<p>the <code>inset</code> property directly sets the distances from the edges of the element's containing block, effectively combining the functionality of the individual <code>top</code>, <code>right</code>, <code>bottom</code>, and <code>left</code> properties. you can also set <code>inset-inline</code>and&nbsp;<code>inset-block</code> based on your needs.</p>
<pre class=""language-css""><code>/* &lt;length&gt; values */
inset: 10px; /* value applied to all edges */
inset: 4px 8px; /* top/bottom left/right */
inset: 5px 15px 10px; /* top left/right bottom */
inset: 2.4em 3em 3em 3em; /* top right bottom left */
inset: calc(anchor(50%) + 10px) anchor(self-start) auto auto;
inset: auto auto anchor(center) anchor(self-end);
/* &lt;percentage&gt;s of the width (left/right) or height (top/bottom) of the containing block */
inset: 10% 5% 5% 5%;
/* keyword value */
inset: auto;
/* global values */
inset: inherit;
inset: initial;
inset: revert;
inset: revert-layer;
inset: unset;
</code></pre>
<h2>conclusion</h2>
<p>did you learn anything new about css today? comment below with your new best features that could help save you tonnes of hours in development.</p>",ten-useful-css-features-you-might-not-know-about,"css,csstricks,frontend,web-dev",published,0,942,http://res.cloudinary.com/dipkbpinx/image/upload/v1725020852/tech-tales/cover-images/fogx657fdedcnecfgkgi.png
5,role of ai in mass censorship,"<p>the rise of genai such as chatgpt and gemini has ushered in a new era in human revolution. this era has fairly been predicted as having catastrophic consequences for humanity. however, as people worry about ai enslaving us, they often overlook one major problem. mass censorship!</p>
<p>search engines like google and bing are integrating ai, promising a smoother, more relevant online experience. but who decides what's ""relevant""? the corporations behind these platforms have a troubling history of cooperating with governments to restrict information access.</p>
<p>take the example of the recent gemini catastrophe. the launch of gemini on feb 2024 served to prove this point. google took online to apologize after anti-woke heretics such as elon musk criticized gemini for generating mixed-race images of american founding fathers.</p>
<p>while this incident might seem isolated, it has proven that governments are more likely to weaponize ai for mass censorship.&nbsp; while ai is efficient, it could be used to filter search results based on undisclosed criteria to hide dissenting ideas.</p>
<p>while this might sound paranoid, these things are happening in nations such as china and south korea. conditions for internet users in these nations remain oppressive, with users facing criminal penalties for accessing or sharing certain information. this is a severe violation of freedom of speech.<img src=""https://res.cloudinary.com/dipkbpinx/image/upload/v1710036886/tech-tales/blog-images/lewc2unk4uwjzm7vrh2i.jpg"" alt=""gemini-censorship"" width=""778"" height=""654""></p>
<p>imagine what such governments could achieve with ai censorship. governments will not only be able to filter out information and spoon-feed the public but will have the right to decide what you see and hear.</p>
<p>therefore, as ai advances, we must demand transparency from search engines about how ai algorithms rank information. we need strong legal safeguards against government influence on online searches.<br>governments are currently rushing to regulate ai. however, such regulations only serve to empower government censorship capabilities. &nbsp;but as the integration of genai becomes ubiquitous in everyday technology it is not a given that search, word processing, and email will continue to allow humans to be fully in control.</p>
<p>the perspectives are frightening.</p>
<blockquote>
<p>imagine a world where your word processor prevents you from analyzing, criticizing, lauding, or reporting on a topic deemed &ldquo;harmful&rdquo; by an ai programmed to only process ideas that are &ldquo;respectful and appropriate for all.&rdquo; &nbsp;</p>
</blockquote>
<p>&nbsp;</p>",role-of-ai-in-mass-censorship,"ai,censorship,governments,airegulation",published,24,2269,http://res.cloudinary.com/dipkbpinx/image/upload/v1725021220/tech-tales/cover-images/pwwlfx1undckqmuhghhw.jpg
54,a beginner's guide to typescript for javascript developers,"<p>typescript has an unusual relationship with javascript. typescript offers all of javascript&rsquo;s features, and an additional layer on top of these: typescript&rsquo;s type system.</p>
<p>for example, javascript provides language primitives like&nbsp;<code>string</code>&nbsp;and&nbsp;<code>number</code>, but it doesn&rsquo;t check that you&rsquo;ve consistently assigned these. typescript does.</p>
<p>this means that your existing working javascript code is also typescript code. the main benefit of typescript is that it can highlight unexpected behavior in your code, lowering the chance of bugs.</p>
<p>this tutorial briefly overviews typescript, focusing on its type system.</p>
<div id=""toc"" class=""mce-toc"">
<h2>table of contents</h2>
<ol>
<li>1. <a href=""#prerequisites"">prerequisites</a>
<ol>
<li>1.1 <a href=""#resources:"">installing typescript</a></li>
<li>1.2 <a href=""#understanding-typescript-syntax"">understanding typescript syntax</a></li>
<li>1.3 <a href=""#types-by-inference"">types by inference</a></li>
<li>1.4 <a href=""#defining-types"">defining types</a></li>
<li>1.5 <a href=""#generics"">generics</a></li>
<li>1.6 <a href=""#enums"">enums</a></li>
<li>1.7 <a href=""#classes""><strong>classess</strong></a></li>
<li>1.8 <a href=""#html-types"">html types</a></li>
</ol>
</li>
<li>2. <a href=""#conclusion"">conclusion</a></li>
<li>3. <a href=""#resources"">resources</a></li>
</ol>
</div>
<h1 id=""resources:"">prerequisites</h1>
<p>you&rsquo;ll need a working understanding of javascript and nodejs installed.</p>
<h2 id=""html-types"">installing typescript</h2>
<p>before diving into typescript code, you'll need to install it. if you have node.js installed, you can install typescript globally via npm:</p>
<pre class=""language-typescript""><code>npm install -g typescript</code></pre>
<p>to compile typescript code, use the <code>tsc</code> command and create files as <code>.ts</code> extensions.</p>
<pre class=""language-typescript""><code>tsc filename.ts</code></pre>
<h2>understanding typescript syntax&nbsp;</h2>
<p>when i was initially trying out typescript due to the existing developer's hype and the fact that most tutorials i was looking at were in typescript, i was overwhelmed by the amount of errors it throws around. while typescript code is just like plain old javascript, it comes with type annotations that must be respected.</p>
<h2 id=""types-by-inference"">types by inference</h2>
<p>typescript knows the javascript language and will generate types for you in many cases. for example in creating a variable and assigning it to a particular value, typescript will use the value as its type.</p>
<pre class=""language-typescript""><code>let helloworld = ""hello world"";
// let helloworld: string</code></pre>
<h2>defining types</h2>
<p>you can use a wide variety of design patterns in javascript. however, some design patterns make it difficult for types to be inferred automatically (for example, patterns that use dynamic programming). to cover these cases, typescript supports an extension of the javascript language, which offers places for you to tell typescript what the types should be.</p>
<p>for example, to create an object with an inferred type which includes&nbsp;<code>name: string</code>&nbsp;and&nbsp;<code>id: number</code>, you can write:</p>
<pre class=""language-javascript""><code>const user = {
  name: ""hayes"",
  id: 0,
};</code></pre>
<p>typescript will help you catch development errors earlier on by preventing you from assigning wrong types to a value. for example, assigning a number to the user name variable.</p>
<p>you can explicitly describe this object&rsquo;s shape using an&nbsp;<code>interface</code>&nbsp;declaration:</p>
<div class=""line"">
<pre class=""language-javascript""><code>interface user {
  name: string;
  id: number;
}</code></pre>
</div>
<p>you can then declare that a javascript object conforms to the shape of your new&nbsp;<code>interface</code>&nbsp;by using syntax like&nbsp;<code>: typename</code> after a variable declaration:</p>
<pre class=""language-javascript""><code>const user: user = {
  name: ""hayes"",
  id: 0,
};</code></pre>
<p>if you provide an object that doesn&rsquo;t match the interface you have provided, typescript will warn you:</p>
<pre class=""language-javascript""><code>interface user {
  name: string;
  id: number;
}
 
const user: user = {
  username: ""hayes"",
| object literal may only specify known properties, 
and 'username' does not exist in type 'user'.
  id: 0,
};</code></pre>
<p>types can also be passed to function props using interface or type declarations to ensure a function always receives the right data types.</p>
<pre class=""language-javascript""><code>function add(a: number, b: number): number {
  return a + b;
}</code></pre>
<p><strong>but hold on, what are interfaces and types?</strong></p>
<p>in typescript, you can use interfaces and types to define the structure objects, which makes the code easier to maintain.</p>
<pre class=""language-javascript""><code>const car: { type: string, model: string, year: number } = {
  type: ""toyota"",
  model: ""corolla"",
  year: 2009
};
//you can use type to structure the data
type car = {
  type: string;
  model: string;
  year: number;
};
</code></pre>
<p>defining types makes it easier to export and reuse a common datatype. while interface and types might look similar, typescript interface can be extended and merged. if you declare the same interface multiple times, typescript will merge them into one. this enhances inheritance and helps us maintain the dry principle.</p>
<pre class=""language-javascript""><code>interface user {
  firstname: string;
  lastname: string;
  email: string;
}

interface staffuser extends user {
  roles: string[];
  department: string;
}</code></pre>
<p>on the other hand, types ccn defines any kind of type, not just object shapes. you can use <code>type</code> it to define unions, primitives, tuples, function signatures, etc. it&rsquo;s more versatile in comparison to <code>interface</code>.</p>
<pre class=""language-javascript""><code>//union types
type windowstates = ""open"" | ""closed"" | ""minimized"";
type lockstates = ""locked"" | ""unlocked"";

function getlength(obj: string | string[]) {
  return obj.length;
}</code></pre>
<h2>generics</h2>
<p>generics provide variables to types. a common example is an array. an array without generics could contain anything. an array with generics can describe the values that the array contains.</p>
<pre class=""language-typescript""><code>type stringarray = array&lt;string&gt;;
//this array can only contain string values
type numberarray = array&lt;number&gt;;
type objectwithnamearray = array&lt;{ name: string }&gt;;</code></pre>
<h2>enums</h2>
<p>an&nbsp;<strong>enum</strong>&nbsp;is a special ""class"" that represents a group of constants (unchangeable variables).</p>
<p>enums come in two flavors&nbsp;<code class=""w3-codespan"">string</code>&nbsp;and&nbsp;<code class=""w3-codespan"">numeric</code>. numeric enums start at zero and autoincrement, although users can assign them values. i have found enums very useful when setting the database to restrict the available options.</p>
<p><em>for example:</em></p>
<pre class=""language-typescript""><code>enum cardinaldirections {
  north,
  east,
  south,
  west
}</code></pre>
<p>this enum ensures that a user cannot create a cardinaldirection that is not north, east, south, or west since the datatype will be invalid. enums allow a developer to define a set of named constants. using enums can make it easier to document intent, or create a set of distinct cases.</p>
<h2><strong>classess</strong></h2>
<p>typescript enhances classes by adding optional types and more powerful inheritance. this ensures that each new instance of the class adheres to the type definitions.</p>
<p><em>for example</em></p>
<pre class=""language-javascript""><code>class animal {
  name: string;
  constructor(name: string) {
    this.name = name;
  }
  makesound(): void {
    console.log(`${this.name} makes a sound.`);
  }
}
class dog extends animal {
  constructor(name: string) {
    super(name);
  }
  makesound(): void {
    console.log(`${this.name} barks.`);
  }
}
let dog = new dog('rex');
dog.makesound(); // rex barks.
</code></pre>
<h2>html types</h2>
<p>one of the major challenges that you will face with typescript is html types, which are often unknown to you. for example, passing <code>event</code> to a <code>handleformsubmit</code> function will often return an error if you do not specify the type of the event as <code>submitevent</code>.&nbsp;</p>
<p><code>htmlelement</code> is the base interface for all html elements. it contains common properties and methods shared by most html elements, such as <code>id</code>, <code>classname</code>, <code>innerhtml</code>, and more.</p>
<p><em>for example</em></p>
<pre class=""language-javascript""><code>let element: htmlelement = document.getelementbyid('myelement')!;
element.innerhtml = ""hello, world!"";</code></pre>
<h4>common specific element types:</h4>
<ul>
<li><strong><code>htmldivelement</code></strong>: represents an <code>&lt;div&gt;</code> element.</li>
<li><strong><code>htmlinputelement</code></strong>: represents an <code>&lt;input&gt;</code> element (text fields, checkboxes, etc.).</li>
<li><strong><code>htmlbuttonelement</code></strong>: represents an <code>&lt;button&gt;</code> element.</li>
<li><strong><code>htmlformelement</code></strong>: represents an <code>&lt;form&gt;</code> element.</li>
<li><strong><code>htmlanchorelement</code></strong>: represents an <code>&lt;a&gt;</code> (anchor) element.</li>
<li><strong><code>htmlimageelement</code></strong>: represents an <code>&lt;img&gt;</code> element.</li>
</ul>
<p>luckily, if you use frameworks such as react, you can import the types or they are auto-inferred for you. this will help ensure typescript does not scream at you pretending not to know what an <code>onchange</code> event on a form input is.</p>
<h1 id=""conclusion"">conclusion</h1>
<p>for developers coming from a javascript background, typescript can feel both familiar and foreign. it brings a lot of benefits to the table, particularly in large, complex applications where maintainability and catching bugs early are critical.</p>
<p>that said, it also introduces complexity and might not be necessary for smaller projects. the best way to decide if typescript is right for you is to try it out&mdash;start small, see how it fits into your workflow, and evolve from there.</p>
<h1>resources:</h1>
<ol>
<li><a title=""cheat sheets"" href=""https://www.typescriptlang.org/cheatsheets"" target=""_blank"" rel=""noopener"">typescript cheatsheet</a>&nbsp;</li>
<li><a title=""typescript docs"" href=""https://www.typescriptlang.org/docs/handbook/typescript-in-5-minutes.html"" target=""_blank"" rel=""noopener"">typesciript documentation and playground</a></li>
<li><a href=""https://www.totaltypescript.com/tutorials/beginners-typescript"">https://www.totaltypescript.com/tutorials/beginners-typescript</a></li>
<li><a title=""typescript dom manipulation and html types"" href=""https://www.typescriptlang.org/docs/handbook/dom-manipulation.html"" target=""_blank"" rel=""noopener"">typescript dom manipulation and html types</a></li>
</ol>",a-beginner-s-guide-to-typescript-for-javascript-developers,"typescript,javascript,beginner,programming
",published,2,907,http://res.cloudinary.com/dipkbpinx/image/upload/v1726955465/tech-tales/cover-images/wdqsdvhnruf3dt5cqwtt.png
62,free resources for web developers,"<p>the web is full of fantastic, free tools that can supercharge your development journey. whether you need learning platforms, hosting, or design assets, here's a comprehensive guide to help you build, design, and deploy better projects.</p>
<hr>
<h3><a href=""https://dev.to/safdarali/100-free-resources-every-web-developer-must-try-21p5#table-of-contents"" name=""table-of-contents""></a>📑&nbsp;<strong>table of contents</strong></h3>
<table style=""border-collapse: collapse; border: 1px solid black;"">
<thead>
<tr>
<th style=""border: 1px solid black;"">category</th>
<th style=""border: 1px solid black;"">description</th>
</tr>
</thead>
<tbody>
<tr>
<td style=""border: 1px solid black;""><a href=""https://dev.to/safdarali/100-free-resources-every-web-developer-must-try-21p5#free-learning-resources"">learning resources</a></td>
<td style=""border: 1px solid black;"">tutorials and courses for learning web development basics and beyond.</td>
</tr>
<tr>
<td style=""border: 1px solid black;""><a href=""https://dev.to/safdarali/100-free-resources-every-web-developer-must-try-21p5#free-hosting-platforms"">hosting platforms</a></td>
<td style=""border: 1px solid black;"">hosting services for deploying websites and apps.</td>
</tr>
<tr>
<td style=""border: 1px solid black;""><a href=""https://dev.to/safdarali/100-free-resources-every-web-developer-must-try-21p5#free-apis"">apis</a></td>
<td style=""border: 1px solid black;"">free apis to integrate real-world data into your projects.</td>
</tr>
<tr>
<td style=""border: 1px solid black;""><a href=""https://dev.to/safdarali/100-free-resources-every-web-developer-must-try-21p5#free-vectors-images"">vectors &amp; images</a></td>
<td style=""border: 1px solid black;"">sites for high-quality images, vectors, and illustrations.</td>
</tr>
<tr>
<td style=""border: 1px solid black;""><a href=""https://dev.to/safdarali/100-free-resources-every-web-developer-must-try-21p5#free-icons"">icons</a></td>
<td style=""border: 1px solid black;"">libraries of icons to enhance ui/ux.</td>
</tr>
<tr>
<td style=""border: 1px solid black;""><a href=""https://dev.to/safdarali/100-free-resources-every-web-developer-must-try-21p5#free-fonts"">fonts</a></td>
<td style=""border: 1px solid black;"">resources for quality, free fonts to improve typography.</td>
</tr>
<tr>
<td style=""border: 1px solid black;""><a href=""https://dev.to/safdarali/100-free-resources-every-web-developer-must-try-21p5#free-color-resources"">color resources</a></td>
<td style=""border: 1px solid black;"">tools for generating and exploring color schemes.</td>
</tr>
<tr>
<td style=""border: 1px solid black;""><a href=""https://dev.to/safdarali/100-free-resources-every-web-developer-must-try-21p5#free-cheat-sheets"">cheat sheets</a></td>
<td style=""border: 1px solid black;"">quick reference sheets for html, css, javascript, and more.</td>
</tr>
<tr>
<td style=""border: 1px solid black;""><a href=""https://dev.to/safdarali/100-free-resources-every-web-developer-must-try-21p5#free-html-css-templates"">html/css templates</a></td>
<td style=""border: 1px solid black;"">ready-made templates to jumpstart your project&rsquo;s design.</td>
</tr>
<tr>
<td style=""border: 1px solid black;""><a href=""https://dev.to/safdarali/100-free-resources-every-web-developer-must-try-21p5#learn-css-by-playing-games"">css games</a></td>
<td style=""border: 1px solid black;"">games to make learning css fun and interactive.</td>
</tr>
<tr>
<td style=""border: 1px solid black;""><a href=""https://dev.to/safdarali/100-free-resources-every-web-developer-must-try-21p5#free-code-editors"">code editors</a></td>
<td style=""border: 1px solid black;"">popular code editors to write and edit code efficiently.</td>
</tr>
<tr>
<td style=""border: 1px solid black;""><a href=""https://dev.to/safdarali/100-free-resources-every-web-developer-must-try-21p5#free-javascript-animation-libraries"">javascript animation libraries</a></td>
<td style=""border: 1px solid black;"">libraries for adding animations and interactivity to your site.</td>
</tr>
</tbody>
</table>
<hr>
<h3><a href=""https://dev.to/safdarali/100-free-resources-every-web-developer-must-try-21p5#detailed-overview"" name=""detailed-overview""></a>🚀&nbsp;<strong>detailed overview</strong></h3>
<hr>
<h4><a href=""https://dev.to/safdarali/100-free-resources-every-web-developer-must-try-21p5#free-learning-resources"" name=""free-learning-resources""></a>🧑&zwj;🏫&nbsp;<strong>free learning resources</strong></h4>
<p><strong>websites</strong></p>
<ul>
<li><strong><a href=""https://www.freecodecamp.org/"" target=""_blank"" rel=""noopener noreferrer"">freecodecamp</a></strong>&nbsp;&ndash; coding tutorials, lessons, and certifications.</li>
<li><strong><a href=""https://developer.mozilla.org/"" target=""_blank"" rel=""noopener noreferrer"">mdn web docs</a></strong>&nbsp;&ndash; comprehensive web development documentation.</li>
<li><strong><a href=""https://www.w3schools.com/"" target=""_blank"" rel=""noopener noreferrer"">w3schools</a></strong>&nbsp;&ndash; beginner-friendly tutorials.</li>
<li><strong><a href=""https://scrimba.com/"" target=""_blank"" rel=""noopener noreferrer"">scrimba</a></strong>&nbsp;&ndash; interactive video tutorials.</li>
<li><strong><a href=""https://www.codecademy.com/"" target=""_blank"" rel=""noopener noreferrer"">codecademy</a></strong>&nbsp;&ndash; learn coding online with guided lessons.</li>
<li><strong><a href=""https://www.theodinproject.com/"" target=""_blank"" rel=""noopener noreferrer"">the odin project</a></strong>&nbsp;&ndash; full-stack javascript curriculum.</li>
</ul>
<hr>
<h4><a href=""https://dev.to/safdarali/100-free-resources-every-web-developer-must-try-21p5#free-hosting-platforms"" name=""free-hosting-platforms""></a>🌐&nbsp;<strong>free hosting platforms</strong></h4>
<ul>
<li><strong><a href=""https://www.netlify.com/"" target=""_blank"" rel=""noopener noreferrer"">netlify</a></strong>&nbsp;&ndash; for static sites with easy deployment.</li>
<li><strong><a href=""https://render.com/"" target=""_blank"" rel=""noopener noreferrer"">render</a></strong>&nbsp;&ndash; zero-downtime web hosting.</li>
<li><strong><a href=""https://pages.github.com/"" target=""_blank"" rel=""noopener noreferrer"">github pages</a></strong>&nbsp;&ndash; static site hosting from github repos.</li>
<li><strong><a href=""https://firebase.google.com/products/hosting"" target=""_blank"" rel=""noopener noreferrer"">firebase hosting</a></strong>&nbsp;&ndash; reliable hosting with a cdn.</li>
<li><strong><a href=""https://vercel.com"" target=""_blank"" rel=""noopener"">vercel</a></strong> - reliable hosting with serverless functions and automatic deployments.</li>
</ul>
<hr>
<h4><a href=""https://dev.to/safdarali/100-free-resources-every-web-developer-must-try-21p5#free-apis"" name=""free-apis""></a>📡&nbsp;<strong>free apis</strong></h4>
<ul>
<li><strong><a href=""https://openweathermap.org/api"" target=""_blank"" rel=""noopener noreferrer"">openweathermap api</a></strong>&nbsp;&ndash; real-time weather data.</li>
<li><strong><a href=""https://newsapi.org/"" target=""_blank"" rel=""noopener noreferrer"">news api</a></strong>&nbsp;&ndash; access to live news articles.</li>
<li><strong><a href=""https://pokeapi.co/"" target=""_blank"" rel=""noopener noreferrer"">pokeapi</a></strong>&nbsp;&ndash; data for all pok&eacute;mon.</li>
<li><strong><a href=""https://api.nasa.gov/"" target=""_blank"" rel=""noopener noreferrer"">nasa api</a></strong>&nbsp;&ndash; astronomy data from nasa.</li>
<li><strong><a href=""https://jsonplaceholder.typicode.com"" target=""_blank"" rel=""noopener"">{json} placeholder</a></strong> &ndash; fake data for posts, users, photos, albums etc.</li>
</ul>
<hr>
<h4><a href=""https://dev.to/safdarali/100-free-resources-every-web-developer-must-try-21p5#free-vectors-amp-images"" name=""free-vectors-amp-images""></a>🖼️&nbsp;<strong>free vectors &amp; images</strong></h4>
<ul>
<li><strong><a href=""https://www.freepik.com/"" target=""_blank"" rel=""noopener noreferrer"">freepik</a></strong>&nbsp;&ndash; vectors, photos, and psds.</li>
<li><strong><a href=""https://unsplash.com/"" target=""_blank"" rel=""noopener noreferrer"">unsplash</a></strong>&nbsp;&ndash; high-res images.</li>
<li><strong><a href=""https://www.flaticon.com/"" target=""_blank"" rel=""noopener noreferrer"">flaticon</a></strong>&nbsp;&ndash; icons in multiple formats.</li>
</ul>
<hr>
<h4><a href=""https://dev.to/safdarali/100-free-resources-every-web-developer-must-try-21p5#free-icons"" name=""free-icons""></a>🖌️&nbsp;<strong>free icons</strong></h4>
<ul>
<li><strong><a href=""https://fontawesome.com/"" target=""_blank"" rel=""noopener noreferrer"">fontawesome</a></strong>&nbsp;&ndash; extensive icon library.</li>
<li><strong><a href=""https://material.io/resources/icons/"" target=""_blank"" rel=""noopener noreferrer"">material icons</a></strong>&nbsp;&ndash; google&rsquo;s material design icons.</li>
<li><a href=""https://lucide.dev/icons"" target=""_blank"" rel=""noopener""><strong>lucide icons</strong></a> &ndash; free svgs and icon library.</li>
<li><a href=""https://reactsvgicons.com"" target=""_blank"" rel=""noopener""><strong>react svg icons</strong></a> &ndash; get react svg icons which are typescript compliant without installing any library.</li>
<li><strong><a href=""https://www.svgrepo.com"" target=""_blank"" rel=""noopener"">svg repo</a></strong> &ndash; free svgs, illustrations and vectors.&nbsp;</li>
</ul>
<hr>
<h4><a href=""https://dev.to/safdarali/100-free-resources-every-web-developer-must-try-21p5#free-fonts"" name=""free-fonts""></a>✏️&nbsp;<strong>free fonts</strong></h4>
<ul>
<li><strong><a href=""https://fonts.google.com/"" target=""_blank"" rel=""noopener noreferrer"">google fonts</a></strong>&nbsp;&ndash; free web fonts.</li>
<li><strong><a href=""https://www.fontsquirrel.com/"" target=""_blank"" rel=""noopener noreferrer"">fontsquirrel</a></strong>&nbsp;&ndash; hand-picked, quality fonts.</li>
</ul>
<hr>
<h4><a href=""https://dev.to/safdarali/100-free-resources-every-web-developer-must-try-21p5#free-color-resources"" name=""free-color-resources""></a>🎨&nbsp;<strong>free color resources</strong></h4>
<ul>
<li><strong><a href=""https://coolors.co/"" target=""_blank"" rel=""noopener noreferrer"">colors</a></strong>&nbsp;&ndash; color scheme generator.</li>
<li><strong><a href=""https://colorhunt.co/"" target=""_blank"" rel=""noopener noreferrer"">color hunt</a></strong>&nbsp;&ndash; curated color palettes.</li>
</ul>
<hr>
<h4><a href=""https://dev.to/safdarali/100-free-resources-every-web-developer-must-try-21p5#free-cheat-sheets"" name=""free-cheat-sheets""></a>📋&nbsp;<strong>free cheat sheets</strong></h4>
<ul>
<li><strong><a href=""https://htmlcheatsheet.com/"" target=""_blank"" rel=""noopener noreferrer"">html cheat sheet</a></strong>&nbsp;&ndash; html tags and attributes.</li>
<li><strong><a href=""https://css-tricks.com/snippets/css/"" target=""_blank"" rel=""noopener noreferrer"">css cheat sheet</a></strong>&nbsp;&ndash; css properties and selectors.</li>
<li><a href=""-the-ultimate-git-cheat-sheet-"" target=""_blank"" rel=""noopener""><strong>git cheat sheet</strong></a> &ndash; all git commands.</li>
</ul>
<hr>
<h4><a href=""https://dev.to/safdarali/100-free-resources-every-web-developer-must-try-21p5#free-htmlcss-templates"" name=""free-htmlcss-templates""></a>🖼️&nbsp;<strong>free html/css templates</strong></h4>
<ul>
<li><strong><a href=""https://html5up.net/"" target=""_blank"" rel=""noopener noreferrer"">html5up</a></strong>&nbsp;&ndash; responsive html5 templates.</li>
<li><strong><a href=""https://bootstrapmade.com/"" target=""_blank"" rel=""noopener noreferrer"">bootstrapmade</a></strong>&nbsp;&ndash; bootstrap themes and templates.</li>
</ul>
<hr>
<h4><a href=""https://dev.to/safdarali/100-free-resources-every-web-developer-must-try-21p5#learn-css-by-playing-games"" name=""learn-css-by-playing-games""></a>🕹️&nbsp;<strong>learn css by playing games</strong></h4>
<ul>
<li><strong><a href=""https://flukeout.github.io/"" target=""_blank"" rel=""noopener noreferrer"">css diner</a></strong>&nbsp;&ndash; practice css selectors.</li>
<li><strong><a href=""https://flexboxfroggy.com/"" target=""_blank"" rel=""noopener noreferrer"">flexbox froggy</a></strong>&nbsp;&ndash; learn flexbox.</li>
</ul>
<hr>
<h4><a href=""https://dev.to/safdarali/100-free-resources-every-web-developer-must-try-21p5#free-code-editors"" name=""free-code-editors""></a>🖥️&nbsp;<strong>free code editors</strong></h4>
<ul>
<li><strong><a href=""https://code.visualstudio.com/"" target=""_blank"" rel=""noopener noreferrer"">visual studio code</a></strong>&nbsp;&ndash; highly extensible, industry-standard editor.</li>
<li><strong><a href=""https://www.sublimetext.com/"" target=""_blank"" rel=""noopener noreferrer"">sublime text</a></strong>&nbsp;&ndash; lightweight and powerful.</li>
</ul>
<hr>
<h4><a href=""https://dev.to/safdarali/100-free-resources-every-web-developer-must-try-21p5#javascript-animation-libraries"" name=""javascript-animation-libraries""></a>🕹️&nbsp;<strong>javascript animation libraries</strong></h4>
<ul>
<li><strong><a href=""https://animejs.com/"" target=""_blank"" rel=""noopener noreferrer"">anime.js</a></strong>&nbsp;&ndash; simple animations for css and svg.</li>
<li><strong><a href=""https://scrollrevealjs.org/"" target=""_blank"" rel=""noopener noreferrer"">scrollreveal.js</a></strong>&nbsp;&ndash; reveal elements on scroll.</li>
</ul>
<hr>
<h3><a href=""https://dev.to/safdarali/100-free-resources-every-web-developer-must-try-21p5#conclusion"" name=""conclusion""></a><strong>conclusion</strong></h3>
<p>these free resources cover every corner of web development, from learning and coding to designing and deploying. with these tools, you can build better, more dynamic projects and expand your skills, all without breaking the bank.</p>",free-resources-for-web-developers,"webdev,beginners,resources,javascript",published,0,218,http://res.cloudinary.com/dipkbpinx/image/upload/v1730210979/tech-tales/cover-images/hvy8i7g6srrqwkt6pnzd.jpg
18,my experience with prisma so far and why i am considering switching to drizzle,"<p><span style=""font-family: georgia, palatino, serif;"">i recently switched to using prisma orm for the backend of my blog. this decision came after encountering difficulties hosting my ruby on rails api for free. most hosting platforms, including my favorite railway, require a monthly payment, which exceeds my current budget. here is my experience with prisma so far.</span></p>
<h2><span style=""font-family: georgia, palatino, serif;"">about prisma</span></h2>
<p id=""d4c3"" class=""pw-post-body-paragraph mv mw gt mx b my mz na nb nc nd ne nf ng nh ni nj nk nl nm nn no np nq nr ns gm bj"" data-selectable-paragraph=""""><span style=""font-family: georgia, palatino, serif;"">prisma is a&nbsp;<strong class=""mx gu"">next-generation orm</strong>&nbsp;that makes working with databases easy for application developers.</span></p>
<ul class="""">
<li id=""1174"" class=""mv mw gt mx b my mz na nb nc nd ne nf ng nh ni nj nk nl nm nn no np nq nr ns oh oi oj bj"" style=""font-family: georgia, palatino, serif;"" data-selectable-paragraph=""""><span style=""font-family: georgia, palatino, serif;"">object-relational mapper</span></li>
<li id=""0e0f"" class=""mv mw gt mx b my ok na nb nc ol ne nf ng om ni nj nk on nm nn no oo nq nr ns oh oi oj bj"" style=""font-family: georgia, palatino, serif;"" data-selectable-paragraph=""""><span style=""font-family: georgia, palatino, serif;"">a way to interact with our database</span></li>
<li id=""cf36"" class=""mv mw gt mx b my ok na nb nc ol ne nf ng om ni nj nk on nm nn no oo nq nr ns oh oi oj bj"" style=""font-family: georgia, palatino, serif;"" data-selectable-paragraph=""""><span style=""font-family: georgia, palatino, serif;"">completely type safe</span></li>
</ul>
<p><span style=""font-family: georgia, palatino, serif;"">prisma is super easy to work with, and i was able to switch my whole database in just 4 days. the prisma schema makes it super easy to declare relationships between models, and with prisma seeding feature also makes it easy to populate the database with existing data.</span></p>
<p><span style=""font-family: georgia, palatino, serif;"">here is a sample prisma schema</span></p>
<p><span style=""font-family: georgia, palatino, serif;""><img src=""https://miro.medium.com/v2/resize:fit:1100/format:webp/1*ja2gaxqskzy-0rt4p40w6w.png"" alt=""sample-prisma-schema"" width=""1100"" height=""1146""></span></p>
<p><span style=""font-family: georgia, palatino, serif;"">however, i initially struggled with the seeding process and i had to create data manually via api routes. together with nextjs api routes, prisma is super fun to work with. one major benefit of nextjs is that expensive queries can be cached so that refreshing the route does not re-fetch the data from the database.</span><br><span style=""font-family: georgia, palatino, serif;"">another super cool feature of prisma is the prisma studio. this opens up a new tab where users can easily visualize data and even manage the data, such as creating new records, updating existing data, and deleting records. individuals can access prisma studio by running.</span></p>
<pre class=""language-javascript""><code>npx prisma studio</code></pre>
<h1><span style=""font-family: georgia, palatino, serif;""><img style=""border-style: solid; border-width: 2px;"" src=""https://www.prisma.io/blog/posts/studio-tabs.png"" alt=""prisma-studio"" width=""1280"" height=""908""></span></h1>
<h1><span style=""font-family: georgia, palatino, serif;"">challenges</span></h1>
<p><span style=""font-family: georgia, palatino, serif;"">immediately after switching to prisma, i realized my server was taking too long to respond. a single login request, which often took 700ms to complete, took over 10s. this delay is significant and could affect user performance.&nbsp;</span></p>
<blockquote>
<p><span style=""font-family: georgia, palatino, serif;"">requests made with prisma were ten times slower than normal!</span></p>
</blockquote>
<p><span style=""font-family: georgia, palatino, serif;"">i looked around to try and understand why this was happening or some errors that i could be making. prisma documentation suggests indexing frequently queried columns such as username and email by adding<span style=""text-decoration: underline;""> </span><span style=""background-color: rgb(22, 145, 121); color: rgb(236, 240, 241);"">@@index([username, email]).</span></span></p>
<p><span style=""font-family: georgia, palatino, serif;""><img src=""https://opengraph.githubassets.com/9fc8d516c1c82f4487d05d149fe0e98ac82e79ab2f43d14f40fbe99f96f28710/prisma/prisma/issues/11130"" alt=""query is 5 times slower when using &#96;findmany&#96; compared to running identical  query via &#96;queryraw&#96; &middot; issue #11130 &middot; prisma/prisma &middot; github""></span></p>
<p><span style=""font-family: georgia, palatino, serif;"">however, this does not solve the issue. prisma is too slow, especially in queries that involve selecting data from more than one table.</span></p>
<p><span style=""font-family: georgia, palatino, serif;"">the database also has a cold start, which means that after the prisma client disconnects, new requests will take time.</span></p>
<p><span style=""font-family: georgia, palatino, serif;"">prisma is also not designed to run on the edge, where vercel hosts their serveless functions. this implies that the servers are not up and running all the time in a serverless environment, thus the cold starts before vercel spins the function and awakens the database.</span></p>
<h2><span style=""font-family: georgia, palatino, serif;"">here is what i have realized so far:</span></h2>
<ul>
<li style=""font-family: georgia, palatino, serif;""><span style=""font-family: georgia, palatino, serif;"">prisma is not suited to run on the edge and thus the database sleeps when the prisma client disconnects. prisma takes time to connect again.</span></li>
<li style=""font-family: georgia, palatino, serif;""><span style=""font-family: georgia, palatino, serif;"">every new insert via prisma opened a database-level transaction (?). an extremely weird design choice by prisma. this makes you exhaust your connection pool very fast.</span></li>
<li style=""font-family: georgia, palatino, serif;""><span style=""font-family: georgia, palatino, serif;""><strong>there is no concept of sql-level joins in prisma</strong>. this means for every transaction that requires join, prisma fetches both tables, merges the data, and returns it to the user. this makes the findmany query take too long.</span></li>
<li style=""font-family: georgia, palatino, serif;""><span style=""font-family: georgia, palatino, serif;"">prisma is fixing the sql-level joins with a new feature called relation joins. however, this is still a preview feature. users can enable this by adding this to their schema:<span class=""token plain""> preview features&nbsp;</span><span class=""token operator"">=</span> <span class=""token punctuation"">[</span><span class=""token string"">""relationjoins""</span><span class=""token punctuation"">]&nbsp;</span></span></li>
<li style=""font-family: georgia, palatino, serif;""><span style=""font-family: georgia, palatino, serif;"">on every insert, prisma opens a transaction where it inserts and then returns the inserted record too, even if we do not want it.</span></li>
<li style=""font-family: georgia, palatino, serif;""><span style=""font-family: georgia, palatino, serif;"">for every action (create, read, update, and delete) prisma returns the object by default even if you do not want it. even for delete!</span></li>
<li style=""font-family: georgia, palatino, serif;""><span style=""font-family: georgia, palatino, serif;"">prisma supports jsonb datatypes in postgresql and mysql. however, there is no way to update such data type. the existing way is to fetch the whole object, spread it, and then add or delete data, then post the same object again. this is utterly ridiculous.</span></li>
<li style=""font-family: georgia, palatino, serif;""><span style=""font-family: georgia, palatino, serif;"">prisma has no way of hiding sensitive data, such as not returning password fields when you fetch a user object.&nbsp;</span></li>
</ul>
<p><span style=""font-family: georgia, palatino, serif;"">i have heard good things about some other orms such as drizzle and kysely, although they are not as easy to work with as prisma. however, i will consider interacting with them first before making a concrete decision.</span></p>
<h2><span style=""font-family: georgia, palatino, serif;"">update:</span></h2>
<p><span style=""font-family: georgia, palatino, serif;"">i switched to prisma accelerate and now prisma is very fast with queries although it does not beat active-record.</span></p>
<p><span style=""font-family: georgia, palatino, serif;"">maybe prisma is intentionally slow so individuals can switch to the paid plan on prisma accelerate! however, i do agree that simplicity can make you get hooked.</span></p>",my-experience-with-prisma-so-far-and-why-i-am-considering-switching-to-drizzle-,"prisma,postgresql,backend,server",published,14,2080,http://res.cloudinary.com/dipkbpinx/image/upload/v1725019721/tech-tales/cover-images/hjfhffzvnmpdcvyqbph1.png
41,is nextjs better than react? here is a comparison between the two,"<p>as a react dev, i tried my hands on nextjs and never turned back. what drew me to the platform is the server rendering and easier routing. the two frameworks go toe-to-toe, with nextjs being an advanced version of react. the debate between next.js vs react has been around for a while.</p>
<p>comparing next.js vs react, next.js is a react framework, on the other hand, react is just a javascript library. this blog helps settle the debate by comparing the two frameworks from toe to toe.</p>
<h1 style=""text-align: center;""><span style=""text-decoration: underline;"">⚛react</span></h1>
<p>react is one of the most well-known javascript libraries for building frontend applications. founded by facebook in may 2013, the library offers various useful tools to enclose routing and state management patterns alongside redux and other libraries.</p>
<p>the library allows users to build user interfaces or reusable&nbsp;<code> components.</code> due to its big community, react also includes other ui libraries that streamline the developer experience by allowing individuals to download ready-to-use components. react also includes <code>hooks</code>, <code>apis</code> and <code>server apis</code>.</p>
<h2>what is react used for?</h2>
<ul>
<li>social media platforms (facebook, instagram, pinterest, twitter)</li>
<li>economy platforms (airbnb, lyft, uber)</li>
<li>media platform (yahoo!)</li>
<li>online video streaming platforms (netflix)</li>
<li>saas tools (sendgrid, asana, invisionapp, zapier)</li>
</ul>
<h2>getting started with react</h2>
<p>react npm package can be installed directly via the command terminal using npx. however, react create-app is outdated as other builders such as vite provide a faster build time.</p>
<pre class=""language-javascript""><code>npx create-react-app my-react-app
cd my-react-app
//start the server 
npm start</code></pre>
<h2>here is a sample react code:</h2>
<pre class=""language-javascript""><code>import react from 'react';
import reactdom from 'react-dom/client';
function hello(props) {
  return &lt;h1&gt;hello world!&lt;/h1&gt;;
}
const container = document.getelementbyid(""root"");
const root = reactdom.createroot(container);
root.render(&lt;hello /&gt;)</code></pre>
<h2>key features of react</h2>
<ul>
<li>jsx(javascript syntax extension) or xml&nbsp;</li>
<li>virtual dom&nbsp;</li>
<li>one-way data binding&nbsp;</li>
<li>component-based architecture</li>
<li>hooks</li>
</ul>
<h2><em>advantages of react</em></h2>
<p><strong>✅ease of development</strong>: javascript familiarity allows for creating dynamic apps with less code.</p>
<p><strong>✅vast developer community</strong>: react has a huge developers community. hence, they provide support and resources for learning in a quick time.</p>
<p><strong>✅reusable components</strong>: react components are reusable. these allow you to load many pages recurringly while keeping their characteristics. the changes will be seen across all pages after modifying the component code.. users can also download npm packages for existing components.</p>
<p><strong>✅customization</strong>: extensible with tools like redux for state management.</p>
<h2><em>disadvantages of react</em></h2>
<p><strong>❌starting point</strong>: react is just a ui library, so it requires additional tools and setup to unlock its full potential.</p>
<p><strong>❌outdated documentation</strong>: react&rsquo;s rapid evolution means that its documentation can quickly become outdated, requiring developers to frequently relearn aspects of the library.</p>
<hr>
<h1 style=""text-align: center;""><span style=""text-decoration: underline;"">nextjs</span></h1>
<p>nextjs is a popular react framework developed and maintained by vercel. it&rsquo;s developed on node.js and babel. apart from that, next.js provides static export and pre-rendering, as well as a variety of other useful features such as automatic building size optimization, faster developer compilation, and a preview mode.</p>
<h2>what is nextjs used for?</h2>
<ul>
<li>ecommerce websites (nike, stripe, under armor, lg, target)</li>
<li>marketing and news websites (washington post, realtor, at&amp;t, tencent news)</li>
<li>streaming websites (spotify, netflix, sonos, hulu, tiktok, hbo max)</li>
<li>ai chatbots (openai chatgpt, vercel, runway, perplexity)</li>
</ul>
<h2>getting started with nextjs</h2>
<p>nextjs is part of react and thus using the framework requires also using react and react-dom. other features such as typescript and tailwind css are also added into the framework, although users can opt-out.</p>
<pre class=""language-javascript""><code>//automatic installation
npm create-next-app@latest
//manual installation
npm install next@latest react@latest react-dom@latest
//start the server
npm run dev</code></pre>
<p>in nextjs 13, the app is rendered in an app folder inside a root layout, which controls all the pages.</p>
<pre class=""language-javascript""><code>export default function rootlayout({
  children,
}: {
  children: react.reactnode
}) {
  return (
    &lt;html lang=""en""&gt;
      &lt;body&gt;{children}&lt;/body&gt;
    &lt;/html&gt;
  )
}</code></pre>
<h2>key features of nextjs</h2>
<p>here are the features you can leverage to create ready-to-go applications by using next.js:</p>
<ul>
<li>server-side rendering (ssr)</li>
<li>static export (ssg)</li>
<li>pre-rendering</li>
<li>automatic build size optimization</li>
<li>enhanced development compilation</li>
</ul>
<h2><em>advantages of nextjs</em></h2>
<p><strong>✅faster development</strong>: next.js offers many built-in components, libraries, and compatibility, allowing for quick mvp development, and enabling faster user feedback and iteration.</p>
<p><strong>✅enhanced user experience</strong>: next.js allows for highly customizable front-end development that aligns with business goals, providing a unique user experience.</p>
<p><strong>✅seo-friendly</strong>: the ability to develop faster and lighter static websites makes next.js seo-friendly, increasing the chances of ranking higher on search engines.</p>
<p><strong>✅super fast rendering</strong>: changes can be seen in real-time as the website reloads, making it easy to track updates.</p>
<p><strong>✅built-in css</strong>: you can import css styles directly from a javascript file, which accelerates rendering.</p>
<p><strong>✅image optimization</strong>: images are automatically scaled and provided in the webp format, optimizing them for different viewports.</p>
<p><strong>✅eslint support</strong>: developers can easily integrate eslint using next.js with a simple configuration with <code>&ldquo;scripts&rdquo;: { &ldquo;lint&rdquo;: &ldquo;next lint&rdquo;}</code>.</p>
<h2><em>disadvantages of nextjs</em></h2>
<p><strong>❌routing limitations</strong>: next.js&rsquo;s file-based routing system may not be sufficient for complex projects, requiring developers to use node.js tools for creating dynamic routes.</p>
<p><strong>❌limited community support</strong>: the next.js developer community is smaller compared to react, making it harder to find experienced developers and resources, though it is growing.</p>
<hr>
<h1 style=""text-align: center;"">comparison between the react and nextjs</h1>
<h3>1. development speed ⏩</h3>
<p>next.js offers out-of-the-box features, including its compiler introduced in version 12, which accelerates development by minimizing build times. this reduces the time engineers spend waiting for code refreshes, compared to vanilla react, making the development process smoother and more efficient.</p>
<h3>2. data fetching and load times ⏱</h3>
<p>next.js improves data fetching by preloading page data through server-side traversal of the react tree. this results in faster load times compared to react, which relies solely on client-side rendering. nextjs also automatically caches queries, making it easier to fetch data through the native fetch api.</p>
<h3>3. rendering and seo📱</h3>
<p>next.js supports pre-rendering, which enhances seo performance by serving pre-built pages, while react depends on client-side rendering, making it less efficient for seo-focused applications.</p>
<h3>4. routing 👈👉</h3>
<p>next.js provides a structured, file-based routing system that simplifies setup but offers less flexibility than react, which allows for custom routing setups using libraries like react router.</p>
<h3>5. performance ⏩</h3>
<p>next.js applications benefit from features like server-side rendering (ssr) and image optimization, resulting in faster performance compared to react's client-side rendering, which is less suited for high-performance apps.</p>
<h3>6. documentation📜</h3>
<p>both next.js and react offer extensive documentation and learning resources. however, next.js emphasizes ""learn-by-doing"" tutorials, while react offers more foundational tutorials. create react app (cra) simplifies setup for single-page applications (spas) in react.</p>
<h3>7. server-side rendering💻</h3>
<p>next.js supports server-side rendering (ssr) out of the box, enabling dynamic data fetching and rendering per request. react requires additional configuration to enable ssr, making it less straightforward.</p>
<h3>8. developer community👨&zwj;👩&zwj;👧&zwj;👦</h3>
<p>react has a larger and more active developer community, providing extensive resources and support. next.js has a smaller but growing community, with discussions often centered around github.</p>
<h3>9. configuration🔧</h3>
<p>react's configuration is limited, especially when using create react app, which restricts setup changes. in contrast, next.js offers extensive configuration options, allowing more control over project settings.</p>
<h3>10. maintenance 🧰</h3>
<p>both next.js and react are well-maintained with regular updates, ensuring stability and ongoing improvements.</p>
<h3>11. typescript support🔢</h3>
<p>both next.js and react support typescript, but next.js provides more built-in support for typescript configurations. nextjs automatically comes with typescript, and configuration through touch <code>tsconfig.json</code>. in react, you can add typescript by installing it as follows:</p>
<pre class=""language-javascript""><code>npm install @types/react @types/react-dom</code></pre>
<h3>12. development cost💰</h3>
<p>both next.js and react are open-source and free to use, making them cost-effective options for building applications. however, there are concerns about the ability to host next.js outside vercel and vercel is also expensive.</p>
<h3>13. experienced developers👩&zwj;💻</h3>
<p>react is more popular, making it easier to find experienced developers. next.js developers typically have a background in react, as the framework is built on top of react.</p>
<p><em>comparison between nextjs and react</em> <img class=""rounded-md border-black"" style=""border: 2px solid black;"" src=""https://res.cloudinary.com/dipkbpinx/image/upload/v1724437666/tech-tales/blog-images/luvsa9wfvz8asnzuzwxn.jpg"" alt=""comparison between react and nextjs"" width=""1225"" height=""646""></p>
<hr>
<h1 id=""best"" style=""text-align: center;"">which is the best next js or react js?🧠</h1>
<p>there is no simple answer to this as it all depends on your use case. in most cases, i have found react to even perform better than nextjs. therefore, selecting a framework or library completely depends on your project needs. react and next.js are emerging and beneficial tools for your project, but only for performing certain tasks.</p>
<p>when you go with next.js, offers the best server-side rendering and static website development solutions. also, it lets you manage projects easily with various tools and features.</p>
<p>on the other hand, react is the best choice to develop user interfaces for single-page applications. since it works with the layer of mobile and web apps, it allows you to create more appealing and intuitive applications.</p>
<p>next js is a framework that holds react on its base, while react js is an open-source javascript library, developed and maintained by facebook. next js is used to create web applications and performs server-side rendering, whereas react js focuses on rendering towards the dom.</p>
<p>next.js supports server-side rendering (ssr), whereas react.js supports client-side rendering, which improves the application performance.</p>
<p><strong>next.js</strong>&nbsp;is a framework, used to build ui and pages for the web app with react library, while&nbsp;<strong>react.js</strong>&nbsp;as a library is a part of a framework, the ui components part.</p>
<p><strong>next js</strong>&nbsp;is easy to learn if you have a basic knowledge of react, whereas&nbsp;<strong>react js</strong>&nbsp;is easy to learn and use if you have an understanding of javascript, html, and css.</p>
<p>in a nutshell,&nbsp;<strong>next.js</strong>&nbsp;offers various tools and features to minimize the development process, whereas,&nbsp;<strong>react.js</strong> has better resources for the front-end development of your mobile and web application.</p>
<h1 style=""text-align: center;"">conclusion</h1>
<p>in their ways, both react and next.js provide significant potential for developers. react allows you to design things any way you want and is supported by a large community. next.js makes your life easier by providing a variety of tools and conventions right out of the box, and it&rsquo;s backed up by a vibrant open-source community.</p>
<p>to summarise, next.js provides more capabilities and tools for working behind the scenes, but react.js has more resources for working on the front end of your web or mobile application.</p>
<p>any project would benefit greatly from the use of react. what&rsquo;s more, if, given the chance, it can scale up as well. react offers more flexibility than next. because it is a library, javascript is used. it is up to the engineer to decide whether or not to use it.</p>
<p>i hope this article on next.js vs react has given you the knowledge and some insights on how and why these technologies are used by many organizations. best of luck with your upcoming project!</p>",is-nextjs-better-than-react-here-is-a-comparison-between-the-two,"nextjs,frontend,react,webdevelopment",published,0,946,http://res.cloudinary.com/dipkbpinx/image/upload/v1725020561/tech-tales/cover-images/dmydelbrmhfafza7tbmi.jpg
2,a guide on how to host your ruby on rails application,"<p style=""text-align: left;"">congratulations on learning ruby on rails and creating your first ruby on rails application! but wait a minute, how do you host your application on the internet?</p>
<p>one of the most challenging endeavors i have faced as a ruby on rails developer is finding hosting websites that offer free tier hosting for students and are actually easy to use. that is why i have compiled a list of my favorite hosting platforms to help make your life easier and make you fall in love with ruby on rails.</p>
<p>in this article, i will also compare the advantages and disadvantages of each hosting platform and give you<em> <strong>tips</strong></em> on how to get the best out the listed platforms.</p>
<h2 style=""text-align: center;""><strong>1. railway</strong></h2>
<p><img src=""https://railway.app/brand/logotype-light.png"" alt=""railway-logo"" width=""1466"" height=""402""></p>
<p>railway is my first choice for hosting a ruby on rails application. the platform provides new users with $5 credit, which is depleted based on the cpu usage of your web service. to host a ruby on rails application on railway, you will need to create an account either using github or email, import your repository and add other necessary configurations.</p>
<p>one most vital configuration is having a railway.json file and a procfile. the railway.json file defines how railway will build your application, while the procfile defines the instructions necessary to run the appliaction, which in this case is <span style=""color: #2dc26b;""><strong>rails db:migrate and rails s. </strong></span></p>
<p><span style=""color: #2dc26b;""><span style=""color: #000000;"">for more guidelines on how to host on railway, consider cloning this&nbsp;<span style=""color: #3598db;""><em><a style=""color: #3598db;"" title=""repository"" href=""https://railway.app/template/sibk1f"" target=""_blank"" rel=""noopener"">ruby on railway template</a></em>.</span> </span></span>you can also check out this blog <em><a title=""deploying ruby on railway"" href=""https://crisprogramming.hashnode.dev/deploy-ruby-on-rails-application-with-railway""><span style=""color: #3598db;"">deploying on railway</span></a>&nbsp;</em></p>
<h2 style=""text-align: center;""><strong><span style=""color: #000000;"">2. render</span></strong></h2>
<p><img src=""https://rails.onrender.com/assets/render-40324cab144d545cc570827d81b1b41d81faac4968a2d3aaa96f2f1eb45c8435.png"" alt=""render-logo"" width=""1225"" height=""244""></p>
<p><em><a title=""render"" href=""https://dashboard.render.com""><span style=""color: #3598db;"">render</span></a>&nbsp;</em>is the second most popular choice for deploying ruby on rails application for free. the platform is more common among developers, although successfully hosting on the platform could be an headache.</p>
<p>unlike <strong>railway</strong>, render provides a free instance that allows you to host a web service with no limitations as long you do not exceed the allowed bandwidth. render also offers postgress database, which expires after a while if you fail to switch to a paid account.</p>
<p>this means that your data could be lost when the database expires. therefore, navigating such challenge would require hosting the database on a separate platform such as <strong>supabase</strong>, <strong>vercel</strong> or <strong>firebase</strong>.</p>
<p>the web service provided by render also sleeps after 30 minutes of inactivity and waking it might take more than 1 minute. this deliberately makes the server too slow, which i believe is an attempt by render to encourage individuals to switch to a paid plan. however, auto-sleep also helps cut costs when the server is not in use.</p>
<p>to get started with render, you will need to create a render-build.sh file in your repository, which directs render how to build the app. however, render has also introduced automatic builds, which makes it very easy to deploy on the platform.</p>
<p>for more information on how to deploy on render, check their <em><span style=""color: #3598db;""><a style=""color: #3598db;"" title=""render-rails-documentation"" href=""https://docs.render.com/docs/deploy-rails"" target=""_blank"" rel=""noopener"">ruby on rails documentation</a></span> </em>or just go to their website and create a new<em> <span style=""color: #3598db;""><a style=""color: #3598db;"" title=""render-web-service"" href=""https://dashboard.render.com/create?type=web"" target=""_blank"" rel=""noopener"">web service</a></span>.</em></p>
<h2 style=""text-align: center;"">3. koyeb</h2>
<p><img src=""https://th.bing.com/th/id/r.663987a2292a61ccce6f80e631c91a73?rik=t7%2brggq77ro6lq&amp;pid=imgraw&amp;r=0"" alt=""koyeb"" width=""1225"" height=""352""></p>
<p>i recently discovered<span style=""color: #236fa1;""> <em><a style=""color: #236fa1;"" title=""koyeb"" href=""https://app.koyeb.com"" target=""_blank"" rel=""noopener"">koyeb</a> </em></span>on stackoverflow. koyeb provides a free lifetime plan for a web service that allows developers to experiment with their site. the forever free tier providers 50 active hours per month. the web service auto-sleeps after periods of inactivity, which makes it slow to respond.</p>
<p>the platform also automatically runs builds using docker and does not need any instructions on how to build or configure the app. just import the github repo and that's it! however, you will need to host the database in another program such as supabase or vercel.</p>
<p>however, i did <span style=""color: #e03e2d;"">experience some lag</span> with koyeb and render, which made the database really slow. the issue is likely caused by pgbouncer which is used to distribute loads. since with render and koyeb you have to host your database separately, the web service gets really slow.</p>
<p>as i wrap up, other sites that i have found but might not be free (not tried them out yet) include <strong>microsoft azure</strong> and <strong>openshift</strong>. however, the greatest flex is of course to&nbsp;<span style=""color: #3598db;""><em>self-host your application</em></span>.<br>let me know of other awesome free platforms that rubyists can enjoy!</p>",a-guide-on-how-to-host-your-ruby-on-rails-application,"ruby,rubyonrails,hosting,webservice",published,8,1287,http://res.cloudinary.com/dipkbpinx/image/upload/v1725123028/tech-tales/cover-images/iskpturllte1eisuix6r.jpg
33,a complete guide to otp verification,"<p>one major challenge associated with designing your authentication system flow is ensuring users enter valid email addresses. to avoid fake users, verifying that users have entered their email addresses is necessary. verifying email can help in enhancing other security measures such as sending password reset links or notification emails. this blog explains how to implement an otp verification system.</p>
<div id=""toc"" class=""mce-toc"">
<h2>table of contents</h2>
<ol>
<li>1. <a href=""#what-is-otp-verification?"">what is otp verification?</a></li>
<li>2. <a href=""#implementing-otp-verification"">implementing otp verification</a>
<ol>
<li>2.1 <a href=""#creating-an-otp-table-in-the-database"">creating an otp table in the database</a></li>
<li>2.2 <a href=""#generating-otp-codes"">generating otp codes</a></li>
<li>2.3 <a href=""#verifying-the-otp-code"">verifying the otp code</a></li>
<li>2.4 <a href=""#resending-the-otp"">resending the otp</a></li>
</ol>
</li>
<li>3. <a href=""#conclusion"">conclusion</a></li>
</ol>
</div>
<h1 id=""conclusion"">what is otp verification?</h1>
<p>a one time password (otp) is a simple and smart choice for enhancing security in applications. a one-time password is a password or code that is automatically generated and sent to a digital device to allow a single login session or transaction. also known as a one-time pin, one-time authorization code (otac), one-time-pass code, or dynamic password, otp mitigates several risks of traditional static password-based authentication.</p>
<p>otp plays an integral role in two-factor authentication systems and they are popular for validating new user accounts and resetting passwords. the user is required to input this code to confirm their identity and complete specific actions, such as accessing an account, conducting transactions, or retrieving sensitive information.</p>
<h1><strong class=""mi gv"">implementing otp verification</strong></h1>
<p>for this tutorial, we are going to discuss how to implement otp verification in a nextjs app using the prisma orm database and nodemailer. however, the tutorial could be applied to react and other databases orm such as mongodb and resend.</p>
<h2 id=""4.-resending-the-otp"">1. creating an otp table in the database</h2>
<p>if you are handling your own otp verification without using an external provider, you will need to create a table to store the generated otp codes. codes must be associated with their emails, and also have an expiry time for security measures.&nbsp;</p>
<pre class=""language-javascript""><code>//prisma database schema
model otp {
  id        int      @id @default(autoincrement())
  email     string
  code      string
  expiresat datetime
  createdat datetime @default(now())
}
//mongodb
const mongoose = require('mongoose');
const otpschema = new mongoose.schema({
  email: {
    type: string,
    required: true,
  },
  code: {
    type: string,
    required: true,
  },
  expiresat: {
    type: date,
    required: true,
  },
  createdat: {
    type: date,
    default: date.now,
  },
});
const otp = mongoose.model('otp', otpschema);
module.exports = otp;</code></pre>
<h2>2. generating otp codes</h2>
<p>since we now have a database table to store our otp, we need to generate an otp code when a user signs up or requests to reset a password. to do this, create a helper function that will be called when a user submits their email address.</p>
<pre class=""language-javascript""><code>//function to create otp code in the database
export async function createotpcode(email: string) {
  const otp = math.floor(100000 + math.random() * 900000).tostring();
  try {
    const expiresat = new date(date.now() + 5 * 60 * 1000); // 5 minutes expiry
    await prisma.otp.create({
      data: {
        email,
        code: otp,
        expiresat: expiresat,
      },
    });
    const response = await sendverificationemail(email, otp);
    return response.message;
  } catch (error) {
    console.error(error);
    throw new error(error);
  }
}</code></pre>
<p>here, i have created a function that creates an otp code in the database and calls the `<strong><span style=""color: #3598db;"">sendverificationemail</span></strong>` function that sends the code to the user's email using nodemailer. the send email function looks as follows:</p>
<pre class=""language-javascript""><code>//emails/index.ts
""use server"";
import nodemailer from ""nodemailer"";
import {
  otptemplate,
  welcometemplate,
  adminpasswordresettemplate,
  adminregistrationtemplate,
} from ""./template"";
const transporter = nodemailer.createtransport({
  service: ""gmail"",
  auth: {
    user: process.env.email_user,
    pass: process.env.email_password,
  },
});
const sender = `""techtales"" &lt;admin@techtales.vercel.app&gt;`;
export const sendemail = async (emailoptions: {
  subject: string;
  from: string;
  to: string;
  html: any;
}) =&gt; {
  await transporter.sendmail(emailoptions);
};
export const sendverificationemail = async (email: string, otp: string) =&gt; {
  try {
    const response = await sendemail({
      subject: `your otp verification code is ${otp}`,
      to: email,
      from: sender,
      html: otptemplate(otp),
    });
    console.log(""email sent successfully"");
    return { message: ""email sent successfully"" };
  } catch (error) {
    console.error(""email delivery failed:"", error);
    return { message: ""email delivery failed"" };
  }
};</code></pre>
<h2>3. verifying the otp code</h2>
<p>the next step is for the users to get the otp code and input it on the page to verify their email address. the verification must check whether the code is related to the email provided and it has not expired. furthermore, to avoid database overload, i opted to delete the code once the verification was successful since the code could not be reused.</p>
<p>i implemented an api route `<span style=""color: #3598db;""><strong>/auth/verify-token</strong></span>`, which uses a post method to get the otp and email from the user and verify the credentials.</p>
<pre class=""language-javascript""><code>//api/auth/verify-token
import prisma from ""@/prisma/prisma"";
import { nextrequest, nextresponse } from ""next/server"";
export async function post(req: nextrequest, res: nextresponse) {
  const { email, code } = await req.json();
  let otpentry: any;
  try {
    otpentry = await prisma.otp.findfirst({
      where: {
        email: email,
        code: code,
      },
    });
    if (!otpentry) {
      return nextresponse.json(
        { error: ""wrong otp provided"" },
        { status: 404 }
      );
    }
    if (new date() &gt; otpentry.expiresat) {
      return nextresponse.json(
        { error: ""the otp code has expired"" },
        { status: 401 }
      );
    }
    const response = nextresponse.json(
      { message: ""otp verified successfully"" },
      { status: 200 }
    );
    return response;
  } catch (error) {
    return nextresponse.json({ error: error }, { status: 404 });
  } finally {
    if (otpentry) {
      await prisma.otp.delete({
        where: {
          id: otpentry.id,
        },
      });
    }
    await prisma.$disconnect();
  }
}
</code></pre>
<p>verifying the otp is as simple as sending a post request to `<strong><span style=""color: #3598db;"">/api/auth/verify-token</span></strong>` and providing the email and otp code in the request body. you can save the email in the sessionstorage or append it to the url when navigating the user to the verification page.</p>
<h2>4. resending the otp</h2>
<p>one final step is to ensure users can resend the otp code in case it is expired or they did not receive the code. it is also important to inform users to check the spam folder in case the email gets flagged by the provider.</p>
<pre class=""language-javascript""><code>//lib/actions.ts
//function to resend otp email
export async function resendotpemail(email: string) {
  const otp = math.floor(100000 + math.random() * 900000).tostring();
  try {
    await prisma.otp.deletemany({
      where: {
        email: email,
      },
    });
    const expiresat = new date(date.now() + 5 * 60 * 1000); // 5 minutes expiry
    await prisma.otp.create({
      data: {
        email,
        code: otp,
        expiresat: expiresat,
      },
    });
    const response = await sendverificationemail(email, otp);
    return response.message;
  } catch (error) {
    console.error(error);
    throw new error(""error sending email!"");
  }
}</code></pre>
<p>a point to note is that when a user resends an otp and their initial otp has not expired, the find first method will find the initial otp and thus the re-sent code will be invalid. to counter this problem, we first delete all the otp codes associated with the user email, create a new code, and send it to the user email. this way, if the user enters their old code, it will be invalid.</p>
<h1>conclusion</h1>
<p>in this blog, we saw how simple it is to implement an otp verification system without relying on external third-party providers. otps can be used to reset forgotten passwords, complete a transaction, sign up or log into accounts, shield against spam and bots, and verify online purchases. otp also helps reduce friction in the customer journey. for example, lost/forgotten passwords can lead to dropoffs, and otps can help users quickly regain access to their accounts.</p>",a-complete-guide-to-otp-verification,"authentication,otp,security,webdev",published,2,1600,http://res.cloudinary.com/dipkbpinx/image/upload/v1725018955/tech-tales/cover-images/zp1oj1ghapuhpqh2latd.png
61,📝the ultimate git cheat sheet🚀,"<h2 id=""the-ultimate-git-cheat-sheet-a-comprehensive-guide-for-all-levels""></h2>
<p>git is an essential tool for developers, enabling smooth version control, collaboration, and code management across projects. this cheat sheet breaks down the basics of git, from setup to advanced commands, so you can navigate git&rsquo;s functionality with ease.</p>
<h3 id=""1-setting-up-git-"">1. <strong>setting up git</strong></h3>
<p>to get started with git, you first need to install it and configure some basic settings.</p>
<h4 id=""-installation-""><strong>installation</strong></h4>
<ul>
<li><strong>on linux</strong>: <code>sudo apt-get install git</code></li>
<li><strong>on mac</strong>: <code>brew install git</code></li>
<li><strong>on windows</strong>: download from <a href=""https://git-scm.com/downloads"">git-scm.com/downloads</a></li>
</ul>
<h4 id=""-configuration-""><strong>configuration</strong></h4>
<p>after installation, configure your identity for commits:</p>
<pre class=""language-bash""><code>git config --global user.name ""your name""
git config --global user.email ""you@example.com""
</code></pre>
<p>you can also enable helpful settings like colorized output:</p>
<pre class=""language-bash""><code>git config --global color.ui auto
</code></pre>
<h3 id=""2-starting-a-project-with-git-"">2. <strong>starting a project with git</strong></h3>
<p>git can initialize a repository for new projects or clone an existing one.</p>
<ul>
<li>
<p><strong>initialize a repository</strong>:</p>
<pre class=""language-bash""><code>git init [project_name]
</code></pre>
<p>this command creates a new git repository in your project folder.</p>
</li>
<li>
<p><strong>clone a repository</strong>:</p>
<pre class=""language-bash""><code>git clone &lt;repository_url&gt;
</code></pre>
<p>cloning downloads the entire project history from the remote repository.</p>
</li>
</ul>
<h3 id=""3-basic-git-commands-"">3. <strong>basic git commands</strong></h3>
<p>for day-to-day work, git&rsquo;s main commands help manage changes effectively.</p>
<ul>
<li>
<p><strong>check status</strong>:</p>
<pre class=""language-bash""><code>git status
</code></pre>
<p>displays the current state of your working directory.</p>
</li>
<li>
<p><strong>add changes</strong>:</p>
<pre class=""language-bash""><code>git add [file]
</code></pre>
<p>add a file to the staging area. to add all files, use <code>git add .</code>.</p>
</li>
<li>
<p><strong>commit changes</strong>:</p>
<pre class=""language-bash""><code>git commit -m ""commit message""
</code></pre>
<p>creates a new commit from the changes in the staging area.</p>
</li>
<li>
<p><strong>view differences</strong>:</p>
<ul>
<li>to see unstaged changes:
<pre class=""language-bash""><code>git diff [file]
</code></pre>
</li>
<li>for staged changes:
<pre class=""language-bash""><code>git diff --staged [file]
</code></pre>
</li>
</ul>
</li>
</ul>
<h3 id=""4-branching-and-merging-"">4. <strong>branching and merging</strong></h3>
<p>git&rsquo;s branching model makes it easy to work on separate features or fixes without affecting the main project.</p>
<ul>
<li>
<p><strong>create a branch</strong>:</p>
<pre class=""language-bash""><code>git branch [branch_name]
</code></pre>
<p>this command creates a new branch based on the current branch.</p>
</li>
<li>
<p><strong>switch branches</strong>:</p>
<pre class=""language-bash""><code>git checkout [branch_name]
</code></pre>
<p>to switch to an existing branch. use <code>-b</code> to create and switch to a new branch simultaneously.</p>
</li>
<li>
<p><strong>merge branches</strong>:</p>
<pre class=""language-bash""><code>git merge [branch_name]
</code></pre>
<p>merges the specified branch into the current branch.</p>
</li>
<li>
<p><strong>delete a branch</strong>:</p>
<pre class=""language-bash""><code>git branch -d [branch_name]
</code></pre>
<p>deletes a branch if it has already been merged into another.</p>
</li>
</ul>
<h3 id=""5-working-with-remote-repositories-"">5. <strong>working with remote repositories</strong></h3>
<p>remote repositories allow teams to collaborate. here&rsquo;s how to manage them:</p>
<ul>
<li style=""font-weight: bold;""><strong>setup remote repository</strong>
<pre class=""language-bash""><code>git remote add &lt;name&gt; &lt;url&gt;
# this command adds a new remote connection with the alias &lt;name&gt; pointing to &lt;url&gt;. 
# you can then use &lt;name&gt; as a shortcut for &lt;url&gt; in other git commands.</code></pre>
</li>
<li>
<p><strong>fetch changes</strong>:</p>
<pre class=""language-bash""><code>git fetch [remote]
</code></pre>
<p>this command updates your local repository with changes from the remote, without merging them.</p>
</li>
<li>
<p><strong>pull changes</strong>:</p>
<pre class=""language-bash""><code>git pull [remote]
</code></pre>
<p>fetches changes and merges them into the current branch.</p>
</li>
<li>
<p><strong>push changes</strong>:</p>
<pre class=""language-bash""><code>git push [remote] [branch]
</code></pre>
<p>pushes your local changes to the remote branch.</p>
</li>
<li><strong>setting an upstream branch</strong>
<pre class=""language-shell""><code>git push -u &lt;remote&gt; &lt;branch&gt;
# for example
git push -u origin main</code></pre>
you can link your local branch with a remote branch using the <code>-u</code> or <code>--set-upstream</code> flag. this makes future <code>git push</code> and <code>git pull</code> commands simpler by associating the local branch with a specific remote branch.</li>
</ul>
<h3 id=""6-git-stash-"">6.&nbsp;<strong>git stash</strong></h3>
<p>git&rsquo;s stash feature lets you temporarily store changes without committing them.</p>
<ul>
<li>
<p><strong>stash changes</strong>:</p>
<pre class=""language-bash""><code>git stash
</code></pre>
<p>stashes current changes, so you can work on something else.</p>
</li>
<li>
<p><strong>apply stashed changes</strong>:</p>
<pre class=""language-bash""><code>git stash pop
</code></pre>
<p>reapplies the most recent stash and removes it from the stash list.</p>
</li>
<li>
<p><strong>delete a stash</strong>:</p>
<pre class=""language-bash""><code>git stash drop
</code></pre>
<p>deletes the specified stash.</p>
</li>
</ul>
<h3 id=""7-inspecting-project-history-"">7. <strong>inspecting project history</strong></h3>
<p>git&rsquo;s logging tools allow for an in-depth look at the project history.</p>
<ul>
<li>
<p><strong>view commit log</strong>:</p>
<pre class=""language-bash""><code>git log
</code></pre>
<p>shows the commit history.</p>
</li>
<li>
<p><strong>compact view</strong>:</p>
<pre class=""language-bash""><code>git log --oneline --graph --decorate
</code></pre>
<p>displays a compact, graphical view of commits with branch and tag references.</p>
</li>
<li>
<p><strong>view recent commits</strong>:</p>
<pre class=""language-bash""><code>git log -n [count]
</code></pre>
<p>limits the output to the last <code>n</code> commits.</p>
</li>
</ul>
<h3 id=""8-tagging-commits-"">8. <strong>tagging commits</strong></h3>
<p>tags are useful for marking specific points in history, like version releases.</p>
<ul>
<li>
<p><strong>create a tag</strong>:</p>
<pre class=""language-bash""><code>git tag [tag_name]
</code></pre>
<p>adds a lightweight tag to the current commit.</p>
</li>
<li>
<p><strong>annotated tag</strong>:</p>
<pre class=""language-bash""><code>git tag -a [tag_name] -m ""tag message""
</code></pre>
<p>annotated tags include additional metadata, like messages.</p>
</li>
</ul>
<h3 id=""9-undoing-changes-"">9. <strong>undoing changes</strong></h3>
<p>git provides commands to undo mistakes, but use them with caution.</p>
<ul>
<li>
<p><strong>unstage changes</strong>:</p>
<pre class=""language-bash""><code>git reset [file]
</code></pre>
<p>removes the file from the staging area without changing the working directory.</p>
</li>
<li>
<p><strong>revert a commit</strong>:</p>
<pre class=""language-bash""><code>git revert [commit_hash]
</code></pre>
<p>creates a new commit that undoes changes from a specific commit.</p>
</li>
<li>
<p><strong>discard all local changes</strong>:</p>
<pre class=""language-bash""><code>git reset --hard
</code></pre>
<p>resets the working directory and staging area to the last commit.</p>
</li>
</ul>
<h3 id=""10-ignoring-files-with-gitignore-"">10. <strong>ignoring files with .gitignore</strong></h3>
<p>a <code>.gitignore</code> file specifies files and directories git should ignore.</p>
<pre class=""language-bash""><code># ignore log files
logs/*
# keep specific file
!logs/.gitkeep
# ignore temp files
*.tmp
</code></pre>
<p>add patterns to exclude specific files, like logs or temporary files, from git tracking.</p>
<h3 id=""final-tips"">final tips</h3>
<p>mastering git takes practice, and each project will offer new challenges to grow your git skills. try using this cheat sheet as a reference for a smoother, more efficient git workflow.</p>
<p>for more detailed learning, consider checking the free <a href=""https://git-scm.com/book/en/v2"" target=""_blank"" rel=""noopener"">pro git book</a> or downloading this <a title=""cheatsheet"" href=""https://about.gitlab.com/images/press/git-cheat-sheet.pdf"" target=""_blank"" rel=""noopener"">cheatsheet</a>. happy coding!</p>",-the-ultimate-git-cheat-sheet-,"git,github,githubactions,programming",published,2,309,http://res.cloudinary.com/dipkbpinx/image/upload/v1729902258/tech-tales/cover-images/umldsnsbncq4dcglnaky.png
44,the future of quantum computing: what to expect in the next decade,"<p>quantum computing has been a buzzword in the tech industry for years, promising to revolutionize everything from cryptography to artificial intelligence. but what does the future hold for this cutting-edge technology?</p>
<p>as we look ahead to the next decade, it's clear that quantum computing will move from theoretical research to practical applications, impacting industries in ways we can only begin to imagine.</p>
<h2>understanding quantum computing</h2>
<p>at its core, quantum computing leverages the principles of quantum mechanics to perform computations that are infeasible for classical computers. unlike classical bits, quantum bits (qubits) can exist in multiple states simultaneously, thanks to superposition and entanglement.</p>
<p>this allows quantum computers to process a vast amount of data in parallel, making them exponentially more powerful for certain tasks. &nbsp;</p>
<blockquote>
<p>quantum computing harnesses the power of quantum mechanics to help us overcome the limitations that today&rsquo;s computing world has been encountering.</p>
</blockquote>
<h2>potential applications</h2>
<ol>
<li>
<p><strong>cryptography</strong>: one of the most anticipated applications of quantum computing is in the field of cryptography. quantum computers have the potential to break traditional encryption methods, leading to the development of quantum-resistant cryptographic algorithms.</p>
</li>
<li>
<p><strong>drug discovery</strong>: quantum computing could dramatically speed up the process of drug discovery by simulating molecular structures and interactions with unprecedented accuracy. this could lead to faster development of new medications and treatments for various diseases.</p>
</li>
<li>
<p><strong>optimization problems</strong>: industries that rely on complex optimization problems, such as logistics, finance, and manufacturing, could see significant efficiency improvements. quantum algorithms can find optimal solutions much faster than classical algorithms, reducing costs and improving performance.</p>
</li>
</ol>
<h1>challenges of quantum computing</h1>
<p>despite remarkable advances, quantum computing still faces significant technological hurdles that limit its applications, scalability, and reliability at this stage. addressing these challenges is crucial for realizing the full potential of quantum computing in the future.</p>
<h2>1. decoherence and error correction</h2>
<p>one of the most pressing challenges in quantum computing is <span style=""color: #3598db;""><strong>decoherence</strong></span>. unlike classical computers, quantum computers are highly susceptible to noise, with qubits&mdash;quantum bits&mdash;being extremely fragile.</p>
<p>even slight perturbations, such as minor vibrations or temperature fluctuations, can disrupt the quantum state of qubits, leading to the loss of stored information.</p>
<p>this phenomenon, known as decoherence, poses a significant obstacle because calculations must be completed before decoherence occurs.</p>
<p>to combat decoherence, researchers are developing <span style=""color: #3598db;""><strong>error-correcting codes</strong></span>. while error correction is well-established in classical computing, it becomes far more complex in the quantum realm.</p>
<p>quantum errors can manifest as phase shifts, bit flips, or a combination of both, making them difficult to detect and correct. additionally, unlike classical bits, qubits cannot be copied, necessitating more sophisticated correction codes.</p>
<p>techniques such as the shor code, the steane code, and the surface code are widely used to encode quantum information and protect it from errors, but they require multiple physical qubits to represent a single logical qubit, complicating the overall system.</p>
<h2>2. scalability</h2>
<p><strong>scalability</strong> is another major challenge in quantum computing. for quantum systems to tackle more complex problems, the number of qubits must be increased significantly.&nbsp;however, connecting a large number of qubits to create larger, more powerful quantum systems is incredibly challenging.</p>
<p>one potential solution lies in the use of error correction techniques, which introduce redundancy to detect and correct errors. however, implementing these techniques requires additional qubits and complex algorithms, making the scaling process even more difficult.</p>
<h2>3. physical implementation</h2>
<p>quantum computers can be built using various methods, including <span style=""color: #3598db;""><strong>superconducting circuits</strong></span>, <strong><span style=""color: #3598db;"">trapped ion</span>s</strong>, and <span style=""color: #3598db;""><strong>topological qubits</strong></span>. each approach has its own set of difficulties, and it remains uncertain which method will prove most viable for large-scale quantum computing.</p>
<p>superconducting circuits, for example, require extremely low temperatures to maintain coherence, while trapped ions need precise control and isolation from environmental noise.</p>
<p>the race to develop scalable and efficient quantum hardware continues, with each method presenting unique technical challenges that require interdisciplinary collaboration and innovation.</p>
<h2>4. cost and accessibility</h2>
<p>currently, quantum computers are prohibitively expensive and require specialized environments, such as cryogenic cooling systems, to operate.</p>
<p>as a result, accessibility is a significant barrier, with only a handful of research institutions and tech companies having the resources to develop and utilize quantum computers.</p>
<p>one of the key challenges moving forward is to make quantum computing more accessible and affordable, enabling wider adoption and experimentation.</p>
<h2>5. workforce and expertise</h2>
<p>the field of quantum computing demands deep knowledge of quantum mechanics, computer science, and engineering.</p>
<p>however, finding professionals who possess expertise in all three areas is difficult, leading to a talent shortage that could slow down the development and adoption of quantum computing technologies.</p>
<p>building a workforce with the necessary skills will require significant investment in education and training programs, as well as fostering collaboration between academia, industry, and government.</p>
<h1>the future of quantum computing</h1>
<p>despite the challenges, the future of quantum computing is incredibly promising. technology giants such as <span style=""color: #3598db;""><strong>ibm, google, and microsoft</strong></span>, along with numerous research institutions, are investing heavily in this field.</p>
<p>these investments are driving continuous progress in increasing qubit coherence times, reducing error rates, and developing new quantum algorithms.</p>
<p>as quantum computing technology matures, it is expected to become a fundamental tool for scientific research, making it possible to solve previously intractable problems.</p>
<p>governments around the world are recognizing the strategic importance of quantum computing and are increasing funding for research and development. collaborative efforts between public and private sectors are likely to accelerate breakthroughs in this area.</p>
<p>in the near future, it will be essential to identify use cases for quantum computing early on and manage expectations regarding its capabilities.</p>
<p>while initial applications may be limited, as quantum computers grow in the number of qubits, their computational capacity will increase exponentially. this means that algorithms proven to work on a small scale can be applied to larger datasets as the technology advances, paving the way for unprecedented innovation in fields such as cryptography, drug discovery, and artificial intelligence.</p>
<p>the growth of quantum computing is poised to have a transformative impact on society, and staying informed about developments in this field will be crucial for those looking to harness its potential.</p>
<h1>conclusion</h1>
<p>the next decade will be crucial for the development of quantum computing. as the technology matures, we can expect to see more practical applications emerge, transforming industries and solving problems that were previously thought to be unsolvable.</p>
<p>while there are still hurdles to overcome, the future of quantum computing is undoubtedly bright, and it will be fascinating to see how it shapes the world of tomorrow.</p>",-the-future-of-quantum-computing-what-to-expect-in-the-next-decade,"quantumcomputing,technology,future,innovation
",published,0,693,http://res.cloudinary.com/dipkbpinx/image/upload/v1725021655/tech-tales/cover-images/sr9siwbf06mslhmh776m.jpg
11,11 lesser-known html tags that can enhance your web development skills,"<p>html (hypertext markup language) is the backbone of web development, allowing us to structure and present content on the internet. while most developers are familiar with popular html tags like&nbsp;<code>&lt;div&gt;</code>&nbsp;and&nbsp;<code>&lt;p&gt;</code>, there are lesser-known tags that can enhance the functionality and aesthetics of web pages. in this article, we'll explore 11 html tags that you may not be aware of but can bring added value to your web development projects.</p>
<h2 id=""1-details-and-summary""><strong>1. &lt;details&gt; and &lt;summary&gt;</strong></h2>
<p>the&nbsp;<code>&lt;details&gt;</code>&nbsp;and&nbsp;<code>&lt;summary&gt;</code>&nbsp;tags work together to create collapsible content sections on a web page. they provide a way to hide and reveal additional information, enhancing the user experience and saving space on the page.</p>
<ul>
<li>the&nbsp;<code>&lt;details&gt;</code>&nbsp;tag is used to create a container for the collapsible content. it acts as a wrapper for the content that can be expanded or collapsed.</li>
<li>the&nbsp;<code>&lt;summary&gt;</code>&nbsp;tag is used as the heading or title for the collapsible section. it is typically placed inside the &lt;details&gt; tag and provides a clickable element that toggles the visibility of the content.</li>
<li>when the collapsible section is collapsed, only the&nbsp;<code>&lt;summary&gt;</code>&nbsp;element is visible, usually with an arrow or a customizable marker indicating that it can be expanded. when the user clicks on the&nbsp;<code>&lt;summary&gt;</code>&nbsp;element, the content inside the &lt;details&gt; tag is revealed or hidden, depending on its previous state.</li>
<li>the&nbsp;<code>&lt;details&gt;</code>&nbsp;and&nbsp;<code>&lt;summary&gt;</code>&nbsp;tags can be styled using css to customize their appearance, such as changing the arrow icon or adding animations to the expanding and collapsing effects.</li>
<li>these tags are especially useful for displaying additional information, such as faqs, long descriptions, or hidden content that can be optionally revealed by the user.</li>
</ul>
<p><em>for example:</em></p>
<pre class=""language-haml""><code>&lt;details open=""open""&gt;
&lt;summary&gt;show more&lt;/summary&gt;
&lt;p&gt;this is some additional content that will be revealed when the user clicks on the ""show more"" text.&lt;/p&gt;
&lt;/details&gt;</code></pre>
<p><strong>result ⤵</strong></p>
<div style=""background-color: #f5f2f0; padding: 5px; border-radius: 8px; border: 1px solid #ccc;"">
<details open=""open"">
<summary>show more</summary>
<p>this is some additional content that will be revealed when the user clicks on the ""show more"" text.</p>
</details>
</div>
<p>the above example creates a collapsible section on the web page. initially, only the text&nbsp;<em>show more</em>&nbsp;is visible. when the user clicks on it, the&nbsp;<code>&lt;p&gt;</code>&nbsp;element containing the sentence&nbsp;<em>this is some additional content that will be revealed when the user clicks on the 'show more'&nbsp;</em>text will be displayed below the summary.</p>
<h2 id=""2-mark""><strong>2. &lt;mark&gt;</strong></h2>
<p>the&nbsp;<code>&lt;mark&gt;</code>&nbsp;tag is used to highlight or mark a specific portion of text within a document. it is typically used to indicate relevance, importance, or to draw attention to specific information.</p>
<ul>
<li>the&nbsp;<code>&lt;mark&gt;</code>&nbsp;tag is an inline element that visually highlights the enclosed text by applying a background color or other styling, depending on the browser's default rendering.</li>
<li>this tag is commonly used in search results, where it helps users quickly identify the keywords or search terms that match their query within the displayed content.</li>
<li>the&nbsp;<code>&lt;mark&gt;</code>&nbsp;tag does not provide any semantic meaning to the enclosed text. it is purely presentational and should be used sparingly to avoid overusing visual emphasis.</li>
</ul>
<p><em>for example:</em></p>
<pre class=""language-haml""><code>&lt;p&gt;the &lt;mark&gt;quick brown fox&lt;/mark&gt; jumps over the lazy dog.&lt;/p&gt;</code></pre>
<p><strong>result ⤵</strong></p>
<div style=""background-color: #f5f2f0; padding: 5px; border-radius: 8px; border: 1px solid #ccc;"">
<p>the <mark>quick brown fox</mark> jumps over the lazy dog.</p>
</div>
<p>in this example, the phrase&nbsp;<em>quick brown fox</em>&nbsp;will be visually highlighted by the browser, typically with a yellow background or other distinctive styling.</p>
<h2 id=""3-time""><strong>3. &lt;time&gt;</strong></h2>
<p>the&nbsp;<code>&lt;time&gt;</code>&nbsp;tag is used to represent a specific date, time, or duration. it provides semantic meaning to the enclosed content and can be used for various purposes, such as displaying event dates, publication timestamps, or durations of time.</p>
<ul>
<li>the&nbsp;<code>&lt;time&gt;</code>&nbsp;tag is an inline element and should be used to enclose a specific time or date within the html document.</li>
<li>it requires the use of the datetime attribute, which specifies the date and/or time in a machine-readable format following the&nbsp;<a href=""https://www.iso.org/iso-8601-date-and-time-format.html?ref=blog.ossph.org"">iso 8601 standard</a>. this format ensures consistency and helps search engines, screen readers, and other tools understand the intended meaning.</li>
<li>the&nbsp;<code>&lt;time&gt;</code>&nbsp;tag can be used in various scenarios, such as displaying publication dates, event times, or durations.</li>
</ul>
<p><em>for example:</em></p>
<pre class=""language-haml""><code>&lt;p&gt;the article was published on &lt;time datetime=""2023-06-14""&gt;june 14, 2023&lt;/time&gt;.&lt;/p&gt;</code></pre>
<p><strong>result ⤵</strong></p>
<div style=""background-color: #f5f2f0; padding: 5px; border-radius: 8px; border: 1px solid #ccc;"">
<p>the article was published on <time datetime=""2023-06-14"">june 14, 2023</time>.</p>
</div>
<p>in this example, the&nbsp;<code>&lt;time&gt;</code>&nbsp;tag is used to mark up the publication date of an article, with the datetime attribute specifying the machine-readable format. this provides semantic meaning to the date and helps search engines and assistive technologies interpret it accurately.</p>
<h2 id=""4-output""><strong>4. &lt;output&gt;</strong></h2>
<p>the&nbsp;<code>&lt;output&gt;</code>&nbsp;tag is used to show the result of a calculation or an action performed by the user on a webpage. it's often used together with forms and javascript to display dynamic content.</p>
<ul>
<li>it is an inline element that can display the results of calculations or dynamic content.</li>
<li>the&nbsp;<code>&lt;output&gt;</code>&nbsp;tag requires a&nbsp;<em>for</em>&nbsp;attribute to associate it with the input element that generated the output.</li>
<li>it can also be used to display the value of form inputs or the outcome of user actions.</li>
</ul>
<p><em>for example:</em></p>
<p><iframe style=""box-sizing: inherit; border: 0px; font-style: normal; font-variant-ligatures: normal; font-variant-caps: normal; font-variant-numeric: inherit; font-variant-east-asian: inherit; font-variant-alternates: inherit; font-variant-position: inherit; font-weight: 400; font-stretch: inherit; line-height: inherit; font-family: -apple-system, blinkmacsystemfont, 'segoe ui', roboto, oxygen, ubuntu, cantarell, 'fira sans', 'droid sans', 'helvetica neue', sans-serif; font-optical-sizing: inherit; font-kerning: inherit; font-feature-settings: inherit; font-variation-settings: inherit; font-size: 16px; margin: max(3.2vmin, 24px) 0px 0px; padding: 0px; vertical-align: middle; grid-column: main-start / main-end; color: rgba(255, 255, 255, 0.75); letter-spacing: normal; orphans: 2; text-align: start; text-indent: 0px; text-transform: none; widows: 2; word-spacing: 0px; -webkit-text-stroke-width: 0px; white-space: normal; background-color: #151719; text-decoration-thickness: initial; text-decoration-style: initial; text-decoration-color: initial; width: 792px; height: 361px;"" title=""&lt;output&gt; tag"" src=""https://codepen.io/paulaxisabel/embed/poxqdqm?default-tab=html%2cresult"" height=""378"" frameborder=""no"" scrolling=""no"" allowfullscreen=""allowfullscreen"" loading=""lazy""></iframe></p>
<p>in this example, the&nbsp;<code>&lt;output&gt;</code>&nbsp;tag is used to display the result of a calculation performed based on user input. the form includes two number input fields, and when the user clicks the&nbsp;<em>calculate</em>&nbsp;button, the result of the calculation is shown in the&nbsp;<code>&lt;output&gt;</code>&nbsp;element. javascript can be used to perform the calculation and update the&nbsp;<code>&lt;output&gt;</code>&nbsp;element dynamically.</p>
<h2 id=""5-meter""><strong>5. &lt;meter&gt;</strong></h2>
<p>the&nbsp;<code>&lt;meter&gt;</code>&nbsp;tag is used to represent a measurement within a predefined range. it allows you to visually display measurements, such as progress bars or ratings, in a more meaningful way.</p>
<ul>
<li>the&nbsp;<code>&lt;meter&gt;</code>&nbsp;tag requires two attributes:&nbsp;<code>value</code>&nbsp;and&nbsp;<code>min</code>&nbsp;and&nbsp;<code>max</code>. the&nbsp;<code>value</code>&nbsp;attribute specifies the current value of the meter, while&nbsp;<code>min</code>&nbsp;and&nbsp;<code>max</code>&nbsp;define the minimum and maximum values of the range.</li>
<li>additionally, you can use the&nbsp;<code>low</code>,&nbsp;<code>high</code>, and&nbsp;<code>optimum</code>&nbsp;attributes to define thresholds for the meter. the&nbsp;<code>low</code>&nbsp;attribute represents the lower boundary of the range,&nbsp;<code>high</code>&nbsp;represents the upper boundary, and&nbsp;<code>optimum</code>&nbsp;specifies the optimal value within the range.</li>
<li>by default, browsers render the&nbsp;<code>&lt;meter&gt;</code>&nbsp;tag as a horizontal bar, with the filled portion indicating the value. however, you can customize its appearance using css to match your design requirements.</li>
<li>the&nbsp;<code>&lt;meter&gt;</code>&nbsp;tag can be useful in various scenarios, such as progress tracking, ratings, file upload limits, or any situation where you want to visually represent a value within a specified range.</li>
</ul>
<p><em>for example:</em></p>
<pre class=""language-haml""><code>&lt;meter value=""75"" min=""0"" max=""100"" low=""30"" high=""70"" optimum=""80"" style=""min-width:200px""&gt;&lt;/meter&gt;</code></pre>
<p><strong>result ⤵</strong></p>
<div style=""background-color: #f5f2f0; padding: 0 5px; border-radius: 8px; border: 1px solid #ccc;""><meter style=""min-width: 200px;"" value=""75"" min=""0"" max=""100"" low=""30"" high=""70"" optimum=""80"">80/100</meter></div>
<p>in the above example, the <code>&lt;meter&gt;</code>&nbsp;tag represents a value of 75 within a range of 0 to 100. the&nbsp;<code>low</code>&nbsp;attribute is set to 30,&nbsp;<code>high</code>&nbsp;to 70, and&nbsp;<code>optimum</code>&nbsp;to 80, allowing browsers to apply different styles based on the value's position within the range.</p>
<h2 id=""6-sub-and-sup""><strong>6. &lt;sub&gt; and &lt;sup&gt;</strong></h2>
<p>the&nbsp;<code>&lt;sub&gt;</code>&nbsp;and&nbsp;<code>&lt;sup&gt;</code>&nbsp;tags are used to represent subscript and superscript text respectively in html. they are typically used to display smaller text below or above the regular text, often used for mathematical equations, chemical formulas, footnotes, and other similar content.</p>
<ul>
<li>the&nbsp;<code>&lt;sub&gt;</code>&nbsp;tag is an inline element that is used to render subscript text. it is commonly used for mathematical or chemical formulas where certain characters or numbers need to be displayed in a smaller size below the baseline of the surrounding text.</li>
<li>the&nbsp;<code>&lt;sup&gt;</code>&nbsp;tag is also an inline element used to render superscript text. it is typically used to display characters or numbers in a smaller size above the baseline, such as in exponent notation or footnotes.</li>
<li>these tags can be nested within other inline elements, such as&nbsp;<code>&lt;span&gt;</code>&nbsp;or&nbsp;<code>&lt;p&gt;</code>, to apply subscript or superscript to specific sections of text.</li>
</ul>
<p><em>for example:</em></p>
<pre class=""language-haml""><code>&lt;p&gt;the chemical formula for water is h&lt;sub&gt;2&lt;/sub&gt;o.&lt;/p&gt;
&lt;p&gt;the pythagorean theorem states that in a right triangle, c&lt;sup&gt;2&lt;/sup&gt; = a&lt;sup&gt;2&lt;/sup&gt; + b&lt;sup&gt;2&lt;/sup&gt;.&lt;/p&gt;</code></pre>
<p><strong>result ⤵</strong></p>
<div style=""background-color: #f5f2f0; padding: 0 5px; border-radius: 8px; border: 1px solid #ccc;"">
<p>the chemical formula for water is h<sub>2</sub>o.</p>
<p>the pythagorean theorem states that in a right triangle, c<sup>2</sup> = a<sup>2</sup> + b<sup>2</sup>.</p>
</div>
<p>in the examples above, the&nbsp;<code>&lt;sub&gt;</code>&nbsp;tag is used to display subscript text, such as in chemical formulas like&nbsp;<em>h₂o</em>&nbsp;for water, while the&nbsp;<code>&lt;sup&gt;</code>&nbsp;tag is used to show superscript text, as seen in mathematical equations like&nbsp;<em>c&sup2; = a&sup2; + b&sup2;</em>&nbsp;for the pythagorean theorem. these tags are useful for representing specialized notations and formatting within the context of scientific, mathematical, or linguistic content.</p>
<h2 id=""7-cite""><strong>7. &lt;cite&gt;</strong></h2>
<p>the&nbsp;<code>&lt;cite&gt;</code>&nbsp;tag is used to mark up a reference or citation to a creative work within the content of a web page. it is typically used to indicate the title of a book, article, song, movie, or other artistic or intellectual creations.</p>
<ul>
<li>the&nbsp;<code>&lt;cite&gt;</code>&nbsp;tag is an inline element and should be used within a paragraph or block of text where the citation or reference is being made.</li>
<li>it helps provide semantic meaning and structure to the citation, allowing search engines and assistive technologies to identify and distinguish the cited content.</li>
<li>by using the&nbsp;<code>&lt;cite&gt;</code>&nbsp;tag, you can indicate that a particular piece of text represents the title or name of a work, providing clarity and context to your readers.</li>
<li>it is important to note that the&nbsp;<code>&lt;cite&gt;</code>&nbsp;tag should not be used solely for styling purposes. instead, it should be used when there is a genuine need to mark up a citation or reference within the content.</li>
</ul>
<p><em>for example:</em></p>
<pre class=""language-haml""><code>&lt;p&gt;in his famous novel, &lt;cite&gt;the great gatsby&lt;/cite&gt;, f. scott fitzgerald explores the themes of wealth, love, and the american dream.&lt;/p&gt;
&lt;p&gt;according to the research conducted by johnson et al. in their article ""&lt;cite&gt;the impact of climate change on biodiversity&lt;/cite&gt;,"" rising temperatures pose a significant threat to various species.&lt;/p&gt;</code></pre>
<p><strong>result ⤵</strong></p>
<div style=""background-color: #f5f2f0; padding: 0px 5px; border-radius: 8px; border: 1px solid #ccc;"">
<p>in his famous novel, <cite>the great gatsby</cite>, f. scott fitzgerald explores the themes of wealth, love, and the american dream.</p>
<p>according to the research conducted by johnson et al. in their article ""<cite>the impact of climate change on biodiversity</cite>,"" rising temperatures pose a significant threat to various species.</p>
</div>
<p>in the above examples, the&nbsp;<code>&lt;cite&gt;</code>&nbsp;tag is used to mark up the titles of the novel and the research article, respectively, providing a clear indication of the referenced works within the surrounding content.</p>
<h2 id=""8-kbd""><strong>8. &lt;kbd&gt;</strong></h2>
<p>the&nbsp;<code>&lt;kbd&gt;</code>&nbsp;tag is used to indicate user input, typically keyboard input, within the content of an html document. it is often used to represent keys or key combinations that can be pressed by the user.</p>
<ul>
<li>the&nbsp;<code>&lt;kbd&gt;</code>&nbsp;tag is an inline element and is used to enclose the text or content that represents the user input.</li>
<li>it is commonly styled to resemble the appearance of a physical keyboard key, using css properties such as background color, border, and font styles.</li>
<li>the&nbsp;<code>&lt;kbd&gt;</code>&nbsp;tag is particularly useful when documenting keyboard shortcuts or providing instructions for user interactions on a website or in a web application.</li>
</ul>
<p><em>for example:</em></p>
<pre class=""language-haml""><code>&lt;p&gt;to save a document, press &lt;kbd&gt;ctrl&lt;/kbd&gt; + &lt;kbd&gt;s&lt;/kbd&gt;.&lt;/p&gt;</code></pre>
<p><strong>result ⤵</strong></p>
<div style=""background-color: #f5f2f0; padding: 0px 5px; border-radius: 8px; border: 1px solid #ccc;"">to save a document, press <kbd>ctrl</kbd> + <kbd>s</kbd>.</div>
<p>this example visually represents the keyboard shortcut&nbsp;<em>ctrl + s</em>&nbsp;using the&nbsp;<code>&lt;kbd&gt;</code>&nbsp;tag, making it clear to users which keys need to be pressed to perform the action of saving a document.</p>
<h2 id=""9-bdi""><strong>9. &lt;bdi&gt;</strong></h2>
<p>the&nbsp;<code>&lt;bdi&gt;</code>&nbsp;(bi-directional isolation) tag is used to isolate a span of text that might be in a different language or have a different directionality than the surrounding text. it is particularly useful when working with multilingual content or content with mixed directionality.</p>
<ul>
<li>the&nbsp;<code>&lt;bdi&gt;</code>&nbsp;tag is an inline element that indicates to the browser that the text within it should be treated as a separate unit with its own directionality.</li>
<li>this tag is particularly useful when dealing with user-generated content, such as comments or forum posts, where users might input text in different languages or scripts.</li>
<li>the&nbsp;<code>&lt;bdi&gt;</code>&nbsp;tag can also be used in conjunction with css styling to apply specific styles to the isolated text, providing further flexibility in customization.</li>
</ul>
<p><em>for example:</em></p>
<pre class=""language-haml""><code>&lt;p&gt;&lt;bdi&gt;this text is in arabic: مرحبا&lt;/bdi&gt; , and this text is in english: hello&lt;/p&gt;</code></pre>
<p><strong>result ⤵</strong></p>
<div style=""background-color: #f5f2f0; padding: 0px 5px; border-radius: 8px; border: 1px solid #ccc;"">
<p><bdi>this text is in arabic: مرحبا</bdi> , and this text is in english: hello</p>
</div>
<p>here, the&nbsp;<code>&lt;bdi&gt;</code>&nbsp;tag is used to separate the arabic text from the english text, allowing each segment to be displayed with its correct directionality. this tag ensures that the arabic text is rendered from right to left, while the english text is rendered from left to right, providing proper visual representation for mixed-direction text.</p>
<h2 id=""10-wbr""><strong>10. &lt;wbr&gt;</strong></h2>
<p>the&nbsp;<code>&lt;wbr&gt;</code>&nbsp;tag, short for word break opportunity, is an inline element used to specify a potential line break within a word. it is particularly useful for long words or urls that may cause layout issues on narrow or small screens.</p>
<ul>
<li>the&nbsp;<code>&lt;wbr&gt;</code>&nbsp;tag is not intended to create a visible line break but rather provides a hint to the browser that a line break can occur at that point if necessary.</li>
<li>it can be used to prevent long words or urls from overflowing outside their container or causing horizontal scrolling.</li>
<li>when the browser encounters a&nbsp;<code>&lt;wbr&gt;</code>&nbsp;tag, it evaluates whether a line break is necessary at that point based on available space. if needed, it breaks the word at the specified position.</li>
<li>the&nbsp;<code>&lt;wbr&gt;</code>&nbsp;tag is especially helpful for responsive design, ensuring that content adapts well to different screen sizes and avoids layout issues caused by long, unbreakable words.</li>
</ul>
<p><em>for example:</em></p>
<pre class=""language-haml""><code>&lt;p&gt;the word &lt;wbr&gt; pneumonoultramicroscopicsilicovolcano&lt;wbr&gt;coniosis&lt;wbr&gt; is a lung disease caused by the inhalation of very fine silica dust found in volcanoes and quarries.&lt;/p&gt;</code></pre>
<p><strong>result ⤵</strong></p>
<div style=""background-color: #f5f2f0; padding: 0px 5px; border-radius: 8px; border: 1px solid #ccc;"">
<p>the word <wbr> pneumonoultramicroscopicsilicovolcano<wbr>coniosis<wbr> is a lung disease caused by the inhalation of very fine silica dust found in volcanoes and quarries.</p>
</div>
<p>in the example above, the&nbsp;<code>&lt;wbr&gt;</code>&nbsp;tag is used to break the long word&nbsp;<em>pneumonoultramicroscopicsilicovolcanoconiosis&nbsp;</em>into smaller parts to enhance readability and prevent overflow.</p>
<h2 id=""11-outgroup-tag""><strong>11. &lt;outgroup&gt; tag</strong></h2>
<p>the&nbsp;<code>&lt;optgroup&gt;</code>&nbsp;tag is used to group related options within a select dropdown element. it allows you to organize and categorize options for easier navigation and selection.</p>
<ul>
<li>the&nbsp;<code>&lt;optgroup&gt;</code>&nbsp;tag is a container element that groups related &lt;option&gt; tags within a&nbsp;<code>&lt;select&gt;</code>&nbsp;element.</li>
<li>it helps organize options by creating visual grouping or categorization within the dropdown menu.</li>
<li>the&nbsp;<code>&lt;optgroup&gt;</code>&nbsp;tag requires a label attribute, which specifies the name or title of the option group.</li>
<li>it can contain one or more&nbsp;<code>&lt;option&gt;</code>&nbsp;tags as its child elements, representing the individual options within the group.</li>
</ul>
<p><em>for example:</em></p>
<pre class=""language-haml""><code>&lt;select style=""outline: auto; padding: 5px; min-width: 200px;""&gt;
&lt;optgroup label=""asia""&gt;
&lt;option value=""ph""&gt;philippines&lt;/option&gt;
&lt;option value=""kr""&gt;south korea&lt;/option&gt;
&lt;option value=""jp""&gt;japan&lt;/option&gt;
&lt;/optgroup&gt;
&lt;optgroup label=""europe""&gt;
&lt;option value=""fr""&gt;france&lt;/option&gt;
&lt;option value=""de""&gt;germany&lt;/option&gt;
&lt;option value=""it""&gt;italy&lt;/option&gt;
&lt;/optgroup&gt;
&lt;optgroup label=""north america""&gt;
&lt;option value=""us""&gt;united states&lt;/option&gt;
&lt;option value=""ca""&gt;canada&lt;/option&gt;
&lt;option value=""mx""&gt;mexico&lt;/option&gt;
&lt;/optgroup&gt;
&lt;/select&gt;</code></pre>
<p><strong>result ⤵</strong></p>
<div style=""background-color: #f5f2f0; padding: 5px; border-radius: 8px; border: 1px solid #ccc;""><select style=""outline: auto; padding: 5px; min-width: 200px;"">
<optgroup label=""asia"">
<option value=""ph"">philippines</option>
<option value=""kr"">south korea</option>
<option value=""jp"">japan</option>
</optgroup>
<optgroup label=""europe"">
<option value=""fr"">france</option>
<option value=""de"">germany</option>
<option value=""it"">italy</option>
</optgroup>
<optgroup label=""north america"">
<option value=""us"">united states</option>
<option value=""ca"">canada</option>
<option value=""mx"">mexico</option>
</optgroup>
</select></div>
<p>in this example, the select dropdown is grouped into three sections:&nbsp;<em>asia</em>,&nbsp;<em>europe</em>, and&nbsp;<em>north america</em>. each group contains tags representing different countries within that region.</p>",11-lesser-known-html-tags-that-can-enhance-your-web-development-skills,"webdevelopment,html,beginners,frontend",published,6,1546,http://res.cloudinary.com/dipkbpinx/image/upload/v1726394933/tech-tales/cover-images/dkb4uclpli4vxyh3fegd.png
14,10 unique html elements you might not know,"<p>html offers a vast array of elements that can enhance the way you present content on the web. while most developers are familiar with standard tags like&nbsp;<code>&lt;div&gt;</code>,&nbsp;<code>&lt;p&gt;</code>, and&nbsp;<code>&lt;a&gt;</code>, there are some lesser-known elements that can be quite useful. here are five unique html elements you might not know about:</p>
<h2><a href=""https://dev.to/matin676/5-unique-html-elements-you-might-not-know-1h9i#1-raw-ltqgtltqgt-endraw-tag"" name=""1-raw-ltqgtltqgt-endraw-tag""></a>1.&nbsp;<code>&lt;q&gt;&lt;/q&gt;</code>&nbsp;tag</h2>
<p>the&nbsp;<code>&lt;q&gt;</code> tag defines a short quotation. it&rsquo;s perfect for including inline quotes within your text. this element is intended for short quotations that don't require paragraph breaks; for long quotations use the&nbsp;<a href=""https://developer.mozilla.org/en-us/docs/web/html/element/blockquote"" target=""_blank"" rel=""noopener""><code>&lt;blockquote</code>&gt;</a> element.</p>
<p>it's particularly useful in articles, blogs, or essays where referencing someone else's words within the body of your text enhances clarity and credibility. it is also most often in conjuction with <code>&lt;cite&gt;&lt;/cite&gt;</code> tags.</p>
<h3><a href=""https://dev.to/matin676/5-unique-html-elements-you-might-not-know-1h9i#heres-an-example"" name=""heres-an-example""></a>here&rsquo;s an example:</h3>
<pre class=""language-markup""><code>&lt;q&gt;hi 👋, my name is jane.&lt;/q&gt;</code></pre>
<div class=""highlight js-code-highlight"">
<h3 class=""highlight html""><a href=""https://dev.to/matin676/5-unique-html-elements-you-might-not-know-1h9i#result"" name=""result""></a>result⤵️</h3>
</div>
<div style=""padding: 5px; border: 1px solid #ccc; background-color: #f5f2f0; border-radius: 8px; width: 100%; font-size: 14px;""><q>hi 👋, my name is jane.</q></div>
<h2><a href=""https://dev.to/matin676/5-unique-html-elements-you-might-not-know-1h9i#2-raw-ltsgtltsgt-endraw-tag"" name=""2-raw-ltsgtltsgt-endraw-tag""></a>2.&nbsp;<code>&lt;s&gt;&lt;/s&gt;</code>&nbsp;tag</h2>
<p>the&nbsp;<code>&lt;s&gt;</code>&nbsp;html element renders text with a strikethrough, or a line through it. use the&nbsp;<code>&lt;s&gt;</code> element to represent things that are no longer relevant or accurate. the&nbsp;<code class=""w3-codespan"">&lt;s&gt;</code>&nbsp;tag should not be used to define deleted text in a document, use the&nbsp;<code><a href=""https://www.w3schools.com/tags/tag_del.asp"">&lt;del&gt;</a> </code>tag for that.</p>
<p>this tag is particularly effective in e-commerce, educational materials, or content revisions where you need to show what has been updated or corrected.</p>
<h3><a href=""https://dev.to/matin676/5-unique-html-elements-you-might-not-know-1h9i#heres-an-example"" name=""heres-an-example""></a>here&rsquo;s an example:</h3>
<pre class=""language-markup""><code>&lt;p&gt;old price &lt;s&gt;100&lt;/s&gt;&lt;/p&gt;
&lt;p&gt;new price 50&lt;/p&gt;</code></pre>
<div class=""highlight js-code-highlight"">
<h3 class=""highlight html""><a href=""https://dev.to/matin676/5-unique-html-elements-you-might-not-know-1h9i#result"" name=""result""></a>result⤵️</h3>
</div>
<div style=""padding: 5px; border: 1px solid #ccc; background-color: #f5f2f0; border-radius: 8px; width: 100%; font-size: 14px;"">
<p>old price: <s>$100</s></p>
<p>new price: $50</p>
</div>
<h2><a href=""https://dev.to/matin676/5-unique-html-elements-you-might-not-know-1h9i#3-raw-ltmarkgtltmarkgt-endraw-tag"" name=""3-raw-ltmarkgtltmarkgt-endraw-tag""></a>3.&nbsp;<code>&lt;mark&gt;&lt;/mark&gt;</code>&nbsp;tag</h2>
<p>the&nbsp;<strong><code>&lt;mark&gt;</code></strong>&nbsp;<a href=""https://developer.mozilla.org/en-us/docs/web/html"">html</a>&nbsp;element represents text which is&nbsp;<strong>marked</strong>&nbsp;or&nbsp;<strong>highlighted</strong> for reference or notation purposes due to the marked passage's relevance in the enclosing context.</p>
<p>use the <code>&lt;mark&gt;</code> tag when you want to draw attention to specific text within a paragraph or section, such as key points, warnings, or items that require further action. it's useful in tutorials, important notices, or highlighting search results.</p>
<p>don't use <code>&lt;mark&gt;</code>&nbsp;for syntax highlighting purposes; instead, use the&nbsp;<a href=""https://developer.mozilla.org/en-us/docs/web/html/element/span""><code>&lt;span&gt;</code></a> element with appropriate css applied to it.</p>
<h3><a href=""https://dev.to/matin676/5-unique-html-elements-you-might-not-know-1h9i#heres-an-example"" name=""heres-an-example""></a>here&rsquo;s an example:</h3>
<pre class=""language-markup""><code>&lt;p&gt;hi, you should &lt;mark&gt;follow me&lt;/mark&gt; for more amazing content. thanks!&lt;/p&gt;</code></pre>
<div class=""highlight js-code-highlight"">
<h3 class=""highlight html""><a href=""https://dev.to/matin676/5-unique-html-elements-you-might-not-know-1h9i#result"" name=""result""></a>result⤵️</h3>
</div>
<div style=""padding: 5px; border: 1px solid #ccc; background-color: #f5f2f0; border-radius: 8px; width: 100%; font-size: 14px;"">
<p>hi, you should <mark>follow me</mark> for more amazing content. thanks!</p>
</div>
<h2><a href=""https://dev.to/matin676/5-unique-html-elements-you-might-not-know-1h9i#4-raw-ltrubygtltrubygt-endraw-tag"" name=""4-raw-ltrubygtltrubygt-endraw-tag""></a>4.&nbsp;<code>&lt;sup&gt;&lt;/sup&gt;</code>&nbsp;tag</h2>
<p>the&nbsp;<strong><code>&lt;sup&gt;</code></strong>&nbsp;<a href=""https://developer.mozilla.org/en-us/docs/web/html"">html</a> element specifies inline text which is to be displayed as superscript for solely typographical reasons. superscripts are usually rendered with a raised baseline using smaller text.</p>
<p>the&nbsp;<code>&lt;sup&gt;</code> element should only be used for typographical reasons&mdash;that is, to change the position of the text to comply with typographical conventions or standards, rather than solely for presentation or appearance purposes.</p>
<h3><a href=""https://dev.to/matin676/5-unique-html-elements-you-might-not-know-1h9i#heres-an-example"" name=""heres-an-example""></a>here&rsquo;s an example:</h3>
<pre class=""language-markup""><code>&lt;p&gt;
  one of the most common equations in all of physics is &lt;var&gt;e&lt;/var&gt;=&lt;var&gt;m&lt;/var
  &gt;&lt;var&gt;c&lt;/var&gt;&lt;sup&gt;2&lt;/sup&gt;.
&lt;/p&gt;</code></pre>
<div class=""highlight js-code-highlight"">
<h3 class=""highlight html""><a href=""https://dev.to/matin676/5-unique-html-elements-you-might-not-know-1h9i#result"" name=""result""></a>result⤵️</h3>
</div>
<div style=""padding: 5px; border: 1px solid #ccc; background-color: #f5f2f0; border-radius: 8px; width: 100%; font-size: 14px;"">
<p>one of the most common equations in all of physics is <var>e</var>=<var>m</var><var>c</var><sup>2</sup>.</p>
</div>
<h2><a href=""https://dev.to/matin676/5-unique-html-elements-you-might-not-know-1h9i#5-raw-ltdetailsgtltdetailsgt-endraw-tag"" name=""5-raw-ltdetailsgtltdetailsgt-endraw-tag""></a>5.&nbsp;<code>&lt;details&gt;&lt;/details&gt;</code>&nbsp;tag</h2>
<p>the&nbsp;<code>&lt;details&gt;</code>&nbsp;html element creates a disclosure widget where information is visible only when the widget is toggled into an ""open"" state. a summary or label must be provided using the&nbsp;<code>&lt;summary&gt;</code>&nbsp;element.</p>
<p>use the <code>&lt;details&gt;</code> tag to hide content that is not immediately necessary but can be revealed if the user wants more information. it&rsquo;s ideal for faqs, additional reading, toggling descriptions, or any content where you want to manage space effectively.</p>
<p>fully standards-compliant implementations automatically apply the css&nbsp;<code><a href=""https://developer.mozilla.org/en-us/docs/web/css/display"">display</a>: list-item</code>&nbsp;to the&nbsp;<a href=""https://developer.mozilla.org/en-us/docs/web/html/element/summary""><code>&lt;summary&gt;</code></a> element. you can use this to customize its appearance further.</p>
<h3><a href=""https://dev.to/matin676/5-unique-html-elements-you-might-not-know-1h9i#heres-an-example"" name=""heres-an-example""></a>here&rsquo;s an example:</h3>
<pre class=""language-markup""><code>&lt;details open&gt;
  &lt;summary&gt;details&lt;/summary&gt;
  something small enough to escape casual notice.
&lt;/details&gt;</code></pre>
<div class=""highlight js-code-highlight"">
<h3 class=""highlight html""><a href=""https://dev.to/matin676/5-unique-html-elements-you-might-not-know-1h9i#result"" name=""result""></a>result⤵️</h3>
</div>
<div style=""padding: 5px; border: 1px solid #ccc; background-color: #f5f2f0; border-radius: 8px; width: 100%; font-size: 14px;"">
<details open="""">
<summary>details</summary>
something small enough to escape casual notice.</details>
</div>
<h2>6.&nbsp;<code>&lt;menu&gt;&lt;/menu&gt;</code> tag</h2>
<p>the&nbsp;<strong><code>&lt;menu&gt;</code></strong>&nbsp;<a href=""https://developer.mozilla.org/en-us/docs/web/html"">html</a>&nbsp;element is described in the html specification as a semantic alternative to&nbsp;<a href=""https://developer.mozilla.org/en-us/docs/web/html/element/ul""><code>&lt;ul&gt;</code></a>, but treated by browsers (and exposed through the accessibility tree) as no different than&nbsp;<a href=""https://developer.mozilla.org/en-us/docs/web/html/element/ul""><code>&lt;ul&gt;</code></a>. it represents an unordered list of items (which are represented by&nbsp;<a href=""https://developer.mozilla.org/en-us/docs/web/html/element/li""><code>&lt;li&gt;</code></a> elements).</p>
<p>you can use this tag to create a toolbar and make your group commands that a user might execute.</p>
<h3>here&rsquo;s an example:</h3>
<pre class=""language-markup""><code>&lt;div class=""news""&gt;
  &lt;a href=""#""&gt;nasa&rsquo;s webb delivers deepest infrared image of universe yet&lt;/a&gt;
  &lt;menu&gt;
    &lt;li&gt;&lt;button id=""save""&gt;save for later&lt;/button&gt;&lt;/li&gt;
    &lt;li&gt;&lt;button id=""share""&gt;share this news&lt;/button&gt;&lt;/li&gt;
  &lt;/menu&gt;
&lt;/div&gt;</code></pre>
<h3 class=""highlight html"">result⤵️</h3>
<div style=""padding: 5px; border: solid thin #ccc; background-color: #f5f2f0; border-radius: 8px; width: 100%;""><a style=""text-decoration: underline;"" href=""https://www.nasa.gov/image-article/nasas-webb-delivers-deepest-infrared-image-of-universe-yet/"" target=""_blank"" rel=""noopener"">nasa&rsquo;s webb delivers deepest infrared image of universe yet</a><menu style=""list-style: none; display: flex; padding-top: 10px; margin: 0px;"">
<li><button id=""save"" style=""background-color: rgb(115, 39, 214); color: white; border-radius: 5px; margin-right: 10px;""> &nbsp; save for later &nbsp; </button></li>
<li><button id=""share"" style=""background-color: rgb(39, 214, 173); color: white; border-radius: 5px;""> &nbsp; share this news &nbsp; </button></li>
</menu></div>
<h2>7.&nbsp;<code>&lt;aside&gt;&lt;/aside&gt;</code> tag</h2>
<p>the&nbsp;<strong><code>&lt;aside&gt;</code></strong>&nbsp;<a href=""https://developer.mozilla.org/en-us/docs/web/html"">html</a> element represents a portion of a document whose content is only indirectly related to the document's main content. asides are frequently presented as sidebars or call-out boxes.</p>
<p>you can use this element for any content not directly related to the main content of the page. it works well for displaying advertisements, related posts, promotional content, blockquotes, nav elements, and so on.</p>
<h3>here&rsquo;s an example:</h3>
<pre class=""language-markup""><code>&lt;article&gt;
  &lt;p&gt;
    the disney movie &lt;cite&gt;the little mermaid&lt;/cite&gt; was first released to
    theatres in 1989.
  &lt;/p&gt;
  &lt;aside&gt;
    &lt;p&gt;the movie earned $87 million during its initial release.&lt;/p&gt;
  &lt;/aside&gt;
  &lt;p&gt;more info about the movie&hellip;&lt;/p&gt;
&lt;/article&gt;</code></pre>
<h3 class=""highlight html"">result⤵️</h3>
<div style=""padding: 5px; border: solid thin #ccc; background-color: #f5f2f0; border-radius: 8px; width: 100%;"">
<p>the disney movie <cite>the little mermaid</cite> was first released to theatres in 1989.</p>
<aside>
<p>the movie earned $87 million during its initial release.</p>
</aside>
<p>more info about the movie&hellip;</p>
</div>
<h2>8.&nbsp;<code>&lt;search&gt;&lt;/search&gt;</code> tag</h2>
<p>the&nbsp;<strong><code>&lt;search&gt;</code></strong>&nbsp;<a href=""https://developer.mozilla.org/en-us/docs/web/html"">html</a>&nbsp;element is a container representing the parts of the document or application with form controls or other content related to performing a search or filtering operation.</p>
<p>the <code>&lt;search&gt;</code> element semantically identifies the purpose of the element's contents as having search or filtering capabilities. the search or filtering functionality can be for the website or application, the current web page or document, or the entire internet or subsection thereof.</p>
<p>the tag helps provide a better user experience on mobile devices with search-optimized keyboards.</p>
<h3>here&rsquo;s an example:</h3>
<pre class=""language-markup""><code>&lt;search&gt;
    &lt;form action=""./search/""&gt;
      &lt;label for=""movie""&gt;find a movie&lt;/label&gt;
      &lt;input type=""search"" id=""movie"" name=""q"" /&gt;
      &lt;button type=""submit""&gt;search&lt;/button&gt;
    &lt;/form&gt;
  &lt;/search&gt;</code></pre>
<h3 class=""highlight html"">result⤵️</h3>
<div style=""padding: 5px; border: solid thin #ccc; background-color: #f5f2f0; border-radius: 8px; width: 100%;""><form style=""padding: 5px;"" action=""/search/""><label style=""font-weight: 600; display: block;"" for=""movie"">find a blog</label> <input id=""movie"" style=""border: solid thin; padding: 0px 5px; outline: none; border-radius: 5px;"" name=""search"" type=""search"" placeholder=""type blog topic here""> <button style=""border: solid thin; padding: 0px 6px; border-radius: 5px;"" title=""search"" type=""submit""> search </button></form></div>
<h2>9.&nbsp;<code>&lt;datalist&gt;&lt;/datalist&gt;</code> tag</h2>
<p>you might be familiar with the&nbsp;<code>select</code>&nbsp;element that lets you provide users with a bunch of options to select from. a similar element is the&nbsp;<code>datalist</code> element.</p>
<p>the only difference between them is the datalist element provides suggestions instead of a finite set of options. users can also type in their own input if none of the suggestions match their requirements, whereas when using the select element, users must pick from the list of options in the dropdown.</p>
<p>you can use&nbsp;<code>&lt;datalist&gt;</code>&nbsp;with the&nbsp;<code>input</code>&nbsp;element so the user can type anything they want. then if it matches the values in the datalist, the user can select that value.</p>
<p>in order to link the input element with the datalist, you'll need to use a&nbsp;<code>list</code>&nbsp;attribute on the input element. the value of the list attribute must be the&nbsp;<code>id</code> of the datalist.&nbsp;</p>
<div style=""padding: 5px; border: solid thin #ef4444; background-color: #fee2e2; border-radius: 8px; width: 100%; font-size: 14px;"">
<p>⚠ data list has limited support availability and does not work in most widely used browsers. <a style=""text-decoration: underline;"" href=""https://developer.mozilla.org/en-us/docs/web/html/element/datalist#browser_compatibility"" target=""_blank"" rel=""noopener"">see full compatibility</a></p>
</div>
<h3>here&rsquo;s an example:</h3>
<pre class=""language-markup""><code>&lt;label for=""ice-cream-choice""&gt;choose a flavor:&lt;/label&gt;
&lt;input list=""ice-cream-flavors"" id=""ice-cream-choice"" name=""ice-cream-choice"" /&gt;
&lt;datalist id=""ice-cream-flavors""&gt;
  &lt;option value=""chocolate""&gt;&lt;/option&gt;
  &lt;option value=""coconut""&gt;&lt;/option&gt;
  &lt;option value=""mint""&gt;&lt;/option&gt;
  &lt;option value=""strawberry""&gt;&lt;/option&gt;
  &lt;option value=""vanilla""&gt;&lt;/option&gt;
&lt;/datalist&gt;</code></pre>
<h3 class=""highlight html"">result⤵️</h3>
<div style=""padding: 5px; border: solid thin #ccc; background-color: #f5f0f1; border-radius: 8px; width: 100%;""><label style=""display: block; font-weight: 600;"" for=""ice-cream-choice"">choose a flavor:</label> <input id=""ice-cream-choice"" style=""border: thin solid; margin-bottom: 10px; padding: 0px 5px;"" list=""ice-cream-flavors"" name=""ice-cream-choice"" type=""text"">
<datalist id=""ice-cream-flavors"">
<option value=""chocolate""></option>
<option value=""coconut""></option>
<option value=""mint""></option>
<option value=""strawberry""></option>
<option value=""vanilla""></option>
</datalist>
</div>
<h2>10. <code>&lt;optgroup&gt;&lt;/optgroup&gt;</code> tag</h2>
<p>the <code>&lt;optgroup&gt;</code> tag is used to group related options within a <code>&lt;select&gt;</code> dropdown list. this makes the list easier to navigate, especially when there are many options, by categorizing them under different headings.</p>
<h4>when to use:</h4>
<ul>
<li>to organize options in a long dropdown menu.</li>
<li>to enhance the user experience by logically grouping related options.</li>
</ul>
<h3>here&rsquo;s an example:</h3>
<pre class=""language-markup""><code> &lt;div&gt;
        &lt;label for=""cars""&gt;choose a car:&lt;/label&gt;
        &lt;select id=""cars"" name=""cars""&gt;
          &lt;optgroup label=""german cars""&gt;
            &lt;option value=""bmw""&gt;bmw&lt;/option&gt;
            &lt;option value=""audi""&gt;audi&lt;/option&gt;
            &lt;option value=""mercedes""&gt;mercedes-benz&lt;/option&gt;
          &lt;/optgroup&gt;
          &lt;optgroup label=""japanese cars""&gt;
            &lt;option value=""toyota""&gt;toyota&lt;/option&gt;
            &lt;option value=""honda""&gt;honda&lt;/option&gt;
            &lt;option value=""nissan""&gt;nissan&lt;/option&gt;
          &lt;/optgroup&gt;
        &lt;/select&gt;
      &lt;/div&gt;</code></pre>
<h3 class=""highlight html"">result⤵️</h3>
<div style=""padding: 5px; border: solid thin #ccc; background-color: #f5f0f1; border-radius: 8px; width: 100%;""><label style=""display: block; font-weight: 600;"" for=""cars"">choose a car:</label><select id=""cars"" style=""border: thin solid; margin-bottom: 10px;"" name=""cars"">
<optgroup label=""german cars"">
<option value=""bmw"">bmw</option>
<option value=""audi"">audi</option>
<option value=""mercedes"">mercedes-benz</option>
</optgroup>
<optgroup label=""japanese cars"">
<option value=""toyota"">toyota</option>
<option value=""honda"">honda</option>
<option value=""nissan"">nissan</option>
</optgroup>
</select></div>
<p>these unique html elements can be extremely helpful in specific scenarios, enhancing the semantic richness and functionality of your web content. next time you&rsquo;re building a webpage, consider incorporating these tags to improve the user experience and accessibility of your site.</p>",10-unique-html-elements-you-might-not-know,"webdev,html,frontend,beginners",published,4,1248,http://res.cloudinary.com/dipkbpinx/image/upload/v1725021883/tech-tales/cover-images/eej2pho2vl63y8py5i5d.png
13,opinion article: how will ai video generation affect crime investigation?,"<p>&nbsp;artificial intelligence (ai) in criminal justice has been pervasive for some time and will only grow in the future. ai&rsquo;s impact on the criminal justice system in 2023 is immense, with significant influence on crime monitoring and prevention, judicial and correctional systems, and many other criminal justice practices. it&rsquo;s not difficult to spot ai&rsquo;s impact on public safety and criminal justice, from traffic safety systems to crime forecasts, criminal pattern recognition, and more. even those who never expect to encounter the system are impacted by the use of ai in criminal justice in some fashion.</p>
<blockquote>
<p>the use of ai in criminal justice is here to stay. as per a survey of criminal justice professionals, 48% believe ai technology will make policing more effective. only 32% of criminal justice professionals believe ai can reduce racial bias in policing.</p>
</blockquote>
<p>while ai has many fundamental roles in the criminal justice system, one major concern why i am writing this article is the ability of ai to generate videos. the ability of ai models such as sora to generate highly realistic videos poses a significant challenge to criminal justice investigations.</p>
<h2>counterfeit evidence</h2>
<p>this technology can potentially be used to create false evidence, implicate innocent individuals, or exonerate the guilty. ai videos and deepfakes are also getting super realistic, which poses a significant challenge for law enforcement to identify between real and fake videos. this will potentially increase the time taken to process legal evidence.</p>
<p>criminals may use ai to generate fake evidence, such as photos or videos, to discredit legitimate investigations or manipulate legal proceedings. this could include creating counterfeit crime scene images or doctoring surveillance footage to obstruct justice.</p>
<p>while other ai models can also help analyze video evidence to identify patterns that humans might miss, this will also increase the complexity of investigations. ais are also known to be biased and highly inaccurate, which is especially crucial in a case scenario where an erroneous judgment might deem innocent individuals guilty.</p>
<p>determining the authenticity of video evidence will require specialized expertise and resources, making investigations more complex and time-consuming.</p>
<h2>identity theft</h2>
<p>ai videos will make it easier for criminals to impersonate others convincingly. they can create fake identification documents or social media profiles, posing as law enforcement officers or even victims of crimes. this can lead to confusion, and false accusations, and undermine the credibility of genuine law enforcement efforts.</p>
<p>detecting ai-generated materials is a challenge to law enforcement, which implies an increase in costs and time taken to solve crimes. attempts to regulate who can use ai will also be futile since such attempts can be deemed unlawful and discriminatory.</p>
<h2>convincing the jury</h2>
<p>the use of ai in criminal law is especially problematic due to the potential consequences of making liberty-depriving decisions based on an algorithm. society may trust these algorithms too much and make decisions based on their predictions, even if the technology may not be as &ldquo;intelligent&rdquo; as it appears.</p>
<p>there is a significant concern that such videos could easily sway the jury's opinion, effectively clouding their decisions. previous highly charged emotional cases that have had extensive media coverage have always resulted in jury bias toward the defendants, even though the evidence might be fake or hearsay.</p>
<p><img src=""https://elblog.pl/wp-content/uploads/2024/04/compressed_img-gi4n4nx5piitm1v4q9tt5c3i.png"" alt=""ai-jury"" width=""1280"" height=""731""></p>
<div class=""article-main__content"" data-test-id=""publishing-text-block"">
<p><span class="""">the rapid evolution of artificial intelligence presents both promising opportunities and daunting challenges for law enforcement agencies. to effectively navigate this dynamic landscape, several key recommendations emerge:</span></p>
</div>
<div class=""article-main__content"" data-test-id=""publishing-text-block"">
<ul>
<li><span class=""font-[700]"" style=""color: #169179;"">&nbsp;invest in ai training</span><span class="""">: law enforcement personnel must receive comprehensive training on ai technologies, their applications, and potential risks. this training should encompass both technical aspects and ethical considerations, empowering officers to make informed decisions when handling ai-generated content.</span></li>
<li><span class=""font-[700]"" style=""color: #169179;"">collaboration with technology companies</span><span class=""""><span style=""color: #169179;"">:</span> establishing partnerships with technology companies and researchers is vital. these collaborations can foster the development of ai tools specifically designed to detect and combat ai-generated threats, such as deepfakes and simulated csam.</span></li>
<li><span class=""font-[700]"" style=""color: #169179;"">legislative and policy frameworks</span><span class=""""><span style=""color: #169179;"">:</span> policymakers should enact clear and robust laws and regulations that criminalize the creation and distribution of ai-generated malicious content. these frameworks should also address the ethical implications and privacy concerns associated with ai in law enforcement.</span></li>
<li><span class=""font-[700]"" style=""color: #169179;"">multidisciplinary approach</span><span class=""""><span style=""color: #169179;"">:</span> law enforcement agencies, technology experts, legislators, and ethical advisors must work collaboratively to strike a balance between preventing ai misuse and encouraging legitimate ai applications.</span></li>
<li><span class=""font-[700]"" style=""color: #169179;"">public awareness and education</span><span class=""""><span style=""color: #169179;"">:</span> raising public awareness about the risks associated with ai-generated content is essential. educational campaigns can help individuals identify and report such content effectively.</span></li>
</ul>
<p>in summary, the ability to generate realistic videos using ai is a double-edged sword. these videos could help frame innocent individuals and also increase the complexity of crime investigations. when it gets difficult to differentiate what's real from fiction, innocent individuals will get hurt.</p>
<blockquote>
<p id=""post-title-t3_1269thc"" class=""font-semibold text-neutral-content-strong m-0 text-18 xs:text-24  mb-xs px-md xs:px-0 xs:mb-md "">at what point will deep fakes, ai video, and photo editing make photo and video evidence completely obsolete in a court of law? this was a sci-fi plot point in iain banks's culture series novel &ldquo;the player of games,&rdquo; published in&nbsp;<em>1988.</em></p>
</blockquote>
<p>&nbsp;</p>
</div>",opnion-article-how-will-ai-video-generation-affect-crime-investigation-,"ai,aivideos,justice,crime",published,9,2267,http://res.cloudinary.com/dipkbpinx/image/upload/v1725019876/tech-tales/cover-images/woz26zfvvlscaky95y7u.jpg
59,best practices on variable naming in javascript,"<p>in the realm of javascript, crafting clean, readable, and maintainable code is paramount. one fundamental aspect that significantly contributes to code quality is effective variable naming. this blog delves into 12 best practices for variable naming in javascript, ensuring your code is not only functional but also comprehensible and maintainable.</p>
<h2>1. embrace let and const: the modern approach</h2>
<p>gone are the days of relying solely on the <code>var</code> keyword. es6 introduced <code>let</code> and <code>const</code>, offering superior scoping and predictability. these keywords are the preferred choices for variable declaration in modern javascript.</p>
<ul>
<li><strong>let</strong>: use <code>let</code> for variables whose values might change throughout your code. this signifies mutability.</li>
<li><strong>const</strong>: employ <code>const</code> for variables that represent constant values, ensuring their immutability. favor <code>const</code> by default and resort to <code>let</code> only when you need to reassign a variable's value.</li>
</ul>
<h2>2. prioritize clarity and descriptiveness</h2>
<p>the primary goal of variable naming is to convey the variable's purpose and content with absolute clarity. choose names that self-document the data they store.</p>
<ul>
<li><strong>✅ good</strong>: <code>firstname</code>, <code>totalprice</code>, <code>productdescription</code>.</li>
<li><strong>🔴 bad</strong>: <code>x</code>, <code>a</code>, <code>temp</code>.</li>
</ul>
<h2>3. meaningful words: avoiding ambiguity</h2>
<p>refrain from using abbreviations, overly technical jargon, or obscure terms that could confuse fellow developers. opt for clear and concise words.</p>
<ul>
<li><strong>✅ good</strong>: <code>customername</code>, <code>orderstatus</code>, <code>employeerecord</code>.</li>
<li><strong>🔴 bad</strong>: <code>custnm</code>, <code>ordst</code>, <code>emprec</code>.</li>
</ul>
<h2>4. camel case convention: the javascript standard</h2>
<p>camel case is the widely accepted naming convention for variables in javascript. this practice ensures consistency and improves readability.</p>
<ul>
<li><strong>✅ good</strong>: <code>fullname</code>, <code>dateofbirth</code>, <code>shippingaddress</code>.</li>
<li><strong>🔴 bad</strong>: <code>full_name</code>, <code>dateofbirth</code>, <code>shipping_address</code>.</li>
</ul>
<h2>5. uppercase constants: immutable declarations</h2>
<p>variables representing constant values that should never be modified should be declared in uppercase, with underscores separating words. this convention clearly distinguishes them from regular variables.</p>
<ul>
<li><strong>✅ good</strong>: <code>tax_rate</code>, <code>api_key</code>, <code>max_attempts</code>.</li>
<li><strong>🔴 bad</strong>: <code>taxrate</code>, <code>apikey</code>, <code>maxattempts</code>.</li>
</ul>
<h2>6. beyond single letters: descriptive naming</h2>
<p>while single-letter variables might be tempting for quick iterations, they generally hinder readability. use descriptive names, especially for complex variables.</p>
<ul>
<li><strong>✅ good</strong>: <code>counter</code>, <code>index</code>, <code>sum</code>.</li>
<li><strong>🔴 bad (except for specific cases)</strong>:&nbsp;<code>i</code>,&nbsp;<code>j</code>,&nbsp;<code>k</code>.</li>
</ul>
<h2>7. plurality for arrays: indicating collections</h2>
<p>if your variable holds an array, use a plural name to signify that it contains multiple elements. this convention enhances clarity and reflects the data structure accurately.</p>
<ul>
<li><strong>✅ good</strong>:&nbsp;<code>productnames</code>,&nbsp;<code>orderitems</code>,&nbsp;<code>employeelist</code>.</li>
<li><strong>🔴 bad</strong>:&nbsp;<code>productname</code>,&nbsp;<code>orderitem</code>,&nbsp;<code>employee</code>.</li>
</ul>
<h2>8. boolean clarity: prefixes for truth values</h2>
<p>for boolean variables, consider using prefixes like&nbsp;<code>is</code>,&nbsp;<code>has</code>, or&nbsp;<code>can</code>&nbsp;to make their purpose transparent. this convention improves code comprehension.</p>
<ul>
<li><strong>✅ good</strong>:&nbsp;<code>isactive</code>,&nbsp;<code>hasdiscount</code>,&nbsp;<code>canedit</code>,&nbsp;<code>isloggedin</code>.</li>
<li><strong>🔴 bad</strong>:&nbsp;<code>active</code>,&nbsp;<code>discountapplied</code>,&nbsp;<code>editenabled</code>,&nbsp;<code>loggedin</code>.</li>
</ul>
<h2>9. scope-aware naming: indicating variable boundaries</h2>
<p>when working with variables within specific scopes (e.g., global, local, module), incorporate prefixes or suffixes to indicate their scope. this aids in navigating complex codebases.</p>
<ul>
<li><strong>✅ good</strong>: <code>globalcounter</code>, <code>localindex</code>, <code>modulespecificconfig</code>.</li>
<li><strong>🔴 bad</strong>: <code>counter</code>, <code>index</code>, <code>config</code>.</li>
</ul>
<h2>10. declaration elegance: one variable per line</h2>
<p>it is best practice to declare each variable on its own line for enhanced readability and maintainability. this improves code organization and reduces potential errors.</p>
<ul>
<li><strong>✅ good</strong>:
<pre class=""language-javascript""><code>let isactive = false,
let canedit = true,</code></pre>
</li>
<li><strong>🔴 bad</strong>:
<pre class=""language-javascript""><code>
    let isactive = false, canedit = true;
    </code></pre>
</li>
</ul>
<h2>conclusion</h2>
<p>by consistently following these variable naming best practices in javascript, you can create code that is not only functional but also elegant, readable, and easily maintainable. this not only benefits your own productivity but also improves collaboration within your team. remember, investing in well-structured code pays dividends in the long run.</p>",best-practices-on-variable-naming-in-javascript,"bestpractices,javascript,typescript,beginners",published,0,288,http://res.cloudinary.com/dipkbpinx/image/upload/v1729798081/tech-tales/cover-images/mfwulmwqff0uxojc3sra.jpg
12,tips and tricks for mastering typography,"<p>as a developer, you either accept that you suck at typography, or choose to live your life watching a random guy explain how to choose typography on youtube. i have seen numerous videos and spent several hours watching tutorials on how to choose fonts.</p>
<p>various <strong>youtubers </strong>have made videos explaining the self-proclaimed rules of choosing typefaces. however, watching these videos will not help you choose the best fonts, rather leave you more confused and out of options. the choice of the font really depends on the style of the website, the target audience and the intended message.</p>
<p>however, it is increasingly difficult to find good-looking free fonts. sans based fonts are most go to fonts for the modern websites, although some designers think the system fonts are a better alternative due to their stability.</p>
<p><img style=""border-width: 2px; border-style: groove;"" src=""https://blog.shillingtoneducation.com/wp-content/uploads/2019/09/typography_anatomy.jpg"" alt=""typography-choices"" width=""844"" height=""450""></p>
<p>typography is everywhere we look. it's in the books we read, on the websites we visit, even in everyday life&mdash;on street signs, bumper stickers, and product packaging.&nbsp;but what exactly is typography? simply put,<strong>&nbsp;typography is the style or appearance of text</strong>. it can also refer to the art of working with text&mdash;something you probably do all the time if you create documents or other projects for work, school, or yourself.</p>
<p class=""chevron"">watch the video below to learn more about typography.</p>
<div class=""video-embed""><iframe style=""width: 794px; height: 400px;"" src=""https://www.youtube.com/embed/sbyzhoiyfx0?rel=0&amp;showinfo=0"" width=""560"" height=""350"" frameborder=""0"" allowfullscreen=""allowfullscreen""></iframe></div>
<h3>common types of fonts</h3>
<p>typography can be an intimidating subject, but it doesn't have to be. you only need to know a little to make a big difference in the stuff you do every day. so let's get started. first, some<strong>&nbsp;common types of fonts</strong>&nbsp;and what you need to know about them.</p>
<h4>serif fonts</h4>
<p>serif fonts have little strokes called&nbsp;<strong>serifs</strong>&nbsp;attached to the main part of the letter.</p>
<div class=""centerimage""><img src=""https://media.gcflearnfree.org/content/57a0a50b8d7fb205008d1d0a_08_02_2016/serif.png"" alt=""example of a serif font"" width=""800"" height=""450"" loading=""lazy""></div>
<p>because of their classic look, they're a good choice for more&nbsp;<strong>traditional projects</strong>. they're also common in print publications, like magazines and newspapers.</p>
<div class=""centerimage""><img src=""https://media.gcflearnfree.org/content/57a0a50b8d7fb205008d1d0a_08_02_2016/typo_serif_magazine.png"" alt=""serif fonts in a magazine"" width=""800"" height=""450"" loading=""lazy""></div>
<h4>sans serif fonts</h4>
<p>sans serif fonts don't have that extra stroke&mdash;hence the name, which is french for&nbsp;<strong>without serif</strong>.</p>
<div class=""centerimage""><img src=""https://media.gcflearnfree.org/content/57a0a50b8d7fb205008d1d0a_08_02_2016/typo_sans_beret.png"" alt=""sans serif fonts"" width=""807"" height=""454"" loading=""lazy""></div>
<p>this style is considered more<strong>&nbsp;clean and modern&nbsp;</strong>than serif fonts. also, it tends to be easier to read on computer screens, including smartphones and tablets.</p>
<div class=""centerimage""><img src=""https://media.gcflearnfree.org/content/57a0a50b8d7fb205008d1d0a_08_02_2016/typo_sans_web.png"" alt=""sans serif fonts on a website"" width=""804"" height=""452"" loading=""lazy""></div>
<h4>display fonts</h4>
<p>display fonts come in many&nbsp;<strong>different styles</strong>, like script, blackletter, all caps, and just plain fancy.</p>
<div class=""centerimage""><img src=""https://media.gcflearnfree.org/content/57a0a50b8d7fb205008d1d0a_08_02_2016/typo_display.png"" alt=""display fonts"" width=""800"" height=""450"" loading=""lazy""></div>
<p>because of their decorative nature, display fonts are best for<strong>&nbsp;small amounts of text</strong>, like titles and headers and more graphic-heavy designs.</p>
<div class=""centerimage""><img src=""https://media.gcflearnfree.org/content/57a0a50b8d7fb205008d1d0a_08_02_2016/typo_display_example.png"" alt=""using display fonts"" width=""800"" height=""450"" loading=""lazy""></div>
<h3>choosing a font</h3>
<p>in a way, fonts have their own language. they all have something to say beyond the words on the page. they can come across as casual or neutral, exotic or graphic. that's why it's important to&nbsp;<strong>think about your message</strong>, then choose a font that fits.</p>
<div class=""centerimage""><img src=""https://media.gcflearnfree.org/content/57a0a50b8d7fb205008d1d0a_08_02_2016/font_language.png"" alt=""choosing a font style"" width=""800"" height=""450"" loading=""lazy""></div>
<h4>fonts to avoid</h4>
<p>some fonts come with&nbsp;<strong>extra baggage</strong>, including comic sans, curlz, and papyrus. there's nothing particularly wrong with these fonts&mdash;they just have a certain reputation for being&nbsp;<strong>outdated</strong>&nbsp;and&nbsp;<strong>overused</strong>.</p>
<div class=""centerimage""><img src=""https://media.gcflearnfree.org/content/57a0a50b8d7fb205008d1d0a_08_02_2016/typo_comic.png"" alt=""commonly overused fonts"" width=""800"" height=""450"" loading=""lazy""></div>
<p>if you find yourself tempted by them, think twice and consider using something else. there are many fonts with a similar look and feel that are less likely to detract from your message.</p>
<h4>combining fonts</h4>
<p>when deciding which fonts to use,&nbsp;<strong>less is more</strong>. it's best to&nbsp;<strong>limit yourself to one or two per project</strong>. if you need more contrast, try repeating one of your fonts in a different size, weight, or style. this trick is practically foolproof for creating interesting combinations that work.</p>
<div class=""centerimage""><img src=""https://media.gcflearnfree.org/content/57a0a50b8d7fb205008d1d0a_08_02_2016/typo_combine.png"" alt=""combining different fonts"" width=""800"" height=""450"" loading=""lazy""></div>
<p>you've probably heard that<strong>&nbsp;opposites attract</strong>. the same is true for fonts. don't be afraid to<strong>&nbsp;combine font styles</strong>&nbsp;that are&nbsp;<strong>different but complementary</strong>, like sans serif with serif, short with tall, or decorative with simple. this can be challenging at first, but don't despair. look to other designs for inspiration, and soon you'll get the hang of it.</p>
<div class=""centerimage""><img src=""https://media.gcflearnfree.org/content/57a0a50b8d7fb205008d1d0a_08_02_2016/typo_combinations.png"" alt=""common font combinations"" width=""800"" height=""450"" loading=""lazy""></div>
<h3>other important terms</h3>
<p>maybe you've heard terms like&nbsp;<strong>kerning</strong>,&nbsp;<strong>leading</strong>,&nbsp;<strong>tracking</strong>, and&nbsp;<strong>hierarchy</strong>. for those with more experience, these concepts are essential for creating professional-looking designs. as a beginner, you don't need to know&nbsp;<em>everything</em>&nbsp;about these terms&mdash;just enough to inform your work and help you talk about design with more confidence.</p>
<div class=""centerimage""><img src=""https://media.gcflearnfree.org/content/57a0a50b8d7fb205008d1d0a_08_02_2016/typo_talk.png"" alt=""talking about design to a crowd"" width=""800"" height=""450"" loading=""lazy""></div>
<h4>hierarchy</h4>
<p>hierarchy is used to<strong>&nbsp;guide the reader's eye&nbsp;</strong>to whatever is most important. in other words, it shows them where to begin and where to go next using&nbsp;<strong>different levels of emphasis</strong>.</p>
<div class=""centerimage""><img src=""https://media.gcflearnfree.org/content/57a0a50b8d7fb205008d1d0a_08_02_2016/typo_hierarchy.png"" alt=""text hierarchy"" width=""800"" height=""450"" loading=""lazy""></div>
<p>establishing hierarchy is simple: just decide which elements you want the reader to notice first, then make them&nbsp;<strong>stand out</strong>. high-level items are usually larger, bolder, or different in some way. remember to keep it simple and stick to just a few complementary styles.</p>
<div class=""centerimage""><img src=""https://media.gcflearnfree.org/content/57a0a50b8d7fb205008d1d0a_08_02_2016/typo_hierarchy_card.png"" alt=""using hierarchy on a business card"" width=""800"" height=""450"" loading=""lazy""></div>
<h4>leading</h4>
<p>leading (rhymes with wedding) is<strong>&nbsp;the space between lines of text</strong>, also known as<strong>&nbsp;line spacing</strong>.</p>
<div class=""centerimage""><img src=""https://media.gcflearnfree.org/content/57a0a50b8d7fb205008d1d0a_08_02_2016/typo_leading.png"" alt=""leading, or line spacing"" width=""800"" height=""450"" loading=""lazy""></div>
<p>if you're not sure how much line spacing to use, don't fret&mdash;the default is usually fine. the goal is to&nbsp;<strong>make your text as comfortable to read as possible</strong>. too much or too little spacing, as in the example below, can make things unpleasant for the reader.</p>
<div class=""centerimage""><img src=""https://media.gcflearnfree.org/content/57a0a50b8d7fb205008d1d0a_08_02_2016/typo_leading_example.png"" alt=""too much or little line spacing makes the text hard to read"" width=""800"" height=""450"" loading=""lazy""></div>
<h4>tracking</h4>
<p>tracking is the&nbsp;<strong>overall space between characters</strong>, sometimes called&nbsp;<strong>character spacing</strong>. most programs let you condense or expand this depending on your needs.</p>
<div class=""centerimage""><img src=""https://media.gcflearnfree.org/content/57a0a50b8d7fb205008d1d0a_08_02_2016/tracking.png"" alt=""text tracking, or character spacing"" width=""800"" height=""450"" loading=""lazy""></div>
<p>in some designs, you might&nbsp;<strong>adjust your tracking</strong>&nbsp;to create a certain artistic effect. it can also help you fix fonts that are poorly spaced to begin with.</p>
<div class=""centerimage""><img src=""https://media.gcflearnfree.org/content/57a0a50b8d7fb205008d1d0a_08_02_2016/typo_tracking_example.png"" alt=""adjusting tracking"" width=""800"" height=""450"" loading=""lazy""></div>
<h4>kerning</h4>
<p>kerning is the<strong>&nbsp;space between specific characters</strong>. unlike tracking, it varies over the course of the word because each letter fits together differently.</p>
<div class=""centerimage""><img src=""https://media.gcflearnfree.org/content/57a0a50b8d7fb205008d1d0a_08_02_2016/typo_kerning.png"" alt=""example of kerning"" width=""800"" height=""450"" loading=""lazy""></div>
<p>some fonts have what we call&nbsp;<strong>bad kerning</strong>, making certain letters look improperly spaced. if a font you're using has bad kerning, it's best to cut your losses and choose something else.</p>
<div class=""centerimage""><img src=""https://media.gcflearnfree.org/content/57a0a50b8d7fb205008d1d0a_08_02_2016/typo_kerning_bad.png"" alt=""example of bad font kerning"" width=""800"" height=""450"" loading=""lazy""></div>
<h3>putting it all together</h3>
<p>well-crafted text can mean the difference between something ordinary and something extraordinary&mdash;even if you're just getting started with design. all it takes is an interest in typography and you'll start to notice more, see more, and be able to do more in your own work.</p>
<div class=""centerimage""><img src=""https://media.gcflearnfree.org/content/57a0a50b8d7fb205008d1d0a_08_02_2016/typo_conclusion.png"" alt=""example of different projects"" width=""800"" height=""450"" loading=""lazy""></div>
<p>ultimately, your ideal font choice might be like a barber. you need to die with it. here is my current font list:</p>
<pre><em><strong>futura, </strong></em><em><strong>century,&nbsp; </strong></em><em><strong>garamond, </strong></em><em><strong>montserrat, </strong></em><em><strong>quattrocento, </strong></em><em><strong>noto sans, </strong></em><em><strong>poppins, </strong></em><em><strong>satoshi, </strong></em><em><strong>inter, </strong></em><em><strong>public sans and </strong></em><strong><em>barlow</em></strong></pre>
<p>let me know what your current font list choice looks like, maybe i could be inspired!</p>",tips-and-tricks-for-mastering-typography,"typography,fonts,front-end,web-dev",published,8,3281,http://res.cloudinary.com/dipkbpinx/image/upload/v1725021057/tech-tales/cover-images/oabgko0pkqwsleijgwlh.jpg
32,how to secure your website with google recaptcha,"<p>if you have contact, registration or other forms on your website it's important to try and ensure that they are only used by humans. robots (or 'bots') search out websites with unprotected forms - to either spam the site owner, or worse, potentially send spam to contacts registered with the site.</p>
<p>google recaptcha can help to stop this - either via a challenge that a human needs to complete (recaptcha v2) or by monitoring the use of the site to establish human usage by score (recaptcha v3). v3 recaptcha is potentially less invasive as a result of its score based system - most valid human users will never see a challenge.</p>
<p>for this tutorial, i am going to focus on recaptcha v3, which works in the background. to get started, head over to <a title=""google-cloud"" href=""https://cloud.google.com/recaptcha/docs/create-key-website"" target=""_blank"" rel=""noopener"">google cloud</a> and create a recaptcha key for your site and make sure to choose v3.</p>
<p><img src=""https://res.cloudinary.com/dipkbpinx/image/upload/v1730831823/tech-tales/blog-images/veyspodw8p9fm25lran2.png""></p>
<p>&nbsp;</p>
<p>google gives you a site key that should be included in your website and client secret that you can use to verify users. create a .env file and add the keys.</p>
<pre class=""language-javascript""><code>//.env
next_public_google_recaptcha_site_key=""your_site_key""
google_recaptcha_client_secret=""your_client_secret""</code></pre>
<p>note that i named the site key using next_public since browsers require access to this key. however, i do not know if this is the best practice. to get started with recaptcha if you are using react or nextjs, you need to install <a title=""react-google-recaptcha"" href=""https://www.npmjs.com/package/react-google-recaptcha-v3"" target=""_blank"" rel=""noopener"">react-google-recaptcha-v3.&nbsp;</a></p>
<pre class=""language-javascript""><code>npm i react-google-recaptcha-v3</code></pre>
<p>for this project, i wanted to secure my login, registration and password reset pages to ensure they do not allow bot traffic. therefore, i added the <span class=""pl-v"">googlerecaptchaprovider in the layout of my auth pages.</span></p>
<pre class=""language-javascript""><code>//create a google context provider in .providers/google
""use client"";
import { googlerecaptchaprovider } from ""react-google-recaptcha-v3"";
export function googlecontextproviders({ children }) {
  return (
      &lt;googlerecaptchaprovider
        recaptchakey={process.env.next_public_google_recaptcha_site_key}&gt;
        {children}
      &lt;/googlerecaptchaprovider&gt;
  );
}
//add the provider to the auth layout
import ""../globals.css"";
import { googlecontextproviders } from ""@/providers/google"";
export default function rootlayout({ children }) {
  return (
    &lt;html lang=""en""&gt;
      &lt;body&gt;
        &lt;main&gt;
          &lt;googlecontextproviders&gt;{children}&lt;/googlecontextproviders&gt;
        &lt;/main&gt;
      &lt;/body&gt;
    &lt;/html&gt;
  );
}
</code></pre>
<p>after adding the context provider in our routes, we need to initialize google recaptcha in forms that we want to protect. we do this by setting a token state that is submitted when the form is filled, and then verifying the score. here is a sample login page:</p>
<pre class=""language-javascript""><code>""use client"";
import { usestate } from ""react"";
import toast from ""react-hot-toast"";
import { usegooglelogin } from ""@react-oauth/google"";
import { validaterecaptcha } from ""@/lib/actions"";
export default function loginpage() {
  const [token, settoken] = usestate(false);
  const [formdata, setformdata] = usestate({
            email: """",
            password: """",
  });
  async function handlesubmit(e) {
    e.preventdefault();
    if (!token) {
      toast.error(""kindly complete the recaptcha challenge"");
      return;
    }
    const isvalid = await validaterecaptcha(token);
    if (isvalid) {
      handlelogin(formdata);
    } else {
      toast.error(""recaptcha validation failed"");
    }
 }
  return (
    &lt;form  onsubmit={handlesubmit}&gt;
          &lt;/div&gt;
              {/* add your inputs here */}
          &lt;/div&gt;
            &lt;googlerecaptcha onverify={(token) =&gt; {  settoken(token) }}  /&gt;
            &lt;button type=""submit"" title=""login""&gt;
             login
            &lt;/button&gt;  
    &lt;/form&gt;
  );
}
</code></pre>
<p>next we need to create a helper function that will be called to validate the recaptcha challenge. since v3 works in the background, users are not required to prove they are a robot unless required.</p>
<pre class=""language-javascript""><code>//lib.actions
export async function validaterecaptcha(captcha: string) {
  const secretkey = process.env.google_recaptcha_client_secret;
  if (!secretkey) {
    throw new error(""missing google recaptcha client secret"");
  }
  if (!captcha) {
    throw new error(""missing recaptcha response token"");
  }
  const url = `https://www.google.com/recaptcha/api/siteverify?secret=${secretkey}&amp;response=${captcha}`;
  const response = await fetch(url, {
    method: ""post"",
    headers: {
      ""content-type"": ""application/x-www-form-urlencoded"",
    },
  });
  if (!response.ok) {
    throw new error(
      `failed to validate recaptcha response: ${response.statustext}`
    );
  }
  const data = await response.json();
  if (!data.success &amp;&amp; data.score &lt; 0.5) {
    throw new error(""failed recaptcha validation"", data.score);
  }
  return true;
}
</code></pre>
<p>the validatecaptcha checks the captcha each time the form is submitted and throws an error if the token is absent. in the function we are checking if the user score is above five, meaning they might be a legit user. however, you might choose to be more strict and maybe use a score of 7, which is the average score a normal user would get.&nbsp;</p>
<p>the final login page looks like this, with the recaptcha protection:</p>
<p><img src=""https://res.cloudinary.com/dipkbpinx/image/upload/v1730831866/tech-tales/blog-images/j2rrgq4knker506yhyxg.png""></p>
<p>however, google allows up to 10,000 assessments per month for free, but users need to enable billing if they want to exceed that limit or access additional features. a free alternative is<a title="" cloudflare turnstile"" href=""https://www.cloudflare.com/products/turnstile/"" target=""_blank"" rel=""noopener""> cloudflare turnstile</a>, which claims not to harvest user data as google does.<br><br></p>
<h1>resources:</h1>
<ol>
<li><a href=""https://cloud.google.com/security/products/recaptcha?hl=en"">https://cloud.google.com/security/products/recaptcha?hl=en</a></li>
<li>how to implement turnstile: <a href=""https://medium.com/designly/a-complete-guide-to-authentication-in-next-js-14-421ec8906854"">https://medium.com/designly/a-complete-guide-to-authentication-in-next-js-14-421ec8906854</a></li>
<li>recaptcha documentation: https://cloud.google.com/recaptcha/docs</li>
</ol>",how-to-secure-your-website-with-google-recaptcha,"recaptcha,security,web-dev,frontend",published,3,1525,http://res.cloudinary.com/dipkbpinx/image/upload/v1725019026/tech-tales/cover-images/mmuogznpst21grwea7vb.jpg
63,20 javascript tricks every developer must know 🚀,"<p><strong>javascript</strong> is a powerful, flexible language, and knowing a few cool tricks can make your code cleaner, faster, and more efficient. javascript is the number one programming language in the world, the language of the web, of mobile hybrid apps (like&nbsp;<a class=""af ob"" href=""https://reactnative.dev/"" target=""_blank"" rel=""noopener ugc nofollow"">react native</a>), of the server side (like&nbsp;<a class=""af ob"" href=""https://nodejs.org/en/"" target=""_blank"" rel=""noopener ugc nofollow"">nodejs</a>&nbsp;) and has many other implementations. it&rsquo;s also the starting point for many new developers to the world of programming, as it can be used to display a simple alert in the web browser but also to control a robot (using&nbsp;<a class=""af ob"" href=""https://nodebots.io/"" target=""_blank"" rel=""noopener ugc nofollow"">nodebot</a>, or nodruino) below are 20 practical javascript tips and tricks that you can use in real-world applications to enhance your development process.</p>
<details class=""mce-accordion"" open=""open"">
<summary><strong>table of contents</strong></summary>
<ol style=""font-size: 14px; line-height: 1.5; margin: 0 5px; padding: 0 5px;"">
<li style=""margin: 0 5px; padding: 0;""><a href=""#1"">remove falsy values from an array</a></li>
<li style=""margin: 0 5px; padding: 0;""><a href=""#2"">optional chaining with function calls</a></li>
<li style=""margin: 0 5px; padding: 0;""><a href=""#3"">default parameters with object destructuring</a></li>
<li style=""margin: 0 5px; padding: 0;""><a href=""#4"">memoize functions for performance</a></li>
<li style=""margin: 0 5px; padding: 0;""><a href=""#5"">flatten nested arrays with <code>array.flat(infinity)</code></a></li>
<li style=""margin: 0 5px; padding: 0;""><a href=""#6"">toggle boolean value with <code>!</code></a></li>
<li style=""margin: 0 5px; padding: 0;""><a href=""#7"">destructure and rename in one step</a></li>
<li style=""margin: 0 5px; padding: 0;""><a href=""#8"">convert array-like objects to arrays using <code>array.from()</code></a></li>
<li style=""margin: 0 5px; padding: 0;""><a href=""#9"">round numbers with <code>math.round()</code> and template literals</a></li>
<li style=""margin: 0 5px; padding: 0;""><a href=""#10"">get the last item in an array quickly</a></li>
<li style=""margin: 0 5px; padding: 0;""><a href=""#11"">merge multiple arrays with <code>concat()</code></a></li>
<li style=""margin: 0 5px; padding: 0;""><a href=""#12"">using <code>reduce</code> to group array items</a></li>
<li style=""margin: 0 5px; padding: 0;""><a href=""#13"">array/object destructuring with default values</a></li>
<li style=""margin: 0 5px; padding: 0;""><a href=""#14"">use <code>||=</code> operator for default assignment</a></li>
<li style=""margin: 0 5px; padding: 0;""><a href=""#15"">convert nodelist to array using spread operator</a></li>
<li style=""margin: 0 5px; padding: 0;""><a href=""#16"">use <code>object.assign()</code> for shallow copying</a></li>
<li style=""margin: 0 5px; padding: 0;""><a href=""#17"">sorting arrays of objects by property</a></li>
<li style=""margin: 0 5px; padding: 0;""><a href=""#18"">asynchronous array iteration with <code>for...of</code> and <code>await</code></a></li>
<li style=""margin: 0 5px; padding: 0;""><a href=""#19"">dynamic imports for lazy loading</a></li>
<li style=""margin: 0 5px; padding: 0;""><a href=""#20"">use <code>intl</code> for date formatting</a></li>
</ol>
</details>
<hr>
<h2 id=""1""><strong>1. remove falsy values from an array</strong></h2>
<p>filter out falsy values (<code>0</code>,&nbsp;<code>null</code>,&nbsp;<code>undefined</code>,&nbsp;<code>false</code>) from an array in one line.</p>
<pre class=""language-javascript""><code>const arr = [0, 'hello', null, 42, false, 'world'];
const filtered = arr.filter(boolean);
console.log(filtered); // [""hello"", 42, ""world""]</code></pre>
<hr>
<h2 id=""2""><strong>2. optional chaining with function calls</strong></h2>
<p>ensure that a function exists before calling it using optional chaining.</p>
<pre class=""language-javascript""><code>const user = { getname: () =&gt; 'alice' };
console.log(user.getname?.()); // alice
console.log(user.getage?.());  // undefined</code></pre>
<hr>
<h2 id=""3""><strong>3. default parameters with object destructuring</strong></h2>
<p>set default parameters and destructure them in one go.</p>
<pre class=""language-javascript""><code>function createuser({ name = 'guest', age = 18 } = {}) {
    console.log(name, age);
}
createuser(); // guest 18
createuser({ name: 'alice' }); // alice 18</code></pre>
<hr>
<h2 id=""4""><strong>4. memoize functions for performance</strong></h2>
<p>cache results of expensive function calls for faster performance.</p>
<pre class=""language-javascript""><code>const memoize = (fn) =&gt; {
    const cache = {};
    return (...args) =&gt; {
        const key = json.stringify(args);
        if (!cache[key]) cache[key] = fn(...args);
        return cache[key];
    };
};
const memoizedsquare = memoize(n =&gt; n * n);
console.log(memoizedsquare(4)); // 16 (cached)</code></pre>
<hr>
<h2 id=""5""><strong>5. flatten nested arrays with&nbsp;<code>array.flat(infinity)</code></strong></h2>
<p>flatten arrays to any depth effortlessly.</p>
<pre class=""language-javascript""><code>const nested = [1, [2, [3, [4]]]];
console.log(nested.flat(infinity)); // [1, 2, 3, 4]</code></pre>
<hr>
<h2 id=""6""><strong>6. toggle boolean value with&nbsp;<code>!</code></strong></h2>
<p>easily toggle a boolean variable by applying the&nbsp;<code>!</code> operator.</p>
<pre class=""language-javascript""><code>let isvisible = false;
isvisible = !isvisible;
console.log(isvisible); // true</code></pre>
<hr>
<h2 id=""7""><strong>7. destructure and rename in one step</strong></h2>
<p>rename variables while destructuring.</p>
<pre class=""language-javascript""><code>const user = { name: 'alice', age: 25 };
const { name: username, age: userage } = user;
console.log(username); // alice
console.log(userage);  // 25</code></pre>
<hr>
<h2 id=""8""><strong>8. convert array-like objects to arrays using&nbsp;<code>array.from()</code></strong></h2>
<p>convert array-like objects (like&nbsp;<code>arguments</code>) into true arrays.</p>
<pre class=""language-javascript""><code>function example() {
    const argsarray = array.from(arguments);
    console.log(argsarray);
}
example(1, 2, 3); // [1, 2, 3]</code></pre>
<hr>
<h2 id=""9""><strong>9. round numbers with&nbsp;<code>math.round()</code>&nbsp;and template literals</strong></h2>
<p>format rounded numbers within template literals.</p>
<pre class=""language-javascript""><code>
const num = 3.14159;
console.log(`${math.round(num * 100) / 100}`); // 3.14
</code></pre>
<hr>
<h2 id=""10""><strong>10. get the last item in an array quickly</strong></h2>
<p>retrieve the last item in an array without knowing its length.</p>
<pre class=""language-javascript""><code>
const arr = [1, 2, 3, 4];
console.log(arr.at(-1)); // 4
</code></pre>
<hr>
<h2 id=""11""><strong>11. merge multiple arrays with&nbsp;<code>concat()</code></strong></h2>
<p>combine multiple arrays easily with&nbsp;<code>concat()</code>.</p>
<pre class=""language-javascript""><code>
const arr1 = [1, 2];
const arr2 = [3, 4];
const merged = arr1.concat(arr2);
console.log(merged); // [1, 2, 3, 4]
</code></pre>
<hr>
<h2 id=""12""><strong>12. using&nbsp;<code>reduce</code>&nbsp;to group array items</strong></h2>
<p>use&nbsp;<code>reduce()</code>&nbsp;to group items based on properties.</p>
<pre class=""language-javascript""><code>
  const people = [
  { name: 'alice', role: 'admin' },
  { name: 'bob', role: 'user' },
  { name: 'charlie', role: 'admin' },
  ];
  const grouped = people.reduce((acc, person) =&gt; {
  (acc[person.role] = acc[person.role] || []).push(person);
  return acc;
  }, {});
  console.log(grouped);
  
</code></pre>
<hr>
<h2 id=""13""><strong>13. array/object destructuring with default values</strong></h2>
<p>assign default values during destructuring.</p>
<pre class=""language-javascript""><code>
const user = { name: 'alice' };
const { name, age = 25 } = user;
console.log(age); // 25
</code></pre>
<hr>
<h2 id=""14""><strong>14. use&nbsp;<code>||=</code>&nbsp;operator for default assignment</strong></h2>
<p>assign a value if the variable is null, undefined, or falsey.</p>
<pre class=""language-javascript""><code>
let count;
count ||= 10;
console.log(count); // 10
</code></pre>
<hr>
<h2 id=""15""><strong>15. convert nodelist to array using spread operator</strong></h2>
<p>quickly convert a&nbsp;<code>nodelist</code>&nbsp;to an array.</p>
<pre class=""language-javascript""><code>
  const divs = document.queryselectorall('div');
  const divarray = [...divs];
  console.log(array.isarray(divarray)); // true
</code></pre>
<hr>
<h2 id=""16""><strong>16. use&nbsp;<code>object.assign()</code>&nbsp;for shallow copying</strong></h2>
<p>make a shallow copy of an object with&nbsp;<code>object.assign()</code>.</p>
<pre class=""language-javascript""><code>
const original = { a: 1, b: 2 };
const copy = object.assign({}, original);
copy.a = 3;
console.log(original.a); // 1
</code></pre>
<hr>
<h2 id=""17""><strong>17. sorting arrays of objects by property</strong></h2>
<p>sort objects in an array by a specific property.</p>
<pre class=""language-javascript""><code>
const users = [{ name: 'alice', age: 25 }, { name: 'bob', age: 20 }];
users.sort((a, b) =&gt; a.age - b.age);
console.log(users);
</code></pre>
<hr>
<h2 id=""18""><strong>18. asynchronous array iteration with&nbsp;<code>for...of</code>&nbsp;and&nbsp;<code>await</code></strong></h2>
<p>process array items asynchronously with&nbsp;<code>for...of</code>&nbsp;and&nbsp;<code>await</code>.</p>
<pre class=""language-javascript""><code>
  const fetchdata = async () =&gt; {
  const urls = ['url1', 'url2'];
  for (const url of urls) {
  const response = await fetch(url);
  console.log(await response.json());
  }
  };
</code></pre>
<hr>
<h2 id=""19""><strong>19. dynamic imports for lazy loading</strong></h2>
<p>load modules only when needed using dynamic imports.</p>
<pre class=""language-javascript""><code>
  const loadmodule = async () =&gt; {
  const module = await import('./mymodule.js');
  module.default(); // calls the default export function
  };
  loadmodule();
</code></pre>
<hr>
<h2 id=""20""><strong>20. use <code>intl</code>&nbsp;for date formatting</strong></h2>
<p>format dates across locales using&nbsp;<code>intl.datetimeformat</code>.</p>
<pre class=""language-javascript""><code>
  const date = new date();
  const formatted = new intl.datetimeformat('en-gb', {
  datestyle: 'full',
  }).format(date);
  console.log(formatted); // e.g., ""monday, 25 october 2021""
</code></pre>
<hr>
<p>each of these javascript tricks is designed to make your code more expressive and efficient. integrate them into your workflow, and you&rsquo;ll see the difference in your productivity and code readability!</p>
<p>happy coding! 🚀</p>",20-javascript-tricks-every-developer-must-know-,"javascript,webdev,beginners,frontend",published,2,183,http://res.cloudinary.com/dipkbpinx/image/upload/v1730416428/tech-tales/cover-images/jy3l8j9relwv9r0e4cfo.jpg
51,common mistakes that beginners often make in react,"<p>react is a popular javascript framework that is the most loved library for building user interfaces. despite being one of the front-end developer's favorites, react introduces pitfalls that beginners often fall into. these blogs are related to state and effects and other functionalities that make react easier to work with. here are five common mistakes beginners often make in react, along with their solutions.</p>
<h1>1. mutating state</h1>
<p>react's state is an essential concept that allows components to manage and update their data. however, directly modifying the state is a common mistake that can lead to unexpected behavior and difficult-to-debug issues.</p>
<p>an example of a mutating state is through the use of destructive array methods such as <code>push</code> to add an item to a list.</p>
<pre class=""language-javascript""><code>const [items, setitems] = usestate([1, 2, 3]);
  // ❌ mutates an existing object
const additem = (item) =&gt; {
  items.push(item); // mutating state directly
  setitems(items);
};
// ✅ creates a new object
const additem = (item) =&gt; {
  setitems([...items, item]); // creating a new array
};
</code></pre>
<p>react relies on a state variable's identity to tell when the state has changed. when we push an item into an array, we aren't changing that array's identity, and so react can't tell that the value has changed.</p>
<p>instead of modifying an existing array, i'm creating a new one from scratch. it includes all of the same items (courtesy of the ... spread syntax), as well as the newly-entered item.</p>
<p>the distinction here is between editing an existing item, versus creating a new one. when we pass a value to a state-setter function like setcount, it needs to be a new entity. the same thing is true for objects.</p>
<h1>2. accessing state after changing it</h1>
<p>state in react is asynchronous. this means that when we update the state we are not re-assigning a variable but rather scheduling a state update. mostly common, developers will be frustrated if they <code>console.log</code> the new value and it is not there.</p>
<p>for example:</p>
<pre class=""language-javascript""><code>const [count, setcount] = usestate(0);
const increment = () =&gt; {
  setcount(count + 1);
  console.log(count); // this will log the old count, not the new one
};
</code></pre>
<p>this can lead to confusion when debugging because the console might not show the expected value. it can take a while for us to fully wrap our heads around this idea, but here's something that might help it click: we&nbsp;<em class=""sc-51e913c7-0 gbcoga"">can't</em>&nbsp;reassign the&nbsp;<code class=""sc-1a723291-0 dkowsq"">count</code> variable, because it's a constant!<br>to work with the updated state, you can use the functional form of <code>setstate</code>, which provides the latest state:</p>
<pre class=""language-javascript""><code>const increment = () =&gt; {
  setcount((prevcount) =&gt; {
    console.log(prevcount + 1); // correctly logs the new count
    return prevcount + 1;
  });
};</code></pre>
<h1>3. using functions as useeffect dependencies&nbsp;</h1>
<p><code>useeffect</code> is one of the most abused hooks and developers often use it recklessly even in areas where it is not needed. one common mistake with <code>useeffect</code> is failing to provide a dependency array, which leads to endless renders.&nbsp;</p>
<p>one point to note here is not to confuse re-renders with refresh. since react uses a <strong>virtual dom</strong>, re-renders happen in the back-stage and thus developers might fail to notice.</p>
<p><span lang=""en"" data-contrast=""auto"">the following is a react&nbsp;useeffect&nbsp;example:</span><span data-ccp-props=""{&quot;201341983&quot;:0,&quot;335551550&quot;:6,&quot;335551620&quot;:6,&quot;335559739&quot;:240,&quot;335559740&quot;:276}"">&nbsp;</span></p>
<pre class=""language-javascript""><code>function app(){ 
    const [data, setdata] = usestate(null); 
    const fetchdata = () =&gt; { 
         // some code 
    } 
    useeffect(() =&gt; { 
    fetchdata(); //used inside useeffect 
     }, [fetchdata]) 
} </code></pre>
<p><span lang=""en"" data-contrast=""auto"">it is<span style=""text-decoration: underline;""> <strong>not recommended</strong></span> to define a function outside and call it inside an effect. in the above case, the passed dependency is a function, and&nbsp;a&nbsp;function is an object, so&nbsp;fetchdata&nbsp;is called on every render. </span></p>
<p><span lang=""en"" data-contrast=""auto"">react compares the fetchdata from the previous render and the current render, but the two aren't the same, so the call is triggered.</span><span data-ccp-props=""{&quot;201341983&quot;:0,&quot;335551550&quot;:6,&quot;335551620&quot;:6,&quot;335559739&quot;:240,&quot;335559740&quot;:276}"">&nbsp;</span></p>
<h1>4. props drilling</h1>
<p>props drilling in react occurs&nbsp;when developers pass the same props to every component one level down from its parent to the required component at the end. thus, components become closely connected with each other and can&rsquo;t be used without adding a particular prop. the fewer unnecessary interconnections between components in your code, the better.</p>
<p>for example, if we need to pass a user&nbsp;<code>name</code> to a deeply nested component but the name is defined in the first parent component:</p>
<pre class=""language-javascript""><code>const grandparent = () =&gt; {
  const user = { name: 'alice' };
  return &lt;parent user={user} /&gt;;
};
const parent = ({ user }) =&gt; {
  return &lt;child user={user} /&gt;;
};
const child = ({ user }) =&gt; {
  return &lt;div&gt;{user.name}&lt;/div&gt;;
};</code></pre>
<p>in this example, the <code>user</code> prop is passed down from <code>grandparent</code> to <code>child</code> through the <code>parent</code> component, even though <code>parent</code> doesn't need it. this kind of pattern can quickly lead to a tangled mess of props.</p>
<p>to avoid props drilling, consider using react context or state management libraries like redux, zustand, or recoil. context allows you to share data across multiple components without passing props manually through every level.</p>
<pre class=""language-javascript""><code>// create a context
const usercontext = createcontext();
const grandparent = () =&gt; {
  const user = { name: 'alice' };
  return (
    &lt;usercontext.provider value={user}&gt;
      &lt;parent /&gt;
    &lt;/usercontext.provider&gt;
  );
};
const parent = () =&gt; {
  return &lt;child /&gt;;
};
const child = () =&gt; {
  const user = usecontext(usercontext);
  return &lt;div&gt;{user.name}&lt;/div&gt;;
};
</code></pre>
<h1>5. changing from uncontrolled to controlled inputs</h1>
<p>uncontrolled components rely on the dom to manage their state, while controlled components rely on react. beginners sometimes switch from uncontrolled to controlled components without a clear need, adding complexity without gaining any tangible benefits.</p>
<p>one major reason why developers switch to controlled inputs is the need for validations. however, we can validate inputs without the need for additional javascript simply using browser inbuilt functions. see more here <a title=""a-better-way-to-validate-html-forms-without-usestate"" href=""blogs/a-better-way-to-validate-html-forms-without-usestate"" target=""_blank"" rel=""noopener"">a-better-way-to-validate-html-forms-without-usestate.</a></p>
<p>another reason (i am often guilty of this) is when we need to implement search functionality that filters our data to return the results. however, the most efficient solution to search is to store the value in search parameters. in this way, the value will not be lost on refresh.</p>
<p>developers might implement the search functionality like this:</p>
<pre class=""language-javascript""><code>function searchform() {
  const [query, setquery] = usestate(null);
  function handlesearch (e){
    e.preventdefault()
    window.location.href=`/my-site/search?q=${query}`
  }
  return (
    &lt;form onsubmit={handlesearch}&gt;
      &lt;search&gt;
        &lt;input
          type=""search""
          value={search}
          onchange={() =&gt; setquery(e.target.value)}&gt;&lt;/input&gt;
      &lt;/search&gt;
    &lt;/form&gt;
  );
}</code></pre>
<p>this example receives the search input and saves it in the state. when the search form is submitted, we redirect the user to the search page with the search-params.</p>
<p>one simple solution is:</p>
<pre class=""language-javascript""><code>function searchform() {
  return (
    &lt;form action=""/search/query""&gt;
      &lt;search&gt;
        &lt;input type=""search"" name=""query""&gt;&lt;/input&gt;
      &lt;/search&gt;
    &lt;/form&gt;
  );
}</code></pre>
<p>this will work the same and the form will be submitted with the query params that can be used to filter the data. another advantage of this setup is that if we are using <code>nextjs</code>, this form will work as a <code>server component</code> and thus benefit from faster rendering.</p>
<h1>conclusion</h1>
<p>there are many mistakes that we make in react that we are often unaware of. by understanding and avoiding these common mistakes, you can write more robust and efficient react code. remember to practice good coding practices and explore the full range of react hooks to build high-quality user interfaces.</p>",common-mistakes-that-beginners-often-make-in-react,"react,javascript,webdevelopment,beginners
",published,1,755,http://res.cloudinary.com/dipkbpinx/image/upload/v1725127952/tech-tales/cover-images/c4nonlqtmwobado43zw3.png
42,7 css mistakes that beginners often make,"<p>css is not as simple as it looks and developers often make some mistakes that leave them struggling with what to do. css is perceived as an unintuitive and difficult language to work with because of these common mistakes that thwart most developers when they try to write css. as a result, most developers opt to use css frameworks such as bootstrap and tailwind css to avoid writing their own css.</p>
<p>in this blog, we will discuss five common mistakes that developers often make. recognizing and avoiding these mistakes will help you write css that:</p>
<ol>
<li>works across devices&mdash;not just your laptop</li>
<li>works the first time you try it</li>
<li>it makes you less frustrated with css</li>
</ol>
<p>let's dive in.</p>
<h1>#mistake 1: not using css reset</h1>
<p>this is one of my surprising discoveries and i have only realized that i have been doing css wrong all this time. browsers have default styles that serve as a fallback if the stylesheet does not exist. however, these default styles are different across browsers. in any case, two browsers rarely provide identical default styling, so the only real way to ensure your styles are effective is to use a css reset.</p>
<p>a css reset entails resetting (or, rather, <em>setting</em>) all the styles of all the html elements to a predictable baseline value. the beauty of this is that once you include a css reset effectively, you can style all the elements on your page as if they were all the same to start with.</p>
<p>css reset is a blank slate that helps you have consistent styling across different browsers. most often, this entails setting a <code>margin:0</code> and <code>padding:0</code>, although there is a need to reset other elements.</p>
<pre class=""language-css""><code>
* {
  margin: 0;
  padding: 0;
  border: 0;
  outline: 0;
  font-weight: inherit;
  font-style: inherit;
  font-size: 100%;
  font-family: inherit;
  vertical-align: baseline;
}
/* remember to define focus styles! */
:focus {
  outline: 0;
}
body {
  line-height: 1;
  color: black;
  background: white;
}
ol,
ul {
  list-style: none;
}
/* tables still need 'cellspacing=""0""' in the markup */
table {
  border-collapse: separate;
  border-spacing: 0;
}
caption,
th,
td {
  text-align: left;
  font-weight: normal;
}
blockquote::before,
blockquote::after,
q::before,
q::after {
  content: """";
}
blockquote,
q {
  quotes: """" """";
}
</code></pre>
<h1>#mistake 2: using&nbsp;<code>px</code> units</h1>
<p>i am also actually guilty of using <code>px</code> units for <code>font-sizes</code>, <code>margins</code>, <code>padding</code> and <code>height or weight</code> attributes. while using <code>px</code> units can be fine in some instances, overreliance on them leads to accessibility issues.</p>
<blockquote>
<p>according to mdn, &nbsp;defining font sizes in&nbsp;<code>px</code>&nbsp;is&nbsp;<em><a class=""external"" href=""https://en.wikipedia.org/wiki/web_accessibility"" target=""_blank"" rel=""noopener"">not accessible</a></em>, because the user cannot change the font size in some browsers. for example, users with limited vision may wish to set the font size much larger than the size chosen by a web designer. avoid using them for font sizes if you wish to create an inclusive design.</p>
</blockquote>
<p>however, <code>px units</code> are also bad for setting height and width for content, since content might also overflow if the user increases the default font size in the browser. using <code>px units</code> in-media queries also affects the layout when a user zooms in or changes the default font size.&nbsp;</p>
<h2>🚫 mistake</h2>
<pre class=""language-css""><code>p {
  font-size: 16px;
 /*this prevents users from resizing the font-size*/
  line-height: 20px;
  margin-bottom: 8px;
}</code></pre>
<h2>✅ correct</h2>
<pre class=""language-css""><code>body {
  font-size: 16px;
}
p {
  font-size: 1rem;
  line-height: 1.25;
  margin-bottom: 0.5em;
}</code></pre>
<h1>#mistake 3: using <code>ids</code> as selectors</h1>
<p>one of the most overlooked problems in web development is the use of over-qualifying selectors that are too specific and difficult to override. <code>ids</code> selectors have more specificity in css, meaning you cannot override them or reuse the style in another component.</p>
<p>always write your css selectors with the very minimum level of specificity necessary for it to work. including all that extra fluff may make it look&nbsp;<em>safer and more precise</em>, but when it comes to css selectors, there are only two levels of specificity:&nbsp;<em>specific</em>, and&nbsp;<em>not specific enough</em>.</p>
<h2>🚫 mistake</h2>
<pre class=""language-css""><code>#header {
  font-size: 1em;
  line-height: normal;
}
</code></pre>
<h2>✅ correct</h2>
<pre class=""language-css""><code>.header {
  font-size: 1em;
  line-height: normal;
}</code></pre>
<p style=""box-sizing: border-box; margin: 0px; padding: 0px;"">in general, you should avoid using overly specific selectors in css. the&nbsp;<a href=""https://www.painlesscss.com/guide-to-css-specificity.html"" target=""_blank"" rel=""noopener"">css specificity tournament</a>&nbsp;illustrates why it's a bad idea to use selectors that are too powerful. when a selector is very powerful in the tournament, it wins quickly and early on, which means the only way to beat it is to write an even more powerful selector.</p>
<p style=""box-sizing: border-box; margin: 0px; padding: 0px;"">&nbsp;</p>
<p style=""box-sizing: border-box; margin: 0px; padding: 0px;"">this tendency for specificity to always escalate is known as a&nbsp;<em>specificity war</em>. similar to stockpiling nuclear weapons, no one wins in this war&mdash;things only become more difficult to de-escalate as specificity increases. the best way to avoid a full-blown specificity war is to not use highly specific selectors in the first place.</p>
<h1>#mistake-4: named colors</h1>
<p>another mistake that i discovered when doing my research is the problem with named colors. developers often ignore that what you perceive to be a specific color looks very different across browsers.</p>
<p>by saying:<code> color: red</code>;&nbsp;you&rsquo;re essentially saying that the browser should display what it thinks&nbsp;<em>red</em> is. if you&rsquo;ve learned anything from making stuff function correctly in all browsers it&rsquo;s that you should never let the browser decide how to display your web pages.</p>
<p>instead, you should go to the effort to find the actual hex value for the color you&rsquo;re trying to use. that way, you can make sure it&rsquo;s the same color displayed across all browsers. you can use a color cheatsheet that provides a preview and the hex value of a color.</p>
<h2>🚫 mistake</h2>
<pre class=""language-css""><code>.header {
  font-size: 1em;
  line-height: normal;
  color: red;
}</code></pre>
<h2>✅ correct</h2>
<pre class=""language-css""><code>.header {
  font-size: 1em;
  line-height: normal;
  color: rgb(255, 0, 0);
}
</code></pre>
<h1>#mistake 5: not using shorthand properties</h1>
<p>as a developer, one rule is to never repeat yourself. therefore, you should find ways to minimize the number of lines of code that you write.</p>
<p>one common problem with css is understanding shorthand properties for things like <code>margin</code>, <code>padding</code> and <code>inset</code>. as a confession, i also struggle with this problem and often have to look to the documentation on whether <code>margin: 0 5px</code> sets the margin in top-bottom or left-right.</p>
<h2>🚫 mistake</h2>
<pre class=""language-css""><code>.my-cool-div {
  margin-top: 50px;
  margin-right: 0;
  margin-bottom: 50px;
  margin-left: 0;
  background-image: url(background.png);
  background-repeat: repeat-y;
  background-position: center top;
}</code></pre>
<h2>✅ correct</h2>
<pre class=""language-css""><code>.my-cool-div {
  margin: 50px 0;
  background: url(background.png) repeat-y center top;
}
</code></pre>
<p>using&nbsp;<a class=""external"" title=""efficient css with shorthand properties - www.456bereastreet.com"" href=""http://www.456bereastreet.com/archive/200502/efficient_css_with_shorthand_properties/"" target=""_blank"" rel=""noopener"">shorthand css improves efficiency</a> and makes it easier to maintain our code. however, this could take time to master and i recommend checking the documentation.</p>
<h1>#mistake 6: overreliance on position absolute</h1>
<p>position absolute is that one band-aid solution that can cause more problems as it breaks the document flow. when using positions absolute, mdn recommends that you ensure that elements that are positioned with an&nbsp;<code>absolute</code>&nbsp;or&nbsp;<code>fixed</code> value do not obscure other content when the page is zoomed to increase text size.</p>
<p>position absolute should be the last choice since it has some effects such as pulling the element out of the flow and making it stack over other things.&nbsp;</p>
<p>furthermore, elements positioned absolutely don't naturally adapt to changes in screen size or parent element dimensions, which can break the layout on different devices.</p>
<h2>🚫 mistake</h2>
<pre class=""language-css""><code>.sidebar {
  position: absolute;
  top: 50px;
  right: 0;
  width: 30%;
  background-color: #e0e0e0;
  padding: 20px;
}</code></pre>
<h2>✅ correct</h2>
<pre class=""language-css""><code>.sidebar {
  transform: translatey(50px) translatex(0);
  /* moves the element down by 50px */
  width: 30%;
  background-color: #e0e0e0;
  padding: 20px;
}
</code></pre>
<p>in this example, we see that we can achieve the same functionality without breaking the document flow by using transform to move the sidebar down by 50px.</p>
<h1>#mistake 7: collapsing margins</h1>
<p>collapsing margins can be really hard to understand and frustrating to decode since you might not understand why your applied margin or padding is not working as expected.</p>
<p>the&nbsp;<a href=""https://developer.mozilla.org/en-us/docs/web/css/margin-top"">top</a>&nbsp;and&nbsp;<a href=""https://developer.mozilla.org/en-us/docs/web/css/margin-bottom"">bottom</a> margins of blocks are sometimes combined (collapsed) into a single margin whose size is the largest of the individual margins (or just one of them if they are equal), a behavior known as&nbsp;<strong>margin collapsing</strong>. note that the margins of&nbsp;<a href=""https://developer.mozilla.org/en-us/docs/web/css/float"">floating</a>&nbsp;and&nbsp;<a href=""https://developer.mozilla.org/en-us/docs/web/css/position#types_of_positioning"">absolutely positioned</a> elements never collapse.</p>
<p>understanding margin collapse is essential for achieving consistent spacing in your layouts, particularly in scenarios where you want to ensure a specific amount of space between elements.</p>
<p>one solution to collapsing margins is using <code>padding</code>, especially for child elements rather than margins. it is generally advised not to add <code>margin</code> to the child element, especially in javascript frameworks such as <code>react</code> since this might affect their reusability.</p>
<p>you must always remember that adding a margin to a child element can affect the position of the parent element as the margins collapse.</p>
<h2>🚫 mistake</h2>
<pre class=""language-css""><code>/* html */
/* 
&lt;div class=""element1""&gt;element 1&lt;/div&gt;
&lt;div class=""element2""&gt;element 2&lt;/div&gt; 
*/
.element1 {
  margin-bottom: 20px;
}
.element2 {
  margin-top: 30px;
}
/* the total margin will be 30px rather than 50px */</code></pre>
<h2>✅ correct</h2>
<pre class=""language-css""><code>.element1 {
  margin-bottom: 20px;
  padding-bottom: 1px;
  /* prevents collapse */
}
.element2 {
  margin-top: 30px;
}
</code></pre>
<h1>conclusion</h1>
<p>i hope you enjoyed this article, and that it gave you a sense of how to avoid the top most common mistakes developers make when they write css. there are many mistakes not covered in this blog such as separating between <code>layout and content elements</code>, <code>overusing flex box</code> and much more. comment below with some other mistakes.</p>",7-css-mistakes-that-beginners-often-make,"css,webdevelopment,beginners,csstricks",published,1,1263,http://res.cloudinary.com/dipkbpinx/image/upload/v1725017107/tech-tales/cover-images/v2nxkt8j0z45dqg9fazw.jpg
3,my opinion on whether ai will take our jobs as developers,"there have been significant concerns among software developers on what the future of software development holds.</p>
<p>the rise of various ai programs such as <strong>chatgpt, google bard, google duet, google gemini, amazon codewhisper </strong>and <strong>github copilot </strong>has revolutionized how developers write code. these programs have increased concerns on whether <span style=""color: rgb(224, 62, 45);""><strong>ai will replace programmers in the future.&nbsp;&nbsp;</strong></span></p>
<p>the field of programming is undergoing a significant transformation with the rise of ai and no-code websites. undoubtedly, as these technologies continue to evolve, they will revolutionize the game.</p>
<p>i cannot help but think about the looming shadow of ai and it's potential impact on our careers. will robots steal our jobs, leaving us jobless and obsolete? or will they become our collaborators, empowering us to reach new heights of productivity?</p>
<p>i believe that the future lies somewhere in between ai and programmers. current ai programs are not fully developed to take developers jobs. sure, they can handle repetitive tasks and generate basic code, but true creativity, problem-solving, and critical thinking remain firmly in a human aspect.</p>
<p>these models are largely trained with pre-existing data and thus their knowledge is restricted to what we already know.&nbsp;for such reasons,<em> <strong>ai programs</strong></em> cannot create new knowledge or invent something new.&nbsp;</p>
<p>however, they can help empower developers code better and more efficiently. existing ai programs such as&nbsp;<strong>github copilot </strong>are highly effective in helping debug programs, complete code and enhance code optimization.</p>
<p>ai has the potential to automate repetitive and mundane programming tasks, enabling programmers to focus on more creative and complex problem-solving. thus, the only person that can steal our jobs is a programmer who has mastered the art of using ai programs to enhance their productivity.</p>
<p>by automating tedious tasks and generating code snippets, ai makes developers work faster and more effectively. this means that developers can complete their projects faster with aid of ai. such increased efficiency will with no doubt increase competition for the available jobs.</p>
<p><span style=""color: rgb(22, 145, 121);""><strong>super programmers</strong></span> who will be powered by ai will thus be better positioned to compete for the jobs. thus, as ai takes over routine tasks, programmers will need to adapt and embrace new roles that involve overseeing ai systems, designing complex algorithms, and applying their expertise to tackle challenging problems.</p>
<h2>conclusion</h2>
<p>the future of programming might look scary but we all possess the tools required to navigate this intricate future. with aid of ai, developers can maximize their efficiency and earnings and help design ai systems.</p>
<p>we need to embrace this change, learning to leverage ai's power while honing our unique human strengths. only then can we thrive in this new era of collaboration between man and machine.</p>
<p>what are your thoughts on ai and its impact on the developer community? share your opinions in the comments below!</p>",my-opinion-on-whether-ai-will-take-our-jobs-as-developers,"ai,developers,jobs,chatgpt",published,11,1462,http://res.cloudinary.com/dipkbpinx/image/upload/v1725021341/tech-tales/cover-images/tommy4v20rmmkj962zar.jpg
40,a better way to validate html forms without usestate,"<p>form validation is a crucial aspect of web development, ensuring that users input data correctly before submitting it. traditionally, developers often manage validation by storing error states in javascript and then displaying those errors to the user. while this method works, it can be cumbersome, especially as the complexity of forms grows</p>
<p>if you are a react dev or use other javascript frameworks like me, you often set a custom error state to track whether a field has an error and display the error message to the user. something like this:</p>
<pre class=""language-javascript""><code>export default function form() {
  const [error, seterror] = usestate(null);
  const [email, setemail] = usestate("""");
  const emailregex =  /^[a-za-z0-9._%+-]+@[a-za-z0-9.-]+\.[a-za-z]{2,}$/;
  async function handlesubmit(e) {
    e.preventdefault();
    seterror("""");
    try {
      // check if the email matches the regex
      if (!emailregex.test(email)) {
        seterror(""please enter a valid email address"");
      } else {
        // do something with the email
      }
    } catch (error) {}
  }
  return (
    &lt;form onsubmit={handlesubmit}&gt;
      &lt;div classname=""px-6""&gt;
        &lt;div classname=""space-y-2 py-2""&gt;
          &lt;label classname=""font-bold "" htmlfor=""email""&gt;
            enter your email
          &lt;/label&gt;
          &lt;input
            classname=""h-10 w-full p-2 border""
            id=""email""
            name=""email""
            value={email}
            onchange={(e) =&gt; setemail(e.target.value)}
            placeholder=""you@example.com""
            disabled={loading}
            required
            type=""email""
          /&gt;
        &lt;/div&gt;
        &lt;div classname=""h-5 min-h-5 max-h-5""&gt;
          {error ? (
            &lt;p classname=""text-orange-600 text-sm  ""&gt;
              &lt;span&gt;{error}&lt;/span&gt;
            &lt;/p&gt;
          ) : null}
        &lt;/div&gt;
        &lt;button
          classname=""px-4 bg-blue-500 text-white rounded-md ""
          type=""submit""
          title=""continue""&gt;
          continue
        &lt;/button&gt;
      &lt;/div&gt;
    &lt;/form&gt;
  );
}
</code></pre>
<p>the problem with this implementation is that we are unnecessarily using <code>usestate</code> to store the error and then render the error in a div. when the div appears, there is a slight layout shift. furthermore, if you are used to this design, you might find it hard to validate forms when using javascript with no frameworks.</p>
<p>one of the major reasons why i found myself using this design is that the native email validation provided by html is not enough. for example, setting the input <code>type='email'</code> will indicate that emails ending with numbers are valid as long as they end with something. thus, <a href=""mailto:something@some.some285""><code>something@some.some285</code></a> would be a valid email input, although we both know it is not.&nbsp;</p>
<p>furthermore, pattern attributes cannot be passed to all html inputs, which adds another complexity. i have also experienced a challenge where the pattern attribute does not work on email inputs, although the solution to this is to escape the <code>'/'</code> in the regex pattern.</p>
<pre class=""language-markup""><code>&lt;form&gt;
  &lt;input type=""email"" placeholder=""enter your email"" 
     pattern=""^[a-za-z0- 9._+\-']+@[a-za-z0-9.\-]+\.[a-za-z]{2,}$"" 
     required&gt;
  &lt;button&gt;submit&lt;/button&gt;
&lt;/form&gt;</code></pre>
<h1>a better solution: using <code>checkvalidity</code> and <code>setcustomvalidity</code></h1>
<p>instead of manually tracking errors, you can leverage the browser&rsquo;s built-in validation using <code>checkvalidity</code> and <code>setcustomvalidity</code>. here&rsquo;s how it works:</p>
<ul>
<li>
<p><strong><code>checkvalidity</code></strong>: this method checks if a form element meets all its validation constraints. it returns <code>true</code> if the element is valid and <code>false</code> if it isn't.</p>
</li>
<li>
<p><strong><code>setcustomvalidity</code></strong>: this method allows you to set a custom error message that will be displayed when the form is invalid. if you pass an empty string, it clears the custom error, making the field valid again.</p>
</li>
</ul>
<p>here is an example of how you can use customvalidity to set your custom error messages:</p>
<pre class=""language-markup""><code>&lt;body&gt;
    &lt;form style=""padding: 5px""&gt;
      &lt;label for=""email""&gt;email:&lt;/label&gt;
      &lt;input
        type=""email""
        id=""email""
        name=""email""
        required
        style=""border: 1px solid black"" /&gt;
      &lt;br /&gt;
      &lt;button
        type=""submit""
        style=""
          background-color: aqua;
          border-radius: 8px;
          padding: 2px 5px;
          margin-top: 5px;
        ""&gt;
        submit
      &lt;/button&gt;
    &lt;/form&gt;
    &lt;script&gt;
      const emailinput = document.getelementbyid(""email"");
      const emailregex = /^[a-za-z0-9._%+-]+@[a-za-z0-9.-]+\.[a-za-z]{2,}$/;
      emailinput.addeventlistener(""input"", () =&gt; {
        if (emailinput.value === """") {
          emailinput.setcustomvalidity(""email is required"");
        } else if (!emailregex.test(emailinput.value)) {
          emailinput.setcustomvalidity(""please enter a valid email address"");
        } else {
          emailinput.setcustomvalidity(""""); // clears any custom errors
        }
        emailinput.reportvalidity(); // optionally display the error message immediately
      });
    &lt;/script&gt;
  &lt;/body&gt;
</code></pre>
<h2>benefits of this approach</h2>
<ol>
<li>
<p><strong>simplified code</strong>: by relying on the browser&rsquo;s validation mechanisms, you avoid the need to manually track and manage error states. this leads to cleaner and more maintainable code.</p>
</li>
<li>
<p><strong>better user experience</strong>: custom error messages can be displayed directly in the form without the need for additional ui elements. this makes the validation process feel more integrated and user-friendly.</p>
</li>
<li>
<p><strong>consistency</strong>: since the browser handles validation, you get consistent behavior across different form elements and input types. this can also allow you to set validation into other fields such as textarea where patterns are not natively supported.</p>
</li>
<li>
<p><strong>accessibility</strong>: built-in validation is generally more accessible, as it works with screen readers and other assistive technologies out of the box.</p>
</li>
<li><strong>using state</strong>: we can eliminate the need to use <code>usestate</code> to track user input and thus make our forms server components with working validation.</li>
</ol>
<p>you can also be more aggressive and choose to harass your users and make it fun for you of course.</p>
<pre class=""language-javascript""><code>function validate(inputid) {
  const input = document.getelementbyid(inputid);
  const validitystate = input.validity;
  if (validitystate.valuemissing) {
    input.setcustomvalidity(""you gotta fill this out, yo!"");
  } else if (validitystate.rangeunderflow) {
    input.setcustomvalidity(""we need a higher number!"");
  } else if (validitystate.rangeoverflow) {
    input.setcustomvalidity(""thats too high!"");
  } else {
    input.setcustomvalidity("""");
  }
  input.reportvalidity();
}
</code></pre>
<h3>conclusion</h3>
<p>form validation is an essential part of web development, but it doesn't have to be complicated. by using <code>checkvalidity</code> and <code>setcustomvalidity</code>, you can leverage the power of html5&rsquo;s built-in validation to simplify your code and improve the user experience. this approach eliminates the need to manually manage error states, making your forms easier to maintain and more reliable.</p>
<p>next time you&rsquo;re working on a form, consider using these methods to streamline your validation process and let the browser do the heavy lifting for you.</p>",a-better-way-to-validate-html-forms-without-usestate,"html,forms,web-dev,frontend",published,1,724,http://res.cloudinary.com/dipkbpinx/image/upload/v1725021830/tech-tales/cover-images/hfgc2xwyv2qvz8owlshl.png
37,five must know css tricks to save you time,"<p><span style=""font-family: georgia, palatino, serif;"">html &amp; css are the predominant languages for any newbie front-end developer to learn. css or cascading style sheets is the language we use to style an html document.&nbsp;css describes how html elements should be displayed. however, css is not as easy as it looks, and mastering it takes time. here are some 5 tricks that can help make you a css pro.</span></p>
<h2><span style=""font-family: georgia, palatino, serif;"">1. styling images</span></h2>
<p><span style=""font-family: georgia, palatino, serif;"">when it comes to&nbsp;web design, captivating visuals can make all the difference. images play a crucial role in creating an engaging and memorable user experience.</span></p>
<p><span style=""font-family: georgia, palatino, serif;"">styling images properly could help reduce the loading time for images. despite setting width, height, and alt properties, there are other advanced css features for images such as aspect ratio that help set the responsiveness. here is how to properly style images according to&nbsp;<a title=""a better image reset for your css"" href=""https://www.youtube.com/watch?v=345v2mu3e_w"" target=""_blank"" rel=""noopener"">kevin powell.</a></span></p>
<pre class=""language-css""><code>.img {
   max-width: 100%;
   height: auto;
   vertical-align:middle;
   font-style: italic;
   background-repeat:no-repeat;
   background-cover: cover;
   shape-margin:0.75rem;
}</code></pre>
<p><span style=""font-family: georgia, palatino, serif;"">max-width and height auto-properties are important to help ensure the image is responsive and stop the image from overflowing. there is a difference when you set the <code>width</code>&nbsp;and&nbsp;<code>max-width</code>&nbsp;to&nbsp;<code>100%</code>. using&nbsp;<code>width: 100%</code>&nbsp;allows the image to stretch or shrink to fit the container&rsquo;s width, while&nbsp;<code>max-width: 100%</code> ensures the image does not exceed its original size but can still scale down to fit within the container.</span></p>
<p><span style=""font-family: georgia, palatino, serif;"">vertical-align is a replacement for a display block that helps preserve the line height but moves the image down vertically so it no longer seems like it has uneven spacing. the font-style italic is used to style the image description and thus differentiate the alt text from the rest of the text. if need be, you can also style this using the&nbsp;<code>image[alt]</code> selector.</span></p>
<p><span style=""font-family: georgia, palatino, serif;"">you might be wondering why we need the background image for an image. kevin explained that the background image <code>background-cover: cover</code> and <code>background-repeat: no-repeat</code> helps set a placeholder (low-resolution of the image) to serve as a skeleton loader when the user is on a slow network. </span></p>
<p><span style=""font-family: georgia, palatino, serif;"">however, another solution for this would be to use webp images or convert your images to progressive jpeg using tools such as <a title=""optimizilla"" href=""http://optimizilla.com"" target=""_blank"" rel=""noopener"">optimizilla</a> or <a title=""riot"" href=""https://riot-optimizer.com"" target=""_blank"" rel=""noopener"">riot.</a> this will help the images load faster and therefore no need for a skeleton loader.</span></p>
<p><span style=""font-family: georgia, palatino, serif;"">lastly, the shape margin is useful especially when floating an image. this gives so spacing to the image and in the current setup, it does not do anything unless you end up floating the image.</span></p>
<h2><span style=""font-family: georgia, palatino, serif;"">2. scroll based animation</span></h2>
<p><span style=""font-family: georgia, palatino, serif;"">we have all seen those fancy websites where content is updated dynamically as you scroll. you might think that this requires a lot of javascript to achieve, while in the real sense, you can use css tricks to achieve similar effects.</span></p>
<p><span style=""font-family: georgia, palatino, serif;"">one alternative to this is to use a popular library called <a title=""animate-on-scroll"" href=""https://www.npmjs.com/package/animate-on-scroll"" target=""_blank"" rel=""noopener"">animate-on-scroll</a> but the library has not been touched in seven years and only has 49 downloads. another alternative is to use <a title=""animate-on-scroll-framer"" href=""https://www.npmjs.com/package/animate-on-scroll-framer"" target=""_blank"" rel=""noopener"">animate-on-scroll-framer</a> which also has 3 downloads. </span></p>
<p><span style=""font-family: georgia, palatino, serif;"">upon further research, i also found a css feature named&nbsp;<a title=""scroll-timeline"" href=""https://developer.mozilla.org/en-us/docs/web/css/scroll-timeline"" target=""_blank"" rel=""noopener"">scroll-timeline</a> although it is also not supported anywhere. looks like we have to do this ourselves using <a title=""intersection observer api"" href=""https://developer.mozilla.org/en-us/docs/web/api/intersection_observer_api"" target=""_blank"" rel=""noopener"">intersection observer api.</a></span></p>
<p><span style=""font-family: georgia, palatino, serif;"">to use the intersection observer api, we need some javascript code that applies a class when the element is intersecting. we will add a class of hidden to all elements we want to animate on scroll and use the observer to add a class of show when the element is intersecting.</span></p>
<pre class=""language-javascript""><code>const observer = new intersectionobserver((entries) =&gt; {
  entries.foreach((entry) =&gt; {
    if (entry.isintersecting) {
      entry.target.classlist.add(""show"");
    } else {
      entry.target.classlist.remove(""show"");
    }
  });
});
const hiddenelements = document.queryselectorall("".hidden"");
hiddenelements.foreach((element) =&gt; observer.observe(element));</code></pre>
<p><span style=""font-family: georgia, palatino, serif;"">we need to add a class of hidden to a section and then animate the section on scroll. it is important to ensure each section that you want to animate takes the full viewport height for better scroll behavior.&nbsp;</span></p>
<pre class=""language-css""><code>.section-to-animate{
  min-height: 100dvh;
}
.hidden {
  opacity: 0;
  transition: all 1s ease-in-out; /* fade animation */
  filter: blur(0);
  transform: translatey(-100%);
}
.show {
  opacity: 1;
  filter: blur(1);
  transform: translatex(0);
  transition-delay: 0.2s;
}
@media (prefers-reduced-motion) {
  .hidden {
    transition: none; /* be polite */
  }
}
</code></pre>
<p><span style=""font-family: georgia, palatino, serif;"">for more advanced cases that make you look fancy, look at this pen and do not forget to fork it.</span></p>
<p><iframe style=""box-sizing: inherit; border: 0px; --tw-border-spacing-x: 0; --tw-border-spacing-y: 0; --tw-translate-x: 0; --tw-translate-y: 0; --tw-rotate: 0; --tw-skew-x: 0; --tw-skew-y: 0; --tw-scale-x: 1; --tw-scale-y: 1; --tw-scroll-snap-strictness: proximity; --tw-ring-offset-width: 0px; --tw-ring-offset-color: #fff; --tw-ring-color: rgba(59,130,246,.5); --tw-ring-offset-shadow: 0 0 #0000; --tw-ring-shadow: 0 0 #0000; --tw-shadow: 0 0 #0000; --tw-shadow-colored: 0 0 #0000; scrollbar-width: auto; scrollbar-color: rgb(59, 130, 246) rgb(255, 255, 255); display: block; vertical-align: middle; margin: max(3.2vmin, 24px) 0px 0px; overflow-x: auto; width: 1067px; max-width: 100%; font-style: normal; font-variant-ligatures: normal; font-variant-caps: normal; font-variant-numeric: inherit; font-variant-east-asian: inherit; font-variant-alternates: inherit; font-variant-position: inherit; font-weight: 400; font-stretch: inherit; line-height: inherit; font-family: -apple-system, blinkmacsystemfont, 'segoe ui', roboto, oxygen, ubuntu, cantarell, 'fira sans', 'droid sans', 'helvetica neue', sans-serif; font-optical-sizing: inherit; font-kerning: inherit; font-feature-settings: inherit; font-variation-settings: inherit; font-size: 16px; padding: 0px; grid-column: main-start / main-end; color: rgba(255, 255, 255, 0.75); letter-spacing: normal; orphans: 2; text-align: start; text-indent: 0px; text-transform: none; widows: 2; word-spacing: 0px; -webkit-text-stroke-width: 0px; white-space: normal; background-color: #151719; text-decoration-thickness: initial; text-decoration-style: initial; text-decoration-color: initial; height: 632px; border-radius: 5px !important;"" title=""&lt;details&gt; and &lt;summary&gt; tag"" src=""https://codepen.io/donvine254/embed/abgyklx?default-tab=result&amp;editable=true&amp;theme-id=light"" width="""" height=""600"" frameborder=""no"" scrolling=""no"" allowfullscreen=""allowfullscreen"" loading=""lazy""></iframe></p>
<h2><span style=""font-family: georgia, palatino, serif;"">3. css variables</span></h2>
<p><span style=""font-family: georgia, palatino, serif;"">css variables enhance efficiency by allowing you to declare variables with local or global scope, change the variables with javascript, and change the variables based on media queries. a good way to use these variables is when declaring colors.</span></p>
<p><span style=""font-family: georgia, palatino, serif;"">we can declare global variables using the selector in css <code>:root</code> selector and adding the variable to use using the <code>var</code> function. we can create fallback variables and declare local variables that override the global variable on a component.</span></p>
<pre class=""language-css""><code>/* global */
:root {
  --primary-color: #3498db;
  --secondary-color: #2ecc71;
  --font-size: 16px;
  --padding: 10px;
  --color: white;
}
/* local */
.button {
  --color: whitesmoke;
}
body {
  background-color: var(--primary-color);
  color: var(--secondary-color);
  font-size: var(--font-size);
  padding: var(--padding);
}
.button {
  background-color: var(--primary-color);
  padding: calc(var(--padding) * 2); /* using a calculation with the variable */
  font-size: var(--font-size);
}
/* using a fallback value */
body {
  background-color: var(--primary-color, skyblue);
}
</code></pre>
<p><span style=""font-family: georgia, palatino, serif;"">this would also work great using media queries. the variables can be modified using a media query to ensure a responsive design. this could range from updating color in dark and light modes and changing font size in small devices. for more knowledge, check out this tutorial guide:&nbsp;<a title=""css variables - an introduction to css custom properties"" href=""https://www.youtube.com/watch?v=pho6tbq_aui&amp;list=pl4-ik0avhvjot2kbb5tsbd77omfhvtqui"" target=""_blank"" rel=""noopener"">css variables - an introduction to css&nbsp;</a>custom properties</span></p>
<pre class=""language-css""><code>:root {
  --font-size: 16px;
}
@media (min-width: 768px) {
  :root {
      --font-size: 18px;
  }
}
@media (min-width: 1024px) {
  :root {
      --font-size: 20px;
  }
}
body {
  font-size: var(--font-size);
}
</code></pre>
<h2><span style=""font-family: georgia, palatino, serif;"">4. responsive font size</span></h2>
<p><span style=""font-family: georgia, palatino, serif;"">responsive design is one of the major requirements in modern web design. making sure the text changes as device width changes often involves using a lot of media queries to change the font sizes. however, there are simpler solutions like using css viewport width and <a title=""clamp()"" href=""https://developer.mozilla.org/en-us/docs/web/css/clamp"" target=""_blank"" rel=""noopener""><code>clamp()</code></a> function which is currently supported in all browsers.</span></p>
<p><span style=""font-family: georgia, palatino, serif;"">we use viewport units to size our text to ensure the typography is responsive to the device's width. instead of setting custom font sizes for each device using media queries, we can ensure that our text is responsive and increases or decreases as device width changes.&nbsp;</span></p>
<p><span style=""font-family: georgia, palatino, serif;"">however, the viewport text can get very small on smaller devices or very large on larger devices, and thus the a need to combine this with clamp(). another problem with viewport units is that you cannot zoom in or out, and thus accessibility features might not work.</span></p>
<p><span style=""font-family: georgia, palatino, serif;"">the&nbsp;<strong><code>clamp()</code></strong>&nbsp;<a href=""https://developer.mozilla.org/en-us/docs/web/css"">css</a>&nbsp;<a href=""https://developer.mozilla.org/en-us/docs/web/css/css_functions"" target=""_blank"" rel=""noopener"">function</a>&nbsp;clamps a middle value within a range of values between a defined minimum bound and a maximum bound. the function takes three parameters: a minimum value, a preferred value, and a maximum allowed value.</span></p>
<pre class=""language-css""><code>:root {
  --min-font-size: 1.2px;
  --max-font-size: 8rem;
  --font-xl: clamp(3.5rem, 12vw+1rem, 8rem);
  --font-md: 2rem;
  --font-sm: 1.5rem;
}
h1 {
  font-size: clamp(var(--min-font-size), 6vw, var(--max-font-size));
}
p {
  font-size: clamp(var(--font-sm), 3vw, var(--font-md));
}</code></pre>
<h2><span style=""font-family: georgia, palatino, serif;"">5. css based validations</span></h2>
<p><span style=""font-family: georgia, palatino, serif;"">if you have ever dealt with forms, then you understand the need to validate form inputs and show errors to users without javascript. errors could include setting a red background color if the input is invalid, and a green when the input is valid. this should be done in combination with html patterns, maxlength, and types.</span></p>
<p><span style=""font-family: georgia, palatino, serif;"">one major problem is that if we give a form input a required attribute and use css invalid property, the form will appear as invalid even when the user has not typed anything. of course, this is a bad experience for the user. to fix this, new css features such as <code>user-invalid</code> and <code>placeholdershown </code>property.</span></p>
<pre class=""language-css""><code>/* the old way */
input:invalid {
  border: 1px solid red;
  background-color: #ff7f7f;
}
input:valid {
  border: 1px solid green;
  background-color: lightgreen;
}
/* show on user input */
input:user-invalid {
  border: 1px solid red;
  background-color: #ff7f7f;
}
input:user-valid {
  border: 1px solid green;
  background-color: lightgreen;
}
/* user-valid and user-invalid has low browser support */
input:not(:placeholder-shown):invalid {
  border: 1px solid red;
  background-color: #ff7f7f;
}
input:not(:placeholder-shown):valid {
  border: 1px solid green;
  background-color: lightgreen;
}
/* placeholder-shown has great browser support */</code></pre>
<p><span style=""font-family: georgia, palatino, serif;"">you can play around with this code in codepen. here are the results.</span></p>
<p><iframe style=""box-sizing: inherit; border: 0px; --tw-border-spacing-x: 0; --tw-border-spacing-y: 0; --tw-translate-x: 0; --tw-translate-y: 0; --tw-rotate: 0; --tw-skew-x: 0; --tw-skew-y: 0; --tw-scale-x: 1; --tw-scale-y: 1; --tw-scroll-snap-strictness: proximity; --tw-ring-offset-width: 0px; --tw-ring-offset-color: #fff; --tw-ring-color: rgba(59,130,246,.5); --tw-ring-offset-shadow: 0 0 #0000; --tw-ring-shadow: 0 0 #0000; --tw-shadow: 0 0 #0000; --tw-shadow-colored: 0 0 #0000; scrollbar-width: auto; scrollbar-color: rgb(59, 130, 246) rgb(255, 255, 255); display: block; vertical-align: middle; margin: max(3.2vmin, 24px) 0px 0px; overflow-x: auto; width: 953px; max-width: 100%; font-style: normal; font-variant-ligatures: normal; font-variant-caps: normal; font-variant-numeric: inherit; font-variant-east-asian: inherit; font-variant-alternates: inherit; font-variant-position: inherit; font-weight: 400; font-stretch: inherit; line-height: inherit; font-family: -apple-system, blinkmacsystemfont, 'segoe ui', roboto, oxygen, ubuntu, cantarell, 'fira sans', 'droid sans', 'helvetica neue', sans-serif; font-optical-sizing: inherit; font-kerning: inherit; font-feature-settings: inherit; font-variation-settings: inherit; font-size: 16px; padding: 0px; grid-column: main-start / main-end; color: rgba(255, 255, 255, 0.75); letter-spacing: normal; orphans: 2; text-align: start; text-indent: 0px; text-transform: none; widows: 2; word-spacing: 0px; -webkit-text-stroke-width: 0px; white-space: normal; background-color: #151719; text-decoration-thickness: initial; text-decoration-style: initial; text-decoration-color: initial; height: 542px; border-radius: 5px !important;"" title=""&lt;details&gt; and &lt;summary&gt; tag"" src=""https://codepen.io/donvine254/embed/rwzmbaz?default-tab=html%2cresult&amp;editable=true&amp;theme-id=light"" width="""" height=""600"" frameborder=""no"" scrolling=""no"" allowfullscreen=""allowfullscreen"" loading=""lazy""></iframe></p>
<h2><span style=""font-family: georgia, palatino, serif;"">conclusion</span></h2>
<p><span style=""font-family: georgia, palatino, serif;"">we have discussed some simple css tricks that could be lifesaving. these tricks could help you avoid overusing javascript for simple tasks that can be accomplished by just css. follow me and sign up to be a tech tales member today to learn more and also share some tricks in the comments.</span></p>",five-must-know-css-tricks-to-save-you-time,"css,frontend,web-dev,beginner",published,1,1083,http://res.cloudinary.com/dipkbpinx/image/upload/v1725018796/tech-tales/cover-images/ascupsqkuuu19jldrjsn.jpg
8,data fetching and caching in nextjs,"<p id=""ember49"" class=""ember-view reader-content-blocks__paragraph"">in the realm of web development, data fetching stands tall as a fundamental aspect, akin to the very fabric that weaves together intricate applications. in this journey through the corridors of react and next.js, let&rsquo;s delve into the art of fetching, caching, and revalidating data, unraveling the mysteries and unveiling the potentials that lie within.</p>
<h3 id=""ember50"" class=""ember-view reader-content-blocks__heading-3"">fetching data on the server with fetch</h3>
<p id=""ember51"" class=""ember-view reader-content-blocks__paragraph"">the saga begins with the native fetch api, a trusty companion in the quest for data. next.js, with its adept prowess, extends fetch to the server, empowering developers to configure caching and revalidating behaviors with finesse. whether it&rsquo;s within server components, route handlers, or server actions, the landscape is ripe for exploration.</p>
<pre class=""language-javascript""><code>async function fetchdata() {
  try {
    const res = await fetch('https://api.example.com/...')
    if (!res.ok) {
      throw new error('failed to fetch data')
    }
    return res.json()
  } catch (error) {
    console.error('error fetching data:', error)
  }
}</code></pre>
<h3 id=""ember52"" class=""ember-view reader-content-blocks__heading-3"">caching: the guardian of data</h3>
<p id=""ember53"" class=""ember-view reader-content-blocks__paragraph"">as data flows into our applications, caching emerges as a stalwart guardian, ensuring swift access and reducing the burden on our sources. next.js, ever vigilant, automatically caches fetch responses on the server, unleashing the power of the data cache.</p>
<pre class=""language-javascript""><code>// utilizing cache-control for caching
fetch('https://...', { cache: 'force-cache' })</code></pre>
<h3 id=""ember54"" class=""ember-view reader-content-blocks__heading-3"">revalidating data: keeping it fresh</h3>
<p id=""ember55"" class=""ember-view reader-content-blocks__paragraph"">yet, in the ever-changing landscape of data, staleness looms as a lurking shadow. fear not, for revalidation comes to our aid, breathing life into our cache and ensuring our data remains as fresh as the morning dew. with next.js, we wield the power to revalidate data based on time or demand, sculpting experiences that stand the test of time.</p>
<pre class=""language-javascript""><code>// revalidating at timed intervals
fetch('https://...', { next: {cache:""force-cache"", revalidate: 3600 } })</code></pre>
<h3 id=""ember56"" class=""ember-view reader-content-blocks__heading-3"">on-demand revalidation: a call to action</h3>
<p id=""ember57"" class=""ember-view reader-content-blocks__paragraph"">in the throes of interaction, on-demand revalidation emerges as our trusted ally. whether it&rsquo;s a form submission or an event trigger, the ability to summon forth the latest data at our command ensures our applications remain responsive and relevant.</p>
<pre class=""language-javascript""><code>import { nextrequest } from 'next/server'
import { revalidatetag } from 'next/cache'
export async function get(request: nextrequest) {
  const tag = request.nexturl.searchparams.get('tag')
  revalidatetag(tag)
  return response.json({ revalidated: true, now: date.now() })
}
// summoning on-demand revalidation
revalidatetag('collection')
</code></pre>
<h3 id=""ember58"" class=""ember-view reader-content-blocks__heading-3"">opting out and beyond</h3>
<p id=""ember59"" class=""ember-view reader-content-blocks__paragraph"">yet, in the vast tapestry of options, lies the freedom to choose. next.js bestows upon us the power to opt out of caching, to dance to our own rhythm, and to dictate the flow of data according to our needs. from individual fetch requests to segment-wide configurations, the canvas is ours to paint.</p>
<pre class=""language-javascript""><code>// opt out of caching for all data requests in the route segment
export const dynamic = 'force-dynamic'</code></pre>
<h3 id=""ember60"" class=""ember-view reader-content-blocks__heading-3"">journey beyond: client-side adventures</h3>
<p id=""ember61"" class=""ember-view reader-content-blocks__paragraph"">as we traverse the realms of react and next.js, we encounter the duality of client-side fetching. from the hallowed halls of route handlers to the enigmatic realms of third-party libraries like swr and tanstack query, the journey continues, each path leading to new discoveries and boundless possibilities.</p>
<p class=""ember-view reader-content-blocks__paragraph"">in the grand tapestry of web development, data fetching, caching, and revalidation stand as pillars of strength, guiding our journey and shaping our experiences. with next.js as our companion, let us embark on this odyssey, where each line of code is a step closer to unlocking the full potential of the digital realm.</p>",data-fetching-and-caching-in-nextjs,"fetch,nextjs,caching,revalidate",published,16,1777,http://res.cloudinary.com/dipkbpinx/image/upload/v1725021126/tech-tales/cover-images/brmhpi80sixzchb70bgw.png
7,best programming langauges to learn in 2024,"<p>as a jobless full-stack software engineer, i always dream of learning php so i can easily buy a lambo like the rest of php developers. however, the ultimate glitch of money making as a programmer is to teach others programming - what a pyramid scheme. consider this my new way of passing my knowldge to you. here is a list programming langauges that are more valuable and in demand in 2024.</p>
<h3 id=""1-javascript"">1. javascript</h3>
<p dir=""ltr"">last year javascript was at the top of the coding languages for beginners, stackoverflow survey report and this year it will be also one of the most popular languages among developers. android, ios, or desktop javascript is almost everywhere and in best programming languages.</p>
<p dir=""ltr"">javascript is providing ultimate business solutions and that is the reason it is on the top of the list for a tech startup and for tech giant companies as well. if you are looking for a job quickly and easily then javascript opens a lot of opportunities for you in the job market.</p>
<p dir=""ltr"">javascript is now&nbsp;<strong>used for both the frontend and backend side</strong>. there are so many frameworks and libraries available for javascript that are quite popular among web developers such as&nbsp;<a href=""https://www.geeksforgeeks.org/angularjs/"" rel=""noopener"">angularjs</a>,&nbsp;<a href=""https://www.geeksforgeeks.org/react-tutorial/"" rel=""noopener"">react</a>,&nbsp;<a href=""https://www.geeksforgeeks.org/vue-js-introduction-installation/"" rel=""noopener"">vue</a>,&nbsp;<a href=""https://www.geeksforgeeks.org/meteor-introduction-to-meteor/"" rel=""noopener"">meteor</a>, and a lot more.</p>
<p dir=""ltr""><strong>key features of javascript:</strong></p>
<ul>
<li dir=""ltr"">interpreted, light-weighted, object-oriented programming.</li>
<li>annual updates.</li>
<li>used for both server-side and client-side programming.</li>
<li>compatible with several programming languages</li>
<li><strong>629k+</strong>&nbsp;repositories on&nbsp;<strong>github</strong>.</li>
</ul>
<p><strong>companies working on javascript:</strong>&nbsp;google, facebook, dell, ebay, paypal, ube<span style=""color: rgb(35, 111, 161);"">r</span></p>
<p dir=""ltr""><strong>javascript code example:</strong></p>
<pre class=""language-javascript""><code>// javascript program to add two numbers
function add(a, b) {
    return a + b;
}
console.log(add(2, 3));  </code></pre>
<div class=""code-output""><strong>output</strong>
<pre>5
</pre>
</div>
<h3 id=""2-python"">2. python</h3>
<p dir=""ltr"">if we talk about easy-to-read, easy-to-learn, and coding languages for beginners then nothing can beat python to come in the list of best programming language and that makes it an excellent choice for beginners.&nbsp;<a href=""https://www.geeksforgeeks.org/python-programming-language/"" rel=""noopener"">python</a>&nbsp;is now being introduced as the very first language in the majority of universities all over the globe.</p>
<p dir=""ltr""><a href=""https://www.geeksforgeeks.org/django-tutorial/"" rel=""noopener"">django</a>,&nbsp;<a href=""https://www.geeksforgeeks.org/flask-tutorial/"" rel=""noopener"">flask</a>, and pyramid these all python frameworks that are popular among developers. python&nbsp;<strong>syntax is user-friendly</strong>&nbsp;in comparison to other languages and that increases developers&rsquo; productivity eventually. these all are the reason it is among one of the top programming languages.&nbsp;</p>
<p dir=""ltr""><strong>key features of python:</strong></p>
<ul>
<li>open source and object-oriented.</li>
<li>can be integrated with c and c++.</li>
<li>cross-browser support.</li>
<li>career in various fields such as scripting, web development, machine learning, deep learning, data science, artificial intelligence, robotics, and big data.</li>
<li><strong>1m+</strong>&nbsp;repositories on&nbsp;<strong>github</strong>.</li>
</ul>
<p><strong>companies working on python:</strong>&nbsp;google, facebook, instagram, spotify, paytm, netflix, quora.</p>
<p dir=""ltr""><strong>python code example:</strong></p>
<pre class=""language-python""><code># python program to add two numbers
def add(a, b):
    return a + b

print(add(2, 3))</code></pre>
<div class=""code-output""><strong>output</strong>
<pre>5
</pre>
</div>
<h3 id=""3-java"">3. java</h3>
<p dir=""ltr"">whether you are in the programming field or not you must have definitely heard about this popular programming language. the reason why&nbsp;<a href=""https://www.geeksforgeeks.org/java/"" rel=""noopener"">java&nbsp;</a>is on the list of top programming languages is that there are so many large organizations still working on this language.</p>
<p dir=""ltr"">java is widely&nbsp;<strong>used in android app development and for building enterprise-scale web applications</strong>. google has also created an excellent java-based android development framework &ndash; android studio.</p>
<p dir=""ltr"">there was a little bit decline in the popularity of java but<a href=""https://www.geeksforgeeks.org/spring-boot/"" rel=""noopener"">&nbsp;<strong>spring boot</strong></a><strong>&nbsp;(the framework of java)</strong>&nbsp;is gaining enormous popularity these days because of some of the recent refinement in the frameworks done recently. the recent update in this framework made it fantastic and probably, it will boost up in the future as well.</p>
<p dir=""ltr""><strong>key features of java</strong></p>
<ul>
<li>open source,&nbsp;<a href=""https://www.geeksforgeeks.org/object-oriented-programming-oops-concept-in-java/"" rel=""noopener"">object-oriented language.</a></li>
<li>cross-platform compatible.</li>
<li>stability, strong memory management, and<a href=""https://www.geeksforgeeks.org/garbage-collection-java/"" rel=""noopener"">&nbsp;automatic garbage collection.</a></li>
<li>high performance, top-notch security.</li>
<li>platform independent because of jvm feature.</li>
<li><strong>1m+</strong>&nbsp;repositories on&nbsp;<strong>github</strong>.</li>
</ul>
<p><strong>companies working on java:</strong>&nbsp;hcl, adobe, intuit, qualcomm, flipkart, amazon.</p>
<p dir=""ltr""><strong>java code example:</strong></p>
<pre class=""language-java""><code> // java program to add two numbers
public class main {
    public static void main(string[] args) {
        int a = 6, b = 3;
        system.out.println(""sum: "" + (a + b)); 
    }
}
 </code></pre>
<p dir=""ltr""><strong>output</strong></p>
<div class=""code-output"">
<pre>sum: 9
</pre>
</div>
<h3 id=""4-c-and-c"">4. c and c++</h3>
<p dir=""ltr"">surely python and javascript are easy-to-learn and easy-to-use languages for most of the applications but when it comes to choosing the&nbsp;<strong>fastest</strong>&nbsp;language then<a href=""https://www.geeksforgeeks.org/c-programming-language/"" rel=""noopener"">&nbsp;c</a>&nbsp;and&nbsp;<a href=""https://www.geeksforgeeks.org/cpp-tutorial/"" rel=""noopener"">c++</a>&nbsp;are the best choices and it is one of the top programming languages in the programming world.</p>
<p dir=""ltr"">a lot of low-level stuff such as operating systems, file systems, embedded systems, and kernel development can be built using c or c++. almost all the modern and popular languages today inherit the properties of c and c++. c++ is still used in microsoft windows and google projects. apple also uses c++ language to develop its ios operating system.</p>
<p dir=""ltr""><strong>key features of c and c++</strong></p>
<ul>
<li>c++ is an object-oriented programming language.</li>
<li>availability of ready-to-use<a href=""https://www.geeksforgeeks.org/cpp-stl-tutorial/"" rel=""noopener"">&nbsp;stl</a>&nbsp;libraries in c++.</li>
<li>used in game development, gui applications, desktop applications, and real-time mathematical simulations.</li>
<li><strong>7m+</strong>&nbsp;repositories for c and&nbsp;<strong>560k+</strong>&nbsp;repositories for c++ on&nbsp;<strong>github</strong></li>
</ul>
<p><strong>companies working on c and c++:</strong>&nbsp;ebay, spotify, adobe, oracle, hp, huawei, ibm, phonepe</p>
<p dir=""ltr""><strong>c code example:</strong></p>
<pre class=""language-c""><code> // c program to add two numbers
#include &lt;stdio.h&gt;
int main() {
    int a = 2, b = 5;
    printf(""sum: %d"", a + b);  
}
 </code></pre>
<p dir=""ltr""><strong>output</strong></p>
<div class=""code-output"">
<pre>sum: 7</pre>
</div>
<p dir=""ltr""><strong>c++ code example:</strong></p>
<pre class=""language-cpp""><code>// c++ program to add two numbers
#include &lt;iostream&gt;
int main() {
    int a = 2, b = 3;
    std::cout &lt;&lt; ""sum: "" &lt;&lt; a + b;  
    return 0;
}</code></pre>
<div class=""code-output""><strong>output</strong>
<pre>sum: 5</pre>
</div>
<h3 id=""5-golang"">5. golang</h3>
<p dir=""ltr"">golang was developed by google and it is also a simple language and top programming languages like python so people who love to work on python, they will definitely love this language as well. this language is pretty much already popular and scaling quite a lot at the&nbsp;<strong>backend services.</strong></p>
<p dir=""ltr"">in past years this language didn&rsquo;t get much popularity but in 2024 it will be rising quite a lot. go language is more efficient than c++ and it provides features to write concurrent programs that are difficult in other programming languages. revel, beego, martini, gin all are popular frameworks of this language.</p>
<p dir=""ltr""><strong>key features of golang:</strong></p>
<ul>
<li>excellent support for multithreading.</li>
<li>fast and easy to learn syntax.</li>
<li>ideal for building&nbsp;<a href=""https://www.geeksforgeeks.org/what-is-spa-single-page-application-in-angularjs/"" rel=""noopener"">spa</a>s (single-page applications).</li>
<li>can be used in a<a href=""https://www.geeksforgeeks.org/what-is-a-distributed-system/"" rel=""noopener"">&nbsp;distributed system</a>,&nbsp;<a href=""https://www.geeksforgeeks.org/what-is-big-data/"" rel=""noopener"">big data</a>,&nbsp;<a href=""https://www.geeksforgeeks.org/cloud-computing/"" rel=""noopener"">cloud computing,</a>&nbsp;and other large-scale or complex applications.</li>
<li><strong>729k+</strong>&nbsp;repositories on&nbsp;<strong>github</strong>.</li>
</ul>
<p><strong>companies working on golang:</strong>&nbsp;uber, google, dailymotion, fabric, medium.</p>
<p dir=""ltr""><strong>golang code example:</strong></p>
<pre class=""language-python""><code> // go program to add two numbers
package main

import ""fmt""

func add(a int, b int) int {
    return a + b
}

func main() {
    fmt.println(""sum:"", add(2, 3)) 
}
 </code></pre>
<p dir=""ltr""><strong>output</strong></p>
<div class=""code-output"">
<pre>sum: 5
</pre>
</div>
<h3 id=""6-swift"">6. swift</h3>
<p dir=""ltr"">swift programming language is developed by apple used to develop ios applications. we all know the popularity of&nbsp;<strong>ios applications</strong>&nbsp;in the market so it&rsquo;s not going anywhere in 2024 as well. it is best programming languages among ios development languages.</p>
<p dir=""ltr"">earlier we just had one single option, swift, to enter ios development but now we also have the option of flutter and react native in the ios market so you will see a little bit of a decline in the popularity of this language. still, some of the things can only be done in swift language (ex-payment stuff) so definitely, it&rsquo;s worth learning swift programming language.<strong>&nbsp;cocoa&nbsp;</strong>and&nbsp;<strong>cloudkit</strong>&nbsp;these two are popular frameworks of<a href=""https://www.geeksforgeeks.org/swift-tutorial/"" rel=""noopener"">&nbsp;swift programming language</a>.</p>
<p dir=""ltr""><strong>key features of swift:</strong></p>
<ul>
<li>used in ios applications, macos development, tvos development, and the whole apple ecosystem.</li>
<li>scalable and easy to add new features.</li>
<li>easy-to-read syntax</li>
<li>automatic memory management prevents memory leaks.</li>
<li>fast in comparison of objective-c and python.</li>
<li><strong>161k+</strong>&nbsp;repositories on&nbsp;<strong>github</strong></li>
</ul>
<p><strong>companies working on swift:</strong>&nbsp;apple, amazon, walmart, uber, slack.</p>
<p dir=""ltr""><strong>swift code example:</strong></p>
<pre class=""language-java""><code>// function to add two numbers directly from arguments
func add(_ num1: int, _ num2: int) -&gt; int {
  return num1 + num2
}

// example usage (directly passing values)
let sum = add(10, 20)

print(""the sum is: \(sum)"")</code></pre>
<div class=""code-output""><strong>output</strong>
<pre>the sum is: 30
</pre>
</div>
<h3 id=""7-kotlin"">7. kotlin</h3>
<p dir=""ltr""><a href=""https://www.geeksforgeeks.org/kotlin-programming-language/"" rel=""noopener"">kotlin&nbsp;</a>was one of the best programming languages in 2024 and the popularity will definitely increase in 2025 as well. when it comes to android app development kotlin has become a recent choice for developers.</p>
<p dir=""ltr"">it can be used with&nbsp;<strong>both frontend and backend frameworks</strong>. the language comes with features such as interoperability with java as well as android studio support. you can do amazing things with fewer bugs and fewer lines of code using kotlin.</p>
<p dir=""ltr"">some of the popular frameworks are ktor, vertex, and spring. you all know the popularity of android in the market so kotlin opens a lot of job opportunities to the developers.&nbsp;</p>
<p dir=""ltr""><strong>key features of kotlin:</strong></p>
<ul>
<li>object-oriented and cross-platform programming language.</li>
<li>secure and flexible.</li>
<li>easy to debug.</li>
<li>79k+ repositories on github.</li>
</ul>
<p><strong>companies working on kotlin</strong>: airtel, lenskart, pinterest, basecamp, slack, trello, google, netflix.</p>
<p dir=""ltr""><strong>kotlin code example:</strong></p>
<pre class=""language-ruby""><code>// kotlin program to add two numbers
fun add(a: int, b: int): int {
    return a + b
}

fun main() {
    println(""sum: ${add(2, 3)}"")  // output: sum: 5
}</code></pre>
<h3 id=""8-c"">8. c#</h3>
<p dir=""ltr""><a href=""https://www.geeksforgeeks.org/csharp-programming-language/"" rel=""noopener"">c#</a>&nbsp;is the one of the top programming languages that is developed by microsoft and it is still a quite popular programming language used in web development, game development (x-box, virtual reality, and unity 3d games), and in windows applications.</p>
<p dir=""ltr"">it has a comprehensive set of libraries that makes the execution and compilation of the program very fast. it is majorly used with the<a href=""https://www.geeksforgeeks.org/introduction-to-net-framework/"" rel=""noopener"">&nbsp;dot net framework</a>(.net).&nbsp;</p>
<p dir=""ltr""><strong>key features of c#:</strong></p>
<ul>
<li>general purpose object-oriented programming language.</li>
<li>fully integrated with the .net library.</li>
<li><strong>19k+</strong>&nbsp;repositories on&nbsp;<strong>github</strong>.</li>
</ul>
<p><strong>companies working on c#:</strong>&nbsp;intellectsoft, philips, capgemini.</p>
<p dir=""ltr""><strong>c# code example:</strong></p>
<pre class=""language-csharp""><code>// c# program to add two numbers
using system;
class program {
    static void main() {
        int a = 2, b = 3;
        console.writeline(""sum: "" + (a + b)); 
    }
}</code></pre>
<p dir=""ltr""><strong>output</strong></p>
<div class=""code-output"">
<pre>sum: 5
</pre>
</div>
<h3 id=""9-r"">9. rust</h3>
<p dir=""ltr""><a href=""https://www.geeksforgeeks.org/introduction-to-rust-programming-language/"" target=""_blank"" rel=""noopener""><strong>rust</strong></a>&nbsp;is a systems programming language known for its performance and safety, particularly safe concurrency. it has a strong focus on memory safety without using garbage collection. rust is gaining popularity among&nbsp;<a href=""https://www.geeksforgeeks.org/system-development-life-cycle/"" target=""_blank"" rel=""noopener""><strong>system developers</strong></a>&nbsp;and is considered a potential replacement for languages like c and c++.</p>
<p dir=""ltr""><strong>key features of rust:</strong></p>
<ul>
<li>memory safety guarantees without a garbage collector</li>
<li>high performance for system-level programming</li>
<li>concurrency without data races</li>
<li>rich type system and ownership model</li>
<li>95k+ repositories on github</li>
</ul>
<p><strong>companies working on rust:</strong> mozilla, dropbox, yelp, cloudflare, prisma, npm</p>
<p dir=""ltr""><strong>rust code example:</strong></p>
<pre class=""language-javascript""><code>fn main() {
    let a = 5;
    let b = 10;

    let sum = a + b;

    println!(""the sum of {} and {} is {}"", a, b, sum);
}</code></pre>
<div class=""code-output""><strong>output</strong>
<pre>the sum of 5 and 10 is 15
</pre>
</div>
<h3 id=""10-php"">10. php</h3>
<p dir=""ltr"">a lot of people agree that php is losing its popularity day by day but we need to mention that it is still highly ranked in the market&nbsp;<strong>php is a cheap, free, and easy-to-use language</strong>. approx. 70-80% of websites (ex: facebook, wikipedia) are still running on php so there is a huge demand for php developers in the market.</p>
<p dir=""ltr"">a lot of developers or freelancers are using this language for web applications. beginners can also choose this language because there is less competition in the market due to the popularity of python and javascript languages.</p>
<p dir=""ltr""><a href=""https://www.geeksforgeeks.org/introduction-to-codeignitor-php/"" rel=""noopener"">codeignitor</a>,&nbsp;<a href=""https://www.geeksforgeeks.org/introduction-to-laravel-and-mvc-framework/"" rel=""noopener"">laravel</a>,<a href=""https://www.geeksforgeeks.org/cakephp-vs-symfony/"" rel=""noopener"">&nbsp;cakephp, and symfony&nbsp;</a>all are&nbsp;<strong>popular frameworks of php</strong>&nbsp;to make dynamic web applications.&nbsp;</p>
<p dir=""ltr""><strong>key features of php:</strong></p>
<ul>
<li>functional and object-oriented programming</li>
<li>platform independent.</li>
<li>easy to get started for making web pages.</li>
<li>a lot of automation tools are available for testing and deployment.</li>
<li><strong>540k+</strong>&nbsp;repositories on&nbsp;<strong>github</strong></li>
</ul>
<p><strong>companies working on php:</strong> oracle, hcl, motorola, facebook.</p>
<p dir=""ltr""><strong>php code example:</strong></p>
<pre class=""language-php""><code>&lt;?php
$number1 = 10;
$number2 = 20;
$sum = $number1 + $number2;
echo ""the sum of $number1 and $number2 is: $sum"";
?&gt;</code></pre>
<div class=""code-output""><strong>output</strong>
<pre>the sum of 10 and 20 is: 30</pre>
</div>
<h2>top 10 best programming languages to learn in 2024 &ndash; comparison table</h2>
<table style=""border-collapse: collapse; border: 2px solid rgb(0, 0, 0); background-color: rgb(194, 224, 244);"" border=""1"">
<thead>
<tr>
<th style=""border-width: 2px; border-color: rgb(0, 0, 0);""><strong>programming language</strong></th>
<th style=""border-width: 2px; border-color: rgb(0, 0, 0);""><strong>key features</strong></th>
<th style=""border-width: 2px; border-color: rgb(0, 0, 0);""><strong>popular uses</strong></th>
<th style=""border-width: 2px; border-color: rgb(0, 0, 0);""><strong>companies using it</strong></th>
<th style=""border-width: 2px; border-color: rgb(0, 0, 0);""><strong>average salary</strong></th>
</tr>
</thead>
<tbody>
<tr>
<th style=""border-width: 2px; border-color: rgb(0, 0, 0);"">javascript</th>
<td style=""border-width: 2px; border-color: rgb(0, 0, 0);"">versatile, client-side scripting, frameworks</td>
<td style=""border-width: 2px; border-color: rgb(0, 0, 0);"">web development, front-end &amp; back-end</td>
<td style=""border-width: 2px; border-color: rgb(0, 0, 0);"">google, facebook, paypal, uber, netflix</td>
<td style=""border-width: 2px; border-color: rgb(0, 0, 0);"">$110,000</td>
</tr>
<tr>
<th style=""border-width: 2px; border-color: rgb(0, 0, 0);"">python</th>
<td style=""border-width: 2px; border-color: rgb(0, 0, 0);"">easy-to-learn, versatile, extensive libraries</td>
<td style=""border-width: 2px; border-color: rgb(0, 0, 0);"">web development, ai, ml, data science</td>
<td style=""border-width: 2px; border-color: rgb(0, 0, 0);"">google, facebook, instagram, spotify, netflix</td>
<td style=""border-width: 2px; border-color: rgb(0, 0, 0);"">$120,000</td>
</tr>
<tr>
<th style=""border-width: 2px; border-color: rgb(0, 0, 0);"">java</th>
<td style=""border-width: 2px; border-color: rgb(0, 0, 0);"">object-oriented, platform-independent</td>
<td style=""border-width: 2px; border-color: rgb(0, 0, 0);"">android apps, enterprise-scale applications</td>
<td style=""border-width: 2px; border-color: rgb(0, 0, 0);"">amazon, flipkart, adobe, intuit, qualcomm</td>
<td style=""border-width: 2px; border-color: rgb(0, 0, 0);"">$115,000</td>
</tr>
<tr>
<th style=""border-width: 2px; border-color: rgb(0, 0, 0);"">c/c++</th>
<td style=""border-width: 2px; border-color: rgb(0, 0, 0);"">fast, efficient, system programming</td>
<td style=""border-width: 2px; border-color: rgb(0, 0, 0);"">operating systems, game development, embedded systems</td>
<td style=""border-width: 2px; border-color: rgb(0, 0, 0);"">ebay, spotify, adobe, oracle, ibm</td>
<td style=""border-width: 2px; border-color: rgb(0, 0, 0);"">$125,000</td>
</tr>
<tr>
<th style=""border-width: 2px; border-color: rgb(0, 0, 0);"">go</th>
<td style=""border-width: 2px; border-color: rgb(0, 0, 0);"">concurrency support, efficient</td>
<td style=""border-width: 2px; border-color: rgb(0, 0, 0);"">backend services, large-scale applications</td>
<td style=""border-width: 2px; border-color: rgb(0, 0, 0);"">google, uber, medium, dailymotion, fabric</td>
<td style=""border-width: 2px; border-color: rgb(0, 0, 0);"">$130,000</td>
</tr>
<tr>
<th style=""border-width: 2px; border-color: rgb(0, 0, 0);"">swift</th>
<td style=""border-width: 2px; border-color: rgb(0, 0, 0);"">ios/macos development, modern syntax</td>
<td style=""border-width: 2px; border-color: rgb(0, 0, 0);"">ios applications, apple ecosystem</td>
<td style=""border-width: 2px; border-color: rgb(0, 0, 0);"">apple, amazon, uber, slack, walmart</td>
<td style=""border-width: 2px; border-color: rgb(0, 0, 0);"">$115,000</td>
</tr>
<tr>
<th style=""border-width: 2px; border-color: rgb(0, 0, 0);"">kotlin</th>
<td style=""border-width: 2px; border-color: rgb(0, 0, 0);"">interoperable with java, concise syntax</td>
<td style=""border-width: 2px; border-color: rgb(0, 0, 0);"">android apps, backend development</td>
<td style=""border-width: 2px; border-color: rgb(0, 0, 0);"">google, pinterest, trello, slack, netflix</td>
<td style=""border-width: 2px; border-color: rgb(0, 0, 0);"">$110,000</td>
</tr>
<tr>
<th style=""border-width: 2px; border-color: rgb(0, 0, 0);"">c#</th>
<td style=""border-width: 2px; border-color: rgb(0, 0, 0);"">object-oriented, .net integration</td>
<td style=""border-width: 2px; border-color: rgb(0, 0, 0);"">web development, game development, windows applications</td>
<td style=""border-width: 2px; border-color: rgb(0, 0, 0);"">microsoft, intellectsoft, philips, capgemini</td>
<td style=""border-width: 2px; border-color: rgb(0, 0, 0);"">$120,000</td>
</tr>
<tr>
<th style=""border-width: 2px; border-color: rgb(0, 0, 0);"">rust</th>
<td style=""border-width: 2px; border-color: rgb(0, 0, 0);"">memory safety, system programming</td>
<td style=""border-width: 2px; border-color: rgb(0, 0, 0);"">system software, high-performance applications</td>
<td style=""border-width: 2px; border-color: rgb(0, 0, 0);"">mozilla, dropbox, discord, coursera, aws</td>
<td style=""border-width: 2px; border-color: rgb(0, 0, 0);"">$130,000</td>
</tr>
<tr>
<th style=""border-width: 2px; border-color: rgb(0, 0, 0);"">php</th>
<td style=""border-width: 2px; border-color: rgb(0, 0, 0);"">server-side scripting, easy integration</td>
<td style=""border-width: 2px; border-color: rgb(0, 0, 0);"">web development, dynamic websites, content management systems</td>
<td style=""border-width: 2px; border-color: rgb(0, 0, 0);"">facebook, wikipedia, wordpress, slack, mailchimp</td>
<td style=""border-width: 2px; border-color: rgb(0, 0, 0);"">$105,000</td>
</tr>
</tbody>
</table>
<p><em><strong><strong class=""gfgeditortheme__textitalic"">note on average salary:</strong></strong></em><em><em class=""gfgeditortheme__textitalic""> the average salary figures provided are approximate and can vary based on factors such as location, level of experience, and specific industry demands. they serve as a general guideline to understand the earning potential associated with each programming language.</em></em></p>
<p>&nbsp;</p>",best-programming-langauges-to-learn-in-2024,"programming,javascript,python,c++",published,13,1969,http://res.cloudinary.com/dipkbpinx/image/upload/v1725021930/tech-tales/cover-images/wba5nxgwln4ac3tc0onr.png
57,8 tools you need to build your first saas and scale faster,"<p>building a successful saas product requires more than just a great idea. you need the right tools to streamline development, manage infrastructure, and optimize your user experience. luckily enough, you do not need to reinvent the wheel since there are great saas products that you can integrate into your project and therefore build and ship faster. this post will guide you through eight essential tools that can help you build your first saas product and scale faster.</p>
<div id=""toc"" class=""mce-toc"">
<h2>table of contents</h2>
<ol>
<li>1. <a href=""#1.-vercel-for-v0:-generate-ui-in-seconds!"">v0 by vercel: generate ui in seconds!</a></li>
<li>2. <a href=""#2.-ui-verse:-over-5k-ui-elements"">ui verse: over 5k ui elements</a></li>
<li>3. <a href=""#3.-shadcn:-the-hottest-ui-library"">shadcn: the hottest ui library</a></li>
<li>4. <a href=""#4.-kinde/clerk-for-authentication"">kinde/clerk for authentication</a></li>
<li>5. <a href=""#5.-supabase:-backend-as-a-service"">supabase: backend as a service</a></li>
<li>6. <a href=""#6.-resend-for-email-infrastructure"">resend for email infrastructure</a></li>
<li>7. <a href=""#7.-stripe-for-payments"">stripe for payments</a></li>
<li>8. <a href=""#8.-vercel-for-serverless-functions"">vercel for serverless functions</a></li>
<li>9. <a href=""#conclusion"">conclusion</a></li>
</ol>
</div>
<h2 id=""conclusion"">1. v0 by vercel: generate ui in seconds!</h2>
<p><img src=""https://res.cloudinary.com/dipkbpinx/image/upload/v1729720437/tech-tales/blog-images/tzw9vztac7arwgomaarq.png""></p>
<p>vercel v0 launched in 2024 and has been a useful tool for front-end developers as it helps generate react-based user interfaces styled with tailwind css and shadcn. developers can generate beautiful ui designs from a single prompt and continue iterating on the design or copy and modify the code.</p>
<p>one of v0's unique selling points is that it provides both visualization and the actual code. if you have any suggestions or feedback for improvement, you can follow up with a prompt explaining what you want. v0 will iterate on the existing output and update the code with the newly suggested changes in real-time.</p>
<p>v0 has a message limit, with the premium version priced at $20. if you are looking for similar but free tools check out&nbsp;<a href=""https://www.webcrumbs.org/frontend-ai"" target=""_blank"" rel=""noopener noreferrer"">webcrumbs</a>&nbsp;and&nbsp;<a href=""http://bolt.new/"" target=""_blank"" rel=""noopener noreferrer"">bolt. new</a>. both offer free ui generation options!</p>
<p style=""text-align: center;""><a style=""border-radius: 5px; padding: 10px; background-color: #eeeeee; border: 1px solid;"" role=""button"" href=""https://v0.dev/"" target=""_blank"" rel=""noopener"">⚡️ check out v0 ⚡️</a></p>
<h2>2. ui verse: over 5k ui elements</h2>
<p>ui libraries come in handy and provide great value to the development process. uiverse is a library of pre-built ui components that can significantly accelerate your front-end development. it offers a vast collection of customizable components, saving you time and resources. unline other opinionated components library, uiverse includes styled components that you can copy and paste to your project without the need to install anything.</p>
<p><img src=""https://res.cloudinary.com/dipkbpinx/image/upload/v1729717459/tech-tales/blog-images/mz5rodguxbuze22mfnrz.png""></p>
<p style=""text-align: center;""><a style=""border-radius: 5px; padding: 10px; background-color: #eeeeee; border: 1px solid;"" role=""button"" href=""https://uiverse.io/elements"" target=""_blank"" rel=""noopener"">⚡️ check out uiverse ⚡️</a></p>
<h2>3. shadcn: the hottest ui library</h2>
<p><img src=""https://res.cloudinary.com/dipkbpinx/image/upload/v1729720484/tech-tales/blog-images/kikqmntg4fdc2ovuluvg.png""></p>
<p>shadcn is a design system library that helps you create consistent and maintainable user interfaces. it offers pre-defined components, styles, and patterns that ensure a cohesive visual experience across your application.</p>
<p>shadcn is built on top of tailwind css and includes a tonne of pre-built components that are free to use and easily customizable. it's not a component library, which means we don&rsquo;t need to install it as a package. shadcn also solves the problem of bloating the codebase by ensuring you only add a component that you need instead of downloading the whole library.</p>
<p>to get started and running with shadcn, you can add it directly from the command line:</p>
<pre class=""language-shell""><code>npx shadcn@latest init

you will be asked a few questions to configure components.json:

which style would you like to use? &rsaquo; new york
which color would you like to use as base color? &rsaquo; zinc
do you want to use css variables for colors? &rsaquo; no / yes</code></pre>
<p>after adding the library, you just need to add the component that you need and get up and running:</p>
<pre class=""language-typescript""><code>npx shadcn@latest add button

//the command above will add the button component to your project.
//you can then import it like this:
import { button } from ""@/components/ui/button""

export default function home() {
    return (
        &lt;div&gt;
        &lt;button&gt;click me &lt; /button&gt;
            &lt; /div&gt;
  )
}</code></pre>
<p style=""text-align: center;""><a style=""border-radius: 5px; padding: 10px; background-color: #eeeeee; border: 1px solid;"" role=""button"" href=""https://ui.shadcn.com/"" target=""_blank"" rel=""noopener noreferrer"">⚡️ check out shadcn ⚡️</a></p>
<h2>4. kinde/clerk for authentication</h2>
<p><img src=""https://res.cloudinary.com/dipkbpinx/image/upload/v1729720524/tech-tales/blog-images/kpoxvjfq1q3efdvd6zpu.png""></p>
<p>kinde and clerk provide a unique solution to handling user authentication that can help you get started with managing user sessions, role-based access, and permissions. with kinde or clerk, you can implement user authentication in minutes, freeing up time to focus on the features that will make your product stand out.</p>
<p>they both offer pre-built uis that you can incorporate into your application without even creating a login or register page, and allow for easier sso login, with multi-factor authentication ensuring your authentication remains fast and reliable, even under heavy load.</p>
<p>furthermore, both kinde and clerk allow individuals to brand their login pages, although you can experience a challenge linking the users in kinde and clerk to your database to record other data but this should not be a problem if you understand webhooks.</p>
<p>to get started with the two auth providers (choose one), you will have to install them via the terminal.</p>
<pre class=""language-shell""><code># example for clerk 
npm install @clerk/nextjs

# update the env file

# .env.local

1. next_public_clerk_publishable_key=your_publishable_key
2. clerk_secret_key=your_secret_key</code></pre>
<h2>5. supabase: backend as a service</h2>
<p><img src=""https://res.cloudinary.com/dipkbpinx/image/upload/v1729720552/tech-tales/blog-images/cgwytcwj0gfprfim2s0y.png""></p>
<p>the backend infrastructure is the backbone of any saas, but building and maintaining a scalable backend from scratch can be a nightmare, especially if you&rsquo;re a solo founder or working with a small team.</p>
<p>supabase is an open-source firebase alternative that provides a database, authentication, storage, and more. this simplifies your back-end development and allows you to focus on building your application's core features.</p>
<p><a href=""https://supabase.com/"" target=""_blank"" rel=""noopener noreferrer"">supabase</a>&nbsp;is a fully-featured backend as a service (baas) that allows you to focus on building your app without worrying about the complexities of database management, apis, and real-time updates.</p>
<p>with&nbsp;<a href=""https://supabase.com/"" target=""_blank"" rel=""noopener noreferrer"">supabase</a>, we get a postgresql database, restful apis, real-time subscriptions, and much more &ndash; all out of the box.</p>
<p>let&rsquo;s say you&rsquo;re building a project management tool. with supabase, you can quickly set up user accounts, store project details, and even implement real-time collaboration features without writing a single line of backend code.</p>
<p><a href=""https://supabase.com/"" target=""_blank"" rel=""noopener noreferrer"">supabase</a>&nbsp;manages everything behind the scenes, so you can focus on delivering a great product experience to your users.</p>
<p>you can check out the&nbsp;<a href=""https://supabase.com/docs"" target=""_blank"" rel=""noopener noreferrer"">docs</a>&nbsp;to know more about them.</p>
<p style=""text-align: center;""><a style=""border-radius: 5px; padding: 10px; background-color: #eeeeee; border: 1px solid;"" role=""button"" href=""https://supabase.com/"" target=""_blank"" rel=""noopener noreferrer"">⚡️ check out supabase ⚡️</a></p>
<h2>6. resend for email infrastructure</h2>
<p><img src=""https://res.cloudinary.com/dipkbpinx/image/upload/v1729718981/tech-tales/blog-images/f9raqluuxgcajrjk5ycf.png""></p>
<p>email is still one of the most important communication channels for any saas.</p>
<p>when you&rsquo;re just starting, you don&rsquo;t want to spend hours setting up email infrastructure.</p>
<p>with resend, you can integrate email into your app in minutes and ensure your emails land in users&rsquo; inboxes, not their spam folders.</p>
<p>resend also provides detailed analytics, so you can track open rates, clicks, and more, giving you valuable insights into how your emails are performing.</p>
<p>this feature can be crucial to measuring the success of marketing campaigns, newsletters, etc.</p>
<p>setting up&nbsp;<a href=""https://resend.com/"" target=""_blank"" rel=""noopener noreferrer"">resend</a> is straightforward.</p>
<p>first, install the npm package:</p>
<pre class=""language-shell""><code>npm install resend</code></pre>
<p>then create a server to send an email by using the&nbsp;<code>html</code> parameter.</p>
<pre class=""language-typescript""><code>//server.ts
import { resend } from 'resend';

const resend = new resend('re_123456789');

(async function () {
    const { data, error } = await resend.emails.send({
        from: 'acme &lt;onboarding@resend.dev&gt;',
        to: ['arindammajumder2020@gmail.com'],
        subject: 'hello arindam',
        html: '&lt;strong&gt;really love this tool! thanks for sharing&lt;/strong&gt;',
    });

    if (error) {
        return console.error({ error });
    }

    console.log({ data });
})();</code></pre>
<p>that&rsquo;s it!&nbsp;<a href=""https://resend.com/"" target=""_blank"" rel=""noopener noreferrer"">resend</a>&nbsp;will do the rest of the work for you.</p>
<p>this was a very simple implementation that i&rsquo;ve shown, for more complex ones, you can check out their&nbsp;<a href=""https://resend.com/docs/introduction"" target=""_blank"" rel=""noopener noreferrer"">documentation</a>.</p>
<p style=""text-align: center;""><a style=""border-radius: 5px; padding: 10px; background-color: #eeeeee; border: 1px solid;"" role=""button"" href=""https://resend.com/"" target=""_blank"" rel=""noopener noreferrer"">⚡️ check out resend ⚡️</a></p>
<h2>7. stripe for payments</h2>
<p><img src=""https://res.cloudinary.com/dipkbpinx/image/upload/v1729720591/tech-tales/blog-images/xwhjgoma0pm2sa7slp6j.png""></p>
<p>ensuring you are paid for your software is the main idea of saas and thus having a robust payment provider can help hand off the complexity of building and running a saas business and allow you to focus on delivering software their customers will love.</p>
<p>stripe is the leading payment processing platform for online businesses. it allows you to accept payments from various sources securely and efficiently, crucial for any saas product.</p>
<p>stipe supports global payments and includes its own ui components that you can add directly to your project. however, stripe does not work in all countries, and this might be a challenge to some developers based on their geographic location.</p>
<p>stripe also has support for usage-based billing, which is essential for many saas products. it's really simple to use and you could integrate it with your authentication stack.</p>
<p>to get started with stripe, create a&nbsp;<a href=""https://stripe.com"" target=""_blank"" rel=""noopener"">stripe account</a> and install their package.&nbsp;</p>
<pre class=""language-shell""><code>npm install stripe --save</code></pre>
<p>after installing the package, you must update your environment to include the stripe secret key. to use stripe, you simply need to follow the code, or you can use their api endpoint.</p>
<pre class=""language-typescript""><code>const stripe = require('stripe')('sk_test_4ec39hqlyjwdarjtt1zdp7dc');

stripe.products.create({
    name: 'starter subscription',
    description: '$12/month subscription',
}).then(product =&gt; {
    stripe.prices.create({
        unit_amount: 1200,
        currency: 'usd',
        recurring: {
            interval: 'month',
        },
        product: product.id,
    }).then(price =&gt; {
        console.log('success! here is your starter subscription product id: ' + product.id);
        console.log('success! here is your starter subscription price id: ' + price.id);
    });
});</code></pre>
<blockquote>
<p><strong>note</strong></p>
<p>this sample uses your stripe user <a class=""link ⚙ rs30 rs31 rs31 as32 as33 as34 as35 as33n as33o as3z as310 as33p as32e as32k as32j as32l as33q as33r as33s ⚙ajq4ta"" tabindex=""0"" href=""https://docs.stripe.com/get-started/account/activate"">account</a>&rsquo;s default keys for&nbsp;<a class=""unstyledlink inlinelink text-color--blue glossary-term no-api-tag"" title=""test mode"" href=""https://docs.stripe.com/test-mode"">test mode</a>. only you can see these values.</p>
</blockquote>
<p style=""text-align: center;""><a style=""border-radius: 5px; padding: 10px; background-color: #eeeeee; border: 1px solid;"" role=""button"" href=""https://docs.stripe.com"" target=""_blank"" rel=""noopener"">⚡️ check out stripe ⚡️</a></p>
<p>&nbsp;</p>
<h2>8. vercel for serverless functions</h2>
<p><img src=""https://res.cloudinary.com/dipkbpinx/image/upload/v1729720659/tech-tales/blog-images/kz11ssfiixpcwyumedao.png""></p>
<p>after putting all the hard work into building your saas, you need a solid platform to deploy it.</p>
<p><a href=""https://vercel.com/"" target=""_blank"" rel=""noopener noreferrer"">vercel</a>&nbsp;is the go-to solution for deploying modern web apps.</p>
<p>whether you&rsquo;re using next.js, react, or any other framework, vercel takes care of the heavy lifting, ensuring your app is fast, reliable, and globally distributed.</p>
<p><a href=""https://vercel.com/"" target=""_blank"" rel=""noopener noreferrer"">vercel</a> is famous for its amazing developer experience.&nbsp;</p>
<p>it&rsquo;s not just only about deployment &ndash; it also provides built-in features like serverless functions, cdn integration, and analytics, making it easier than ever to monitor and optimize your app&rsquo;s performance like the automatic deployments from git. with it, i can push code changes to production with zero downtime.</p>
<p>for example, you&rsquo;ve built your saas using react and next.js, and now it&rsquo;s time to go live.</p>
<p>with&nbsp;<a href=""https://vercel.com/"" target=""_blank"" rel=""noopener noreferrer"">vercel</a>, you simply connect your github repository, and in a matter of seconds, your app is deployed to the cloud, optimized for performance, and ready for users.</p>
<p>it&rsquo;s that easy &ndash; no need to worry about setting up servers or managing infrastructure.</p>
<blockquote>
<p>alternatively, you can use cloudflare to deploy your applications</p>
</blockquote>
<p style=""text-align: center;""><a style=""border-radius: 5px; padding: 10px; background-color: #eeeeee; border: 1px solid;"" role=""button"" href=""https://vercel.com/"" target=""_blank"" rel=""noopener noreferrer"">⚡️ check out vercel ⚡️</a></p>
<h2>conclusion</h2>
<p>these eight tools are invaluable for building and scaling your first saas product. by leveraging these resources, you can streamline development, manage your infrastructure efficiently, and focus on delivering a fantastic user experience. remember that the right tools can significantly impact your success. so, take the time to explore these options and choose the ones that best fit your needs and vision.</p>",8-tools-you-need-to-build-your-first-saas-and-scale-faster-,"saas,tools,webdev,beginners",published,2,340,http://res.cloudinary.com/dipkbpinx/image/upload/v1729716823/tech-tales/cover-images/lc9zoubtqhrec35vj3so.jpg
43,a detailed guide on how to create ruby on rails application (api),"<p>if you know me well, i am that&nbsp;<code>ruby</code> girl that enjoys working with <code>ruby on rails</code>. as a language designed to make developers happy, rails surely offer alot of flexibility to developers, including some generators that can generate anything with just one line of code! this guide will discuss how to create a <code>ruby on rails api</code>, assuming you have rails installed.</p>
<p>ruby on rails api refers to the application programming interface (api) framework provided by the ruby on rails (rails) web application framework. it allows developers to build and expose apis for their web applications efficiently.</p>
<h2>why choose rails for api development?</h2>
<h3 style=""padding-left: 40px;"">1. <strong>activerecord orm</strong></h3>
<p style=""padding-left: 40px;"">rails includes activerecord, a robust object-relational mapping (orm) system that simplifies database interactions. it allows you to work with databases using ruby objects and eliminates the need to write complex sql queries for most operations.</p>
<h3 style=""padding-left: 40px;"">2. <strong>convention over configuration</strong></h3>
<p style=""padding-left: 40px;"">rails is built around the principle of ""convention over configuration,"" meaning it provides sensible defaults, reducing the decision-making and configuration developers need to do.</p>
<h3 style=""padding-left: 40px;"">3. <strong>rich ecosystem of gems</strong></h3>
<p style=""padding-left: 40px;"">rails has a vast ecosystem of gems (libraries) that extend its functionality. whether you need authentication, background processing, or payment integration, there&rsquo;s likely a gem that fits your needs.</p>
<h3 style=""padding-left: 40px;"">4. <strong>scaffolding</strong></h3>
<p style=""padding-left: 40px;"">rails provides generators that can create models, controllers, views, and even tests for you. this feature helps to quickly spin up resources, allowing you to focus more on building the core functionality of your application.</p>
<h3 style=""padding-left: 40px;"">5. <strong>built-in security features</strong></h3>
<p style=""padding-left: 40px;"">rails includes many security features, such as protection against sql injection, cross-site scripting (xss), and cross-site request forgery (csrf).</p>
<h2>step-by-step guide to building an api</h2>
<p>for this tutorial, we are going to build a simple <code>ruby api</code> for tesla that returns a list of their vehicle models with the model name, year of manufacture, picture, and price.</p>
<h2>step 1: create a new rails project</h2>
<p>assuming you have installed ruby on rails, open the terminal and run:</p>
<pre class=""language-bash""><code>rails new tesla --api --skip-test-unit &amp;&amp; cd tesla</code></pre>
<p>if you do not have rails installed, see here <a title=""how to install ruby on rails"" href=""https://guides.rubyonrails.org/v5.0/getting_started.html"" target=""_blank"" rel=""noopener"">how to install</a> or run the following command:</p>
<pre class=""language-bash""><code>gem install rails</code></pre>
<h2>2. <strong>generating the vehicle model and controller</strong></h2>
<p>next, we need to leverage the power of rails to scaffold models and get started quicker. rails come with different commands, which you can view by running <code>rails --help</code>. one of those commands is <code>rails generate </code>which uses rails generator to create <code class=""highlight console""><span class=""go"">assets model routes channel
  controller
  generator</span></code> based on existing templates.</p>
<p>we will create our model, controller, and routes using the rails generator to make things easier.</p>
<pre class=""language-powershell""><code>rails generate scaffold vehicle name:string year_of_manufacture:integer price:decimal picture:string --no-test-framework
</code></pre>
<p>this command will create:</p>
<ul>
<li>a <span style=""color: #3598db;""><strong>vehicle</strong></span> model with attributes: <em><span style=""color: #3598db;"">name, year_of_manufacture, price</span></em>, and <em><span style=""color: #3598db;"">picture</span></em>.</li>
<li>a <span style=""color: #3598db;""><strong>vehiclescontroller</strong></span> with all the standard restful actions.</li>
<li>the necessary routes for the <span style=""color: #3598db;"">vehicles</span> resource</li>
</ul>
<h2>3. <strong>running migrations</strong></h2>
<p>out of the box, rails works with <code>sqlite3</code> database and thus you need to ensure you have it installed or provide an alternative database such as postgres when setting up the app. you can also edit the <code>database.yaml</code> file to add your database url. for this scenario, we will work with the default database.</p>
<p>we need to use <code>rails:migrate </code>to run migrations for our database using activerecord. rails will automatically create a database for you if it does not exist and create <code>vehicles</code>table with the specified columns.</p>
<pre class=""language-bash""><code>rails db:migrate</code></pre>
<h2>step 4: creating seed data 🌱 (optional)</h2>
<p>to populate your database with some initial data, you can create a seed file. rails provides a convenient way to seed the database with data you can use for testing or development. to add data, open&nbsp;<code>db/seeds.rb</code>. you&rsquo;ll see that there are already some examples there, but we&rsquo;ll need to delete these and add our own:</p>
<h3>here is a sample seed data:</h3>
<pre class=""language-ruby""><code>vehicle.create!([
  { name: 'tesla model s', price: '51885.17', picture: 'https://static-assets.tesla.com/configurator/compositor?&amp;options=$mt337,$ppsw,$w40b,$ibb1&amp;view=stud_front34&amp;model=m3&amp;size=1920&amp;bkba_opt=2&amp;version=v0028d202109300916&amp;crop=0,0,0,0&amp;version=v0028d202109300916', year_of_manufacture: 2012 },
  { name: 'tesla model 3', price: '100990', picture: 'https://static-assets.tesla.com/configurator/compositor?&amp;options=$mts10,$ppsw,$ws90,$ibe00&amp;view=front34&amp;model=ms&amp;size=1920&amp;bkba_opt=2&amp;version=v0028d202109300916&amp;crop=0,0,0,0&amp;version=v0028d202109300916', year_of_manufacture: 2017 },
  { name: 'tesla model x', price: '120990', picture: 'https://static-assets.tesla.com/configurator/compositor?&amp;options=$mtx10,$ppsw,$wx00,$ibe00&amp;view=front34&amp;model=mx&amp;size=1920&amp;bkba_opt=2&amp;version=v0028d202109300916&amp;crop=0,0,0,0&amp;version=v0028d202109300916', year_of_manufacture: 2015 },
  { name: 'tesla model y', price: '65000', picture: 'https://static-assets.tesla.com/configurator/compositor?&amp;options=$mty07,$ppsw,$wy19b,$inpb0&amp;view=front34&amp;model=my&amp;size=1920&amp;bkba_opt=2&amp;version=v0028d202109300916&amp;crop=0,0,0,0&amp;version=v0028d202109300916', year_of_manufacture: 2020 }
])</code></pre>
<p>then, run the seed file to populate your database:</p>
<pre class=""language-bash""><code>rails db:seed</code></pre>
<h1>step 5: customizing the controller</h1>
<p>the <code>rails generate</code> command automatically generates a controller with all the methods. however, we need some additional modifications to rescue from <code>activerecord errors</code> and also restrict the types of <code>params</code> we accept when creating a new vehicle.</p>
<p>navigate to <code>/app/controllers/vehicle_controller.rb</code> and add the following code:</p>
<pre class=""language-ruby""><code>class vehiclescontroller &lt; applicationcontroller
  rescue_from activerecord::recordnotfound, with: :render_not_found
  rescue_from activerecord::recordinvalid, with: :render_unprocessable_entity
  # get /vehicles
  def index
    @vehicles = vehicle.all
    if params[:name].present?
      @vehicles = @vehicles.where(name: params[:name])
    end
    if params[:year_of_manufacture].present?
      @vehicles = @vehicles.where(year_of_manufacture: params[:year_of_manufacture])
    end
    if params[:price].present?
      begin
        @vehicles = @vehicles.where(price: params[:price])
      rescue argumenterror
        render json: { error: 'invalid price parameter' }, status: :bad_request
        return
      end
    end
    render json: @vehicles
  end
  # get /vehicles/:id
  def show
    @vehicle = vehicle.find(params[:id])
    render json: @vehicle
  end
  # post /vehicles
  def create
    @vehicle = vehicle.create!(vehicle_params)
    render json: @vehicle, status: :created
  end
  # patch/put /vehicles/:id
  def update
    @vehicle = vehicle.find(params[:id])
    @vehicle.update!(vehicle_params)
    render json: @vehicle
  end
  # delete /vehicles/:id
  def destroy
    @vehicle = vehicle.find(params[:id])
    @vehicle.destroy!
    head :no_content
  end
  private
  def vehicle_params
    params.require(:vehicle).permit(:name, :year_of_manufacture, :price, :picture)
  end
  def render_not_found
    render json: { errors: ['vehicle not found'] }, status: :not_found
  end
  def render_unprocessable_entity(invalid)
    render json: { errors: invalid.record.errors }, status: :unprocessable_entity
  end
end</code></pre>
<p>this sample has been modified with extra safety and error handling when a record is not found or cannot be created. the <code>index</code> action has also been updated to handle query parameters for filtering the results. it also includes error handling for invalid price parameters.</p>
<h1>step 5: start the server and get the data</h1>
<p>while you could have started the server earlier on by running <code>rails s</code>, the page would only show the welcome page for rails. now since we have data, start the server and go to <code>/vehicles</code> to make a get request and return the list of vehicles.</p>
<pre class=""language-bash""><code>rails s
#test with curl
curl http://localhost:3000/vehicles</code></pre>
<p>you can also test the api using <code>postman</code> or <code>thunderbird</code> extension in <code>vs code</code> for the <code>get, create, update and delete</code> commands. furthermore, you can debug or even create new vehicles in the database in the rails console by running&nbsp;<code>rails c</code>.&nbsp;</p>
<p><img src=""https://res.cloudinary.com/dipkbpinx/image/upload/v1724626995/tech-tales/blog-images/aeicetu31ybjtjwfm2fi.png"" alt=""ruby-on-rails image"" width=""1280"" height=""513""></p>
<h2>step 6: modifying routes</h2>
<p>rails can display a list of all created routes if you run <code>rails routes</code>, which is useful for tracking down routing problems in your app, or giving you a good overview of the urls in an app you're trying to get familiar with.</p>
<p>you also have the freedom of renaming your routes any way you like, for example instead of the create route for users, you can rename the route <code>signup</code> and then map it to the users create controller. we can do this by modifying the <code>config/routes.rb</code> file.</p>
<h3>here is an example:</h3>
<pre class=""language-ruby""><code>rails.application.routes.draw do
  resources :vehicles
  resources :users
  post '/signup', to: 'users#create'
  # defines the root path route (""/"")
end</code></pre>
<h2>step 7: serializing data</h2>
<p>we all know it is annoying to return irrelevant data such as created_at_date and updated_at_date in api requests unless we need such data. luckily, <code>activemodel::serializer</code> allows us to state which data we want to return in our api requests, thus making the response time even faster.</p>
<p>to use the gem, we need to add it to the gem file and run <code>bundle install</code>. the bundle install command in ruby on rails projects is used to install the necessary gems (ruby libraries or packages) specified in the project&rsquo;s gemfile.</p>
<pre class=""language-bash""><code>gem 'active_model_serializers'
bundle install</code></pre>
<p>next, we need to generate a serializer for our desired model, which in this case is the vehicle model. remeber to use capitalization while referring to a model and lowercase when referring to the table. for example, the model is named <span style=""color: #236fa1;""><code>vehicle</code></span> while its associated table in the database is named <code><span style=""color: #236fa1;"">vehicle</span></code>.&nbsp;</p>
<pre class=""language-ruby""><code>rails generate serializer vehicle</code></pre>
<p>this will create a file <code>app/serializers/vehicle_serializer.rb</code>. update this file to specify the attributes you want to include in the json response:</p>
<pre class=""language-ruby""><code>class vehicleserializer &lt; activemodel::serializer
  attributes :id, :name, :year_of_manufacture, :price, :picture
end</code></pre>
<h1>conclusion</h1>
<p>with rails, creating a restful api is both efficient and enjoyable. its built-in features like activerecord, the rich ecosystem of gems, and the convention-over-configuration philosophy make rails a powerful tool for building apis. in this guide, we&rsquo;ve built a simple tesla api, showcasing how easy it is to get up and running with rails.</p>
<p>there is much more about rails that i have not covered here but this can get you going in no time. hope you enjoyed this tutorial.</p>
<h1>resources</h1>
<ol>
<li><a title=""getting started with ruby on rails"" href=""https://guides.rubyonrails.org/v5.0/getting_started.html"" target=""_blank"" rel=""noopener"">getting started with ruby on rails [external link]</a></li>
<li><a title=""ruby on rails api tutorial"" href=""https://www.youtube.com/watch?v=xcmkbymu9lk&amp;list=plfqqrn-rkaw3fyzszgxygqpn-rg9wfxc8"" target=""_blank"" rel=""noopener"">ruby on rails api tutorial [youtube]</a></li>
</ol>",a-detailed-guide-on-how-to-create-ruby-on-rails-application-api-,"rubyonrails,apidevelopment,webdevelopment,railsapi
",published,1,938,http://res.cloudinary.com/dipkbpinx/image/upload/v1725021782/tech-tales/cover-images/y8js6blbzx8qrvjlxsal.png
55,my opinion about typescript: is it worth the hype?,"<p>while it easier to kidnap any javascript developer using a new frontend framework, developers are not overly impressed with typescript. there is a significant debate about typescript and the pressure for developers to learn it since it is is required in most professional settings.</p>
<p>typescript, a superset of javascript developed by microsoft, has become increasingly popular in recent years. however, it's not without its detractors. some argue that its value is questionable, especially given microsoft's ownership and its compilation to javascript. this blog post dives into the pros and cons of typescript, exploring the debate surrounding its importance and helping you decide if it's the right fit for your project.</p>
<div id=""toc"" class=""mce-toc"">
<h2>table of contents</h2>
<ol>
<li>1. <a href=""#the-case-for-typescript"">the case for typescript</a></li>
<li>2. <a href=""#the-case-against-typescript"">the case against typescript</a></li>
<li>3. <a href=""#should-you-use-typescript?"">should you use typescript?</a></li>
<li>4. <a href=""#conclusion"">conclusion</a></li>
</ol>
</div>
<h1 id=""conclusion"">the case for typescript</h1>
<h3 id=""3.-compilation-overhead"">1. enhanced code readability and maintainability</h3>
<ul>
<li>typescript's static typing system allows you to define the types of variables, functions, and objects, leading to more predictable and maintainable code. this makes it easier to understand the codebase and prevents unexpected errors.</li>
<li>typescript's type inference helps to reduce the amount of explicit typing needed, making the code cleaner and easier to read.</li>
</ul>
<h3>2. improved code quality and reduced errors</h3>
<ul>
<li>typescript's compiler catches errors at compile time, preventing them from reaching runtime. this results in fewer bugs and more robust software.</li>
<li>typescript's strict type checking ensures that data is used correctly, reducing the risk of type-related errors and improving code reliability.</li>
</ul>
<h3>3. increased developer productivity</h3>
<ul>
<li>typescript's intellisense and code completion features accelerate development by providing real-time suggestions and reducing the need for manual typing.</li>
<li>typescript's refactoring tools make it easier to modify and maintain large codebases, saving development time and effort.</li>
</ul>
<h3>4. enhanced code reusability and scalability</h3>
<ul>
<li>typescript's strong typing system makes it easier to create reusable components and libraries, promoting modularity and code reuse.</li>
<li>typescript's support for large-scale projects helps manage complex codebases and facilitates team collaboration.</li>
</ul>
<h1>the case against typescript</h1>
<h3>1. learning curve</h3>
<ul>
<li>typescript introduces new concepts like types, interfaces, and generics, which can be challenging for developers unfamiliar with static typing.</li>
<li>learning typescript requires additional effort, which may not be feasible for all projects or developers.</li>
</ul>
<h3>2. potential for boilerplate code</h3>
<ul>
<li>while typescript's type system can improve code quality, it can also lead to more verbose code, especially when defining types explicitly.</li>
<li>this extra code can make the project more complex and increase development time.</li>
</ul>
<h3>3. compilation overhead</h3>
<ul>
<li>typescript code needs to be compiled to javascript before it can be executed, which adds an extra step to the development process.</li>
<li>this compilation step can introduce overhead, especially for large projects, potentially impacting performance.</li>
<li>this is also a problem because the web browser and&nbsp;<a href=""https://nodejs.org/"" target=""_blank"" rel=""noopener noreferrer"">node</a> do not understand ts.</li>
</ul>
<h1>should you use typescript?</h1>
<p>the decision to use typescript depends on several factors, including:</p>
<ul>
<li><strong>project size and complexity:</strong> typescript is particularly beneficial for large and complex projects where code maintainability and scalability are crucial.</li>
<li><strong>team experience:</strong> the team's familiarity with static typing and typescript can influence the decision. if the team is experienced with javascript, adopting typescript may be a smooth transition.</li>
<li><strong>development time and budget:</strong> the time and cost associated with learning and implementing typescript need to be considered.</li>
<li><strong>project requirements:</strong> if the project requires strict type checking, enhanced code quality, or improved developer productivity, typescript can be a valuable asset.</li>
</ul>
<p>in my opnion, i think typescript makes considerable sense when working with a team or on a large project. however, typescript is built on a good understanding of javascript and thus developers must first understand all javascript concepts before attempting to learn typescript.</p>
<h1>conclusion</h1>
<p>typescript is a powerful tool that can significantly enhance code quality, maintainability, and developer productivity. however, its adoption requires careful consideration of its pros and cons and the specific needs of your project. while it may not be the ideal choice for all projects, its benefits can be substantial for large-scale projects or teams looking to improve their development process.</p>",my-opinion-about-typescript-is-it-worth-the-hype-,"typescript,javascript,programminglanguages,webdev",published,1,760,http://res.cloudinary.com/dipkbpinx/image/upload/v1727580605/tech-tales/cover-images/a3vz2c9exnlsjha9dwvb.png
56,a guide to understanding web workers,"<p>if you are a web developer who spends a lot of time working, you might think of yourself as a web worker. however, we are sorry this username is taken. the world wide web hides many mysteries, and understanding fully how browsers work is challenging. this blog unravels the mystery of web workers, the hidden unpaid interns in websites.</p>
<p>we will explore what web workers are and how they help improve performance through multi-threading, and also explore how to create, communicate and destroy a web worker.&nbsp;</p>
<div id=""toc"" class=""mce-toc"">
<h2>table of contents</h2>
<ol style=""list-style: none;"">
<li>1. <a href=""#1"">what are web workers?</a>
<ol style=""list-style: none;"">
<li>1.1 <a href=""#2"">types of web workers</a></li>
<li>1.2 <a href=""#3"">creating a web worker</a></li>
<li>1.3 <a href=""#3"">communicating with web workers</a></li>
<li>1.4 <a href=""#4"">terminating web workers</a></li>
</ol>
</li>
<li>2. <a href=""#6"">limitations of web workers</a></li>
<li>3. <a href=""#6"">real-world applications of web workers</a></li>
<li>4. <a href=""#7"">conclusion</a></li>
</ol>
</div>
<p>let's dive in.</p>
<div class=""tiny-page-embed""><iframe style=""display: table; margin-left: auto; margin-right: auto;"" src=""https://www.youtube.com/embed/gcp7trixfjg"" width=""892"" height=""500"" allowfullscreen=""allowfullscreen""></iframe></div>
<h1 id=""1"">what are web workers?</h1>
<p>a web worker is a javascript script that runs on the background of a webpage. javascript by default is single-threaded. one thread or the main thread executes all the javascript code for a webpage, one line at a time. a web worker is a separate javascript thread that allows individuals to execute multiple threads of javascript in parallel with each other. this helps offload any computationally expensive work or prevent the main thread from slowing down.</p>
<p>one major difference between the main thread and the web worker thread is that web workers cannot perform any dom manipulation and do not have access to the global window methods. web workers basically work like the network tab, where requests are sent and we receive a response.</p>
<p><img style=""border-width: 1px; border-style: solid;"" src=""https://res.cloudinary.com/dipkbpinx/image/upload/v1728416893/tech-tales/blog-images/ypxffv065a9clewb7bnc.png"" alt=""web workers""></p>
<h2 id=""2"">types of web workers</h2>
<p>there are two primary types of web workers:</p>
<ul>
<li>
<p><strong>shared workers</strong>: these can be used by multiple scripts across different windows or tabs. they are useful in scenarios where you need a worker that can handle shared state across different parts of your app.</p>
</li>
<li>
<p><strong>service workers</strong>: primarily used for intercepting and handling network requests, they enable powerful features like offline capabilities and background sync for web applications.</p>
</li>
</ul>
<h2 id=""3"">creating a web worker</h2>
<p>creating a web worker is straightforward. first, create a separate javascript file (e.g., worker.js) containing the worker's code. then, use the <code>worker()</code> constructor in your main script to create an instance of the worker.</p>
<pre class=""language-javascript""><code>//worker.js
// listen for messages from the main script
onmessage = function (event) {
    let number = event.data;
    let sum = 0;

    // perform a time-consuming task (sum of first 'n' numbers)
    for (let i = 1; i &lt;= number; i++) {
        sum += i;
    }
    // post the result back to the main thread
    postmessage(sum);
};</code></pre>
<h2 id=""3"">communicating with web workers</h2>
<p>communication between the main thread and web workers occurs through messages. you can send data to a worker using the <code>postmessage()</code> method, and the worker can respond with its results using the same method. this communication mechanism ensures data integrity and security.</p>
<pre class=""language-javascript""><code>//main thread
// create a new web worker
const worker = new worker('worker.js');
// listen for messages from the worker
worker.onmessage = function (event) {
    console.log('message from worker: ', event.data);
    document.getelementbyid('result').textcontent = 'result: ' + event.data;
};
// send a message to the worker
worker.postmessage(1000000); // example task: calculate the sum of first 1,000,000 numbers</code></pre>
<h2 id=""4"">terminating web workers</h2>
<p>once you no longer need a web worker, you can terminate it using the `terminate()` method. this frees up resources and prevents unnecessary processing. terminating a worker will stop all its operations and any tasks it's currently running.</p>
<pre class=""language-javascript""><code>// main.js
worker.terminate(); // terminates the worker</code></pre>
<h1 id=""6"">limitations of web workers</h1>
<p>while web workers offer significant benefits, they do have certain limitations:</p>
<ul>
<li><strong>no access to the global window object:</strong> workers operate in a separate scope and cannot access the global <code>window</code> object or its properties (e.g., document, location).</li>
<li>
<p><strong>no access to dom</strong>: web workers run in an isolated environment and don't have access to the dom or any ui elements. communication between the worker and the main thread is done via <code>postmessage</code> and event listeners, but you can't directly manipulate the dom from a worker.</p>
</li>
<li>
<p><strong>limited shared state</strong>: since workers run on separate threads, sharing data between them requires serialization and deserialization of messages, which adds overhead. this means sharing large amounts of data between the worker and the main thread can be slow.</p>
</li>
<li>
<p><strong>browser support</strong>: while most modern browsers support web workers, older versions may not, meaning you need to account for this in your app if you need to support legacy browsers.</p>
</li>
<li>
<p><strong>resource overhead</strong>: each web worker consumes system resources. creating too many workers at once can lead to high memory usage, which can negatively impact performance.</p>
</li>
</ul>
<h1 id=""6"">real-world applications of web workers</h1>
<p>web workers find applications in various scenarios, including:</p>
<ul>
<li><strong>image processing:</strong> offloading computationally intensive image manipulation tasks to workers can significantly improve performance.</li>
<li><strong>data analysis and visualization:</strong> processing large datasets and generating visualizations can be optimized using web workers.</li>
<li><strong>game development:</strong> workers can handle complex game logic, physics, and ai calculations without affecting the main thread's responsiveness.</li>
<li><strong>background tasks:</strong> performing background tasks, such as fetching data or processing files, can be delegated to workers to ensure a seamless user experience.</li>
</ul>
<h1 id=""7"">conclusion</h1>
<p>web workers are an essential tool for optimizing the performance of web applications. they enable you to run expensive tasks in the background without blocking the main thread, making sure that your app remains responsive and smooth. while they come with limitations&mdash;like not being able to access the dom&mdash;they are a great solution for tasks like data processing, encryption, and real-time apps.</p>",a-guide-to-understanding-web-workers,"webworkers,javascript,multithreading,performanceoptimization
",published,3,541,http://res.cloudinary.com/dipkbpinx/image/upload/v1728416878/tech-tales/cover-images/redxv0ptrhszjl1d6ysm.jpg
1,how  artificial intelligence (ai) will affect the future of education,"<p>the arrival of artificial intelligent chat-bots that can complete student's assignments has been a game changer, at least for students. while most educational institutions are rushing to implement ai detectors, there is a possibility that current ai will develop beyond the simple metrics tested by the detectors. here is my opinion on how ai will shape the future of education.</p>
<p style=""text-align: center;""><strong>academic dishonesty</strong></p>
<p>one possible impact of ai on education is lowering the quality of education. this means that students could easily have chatgpt and other llms handle their assignments.</p>
<p><img src=""https://walrus-assets.s3.amazonaws.com/img/dumitrescu_aiessays_1800.jpg"" alt=""student using ai"" width=""1466"" height=""977""></p>
<p>while schools are getting clever at addressing such issues, it is possible that students would easily get away with it. increased academic dishonesty will lead to superficial knowledge and decline in of critical thinking, problem-solving, and communication skills &ndash; essential for academic and professional success.</p>
<p style=""text-align: center;""><strong>decline in comprehension</strong></p>
<p>students' overreliance on ai tools is likely to affect their ability to learn and remember things. more caution must be taken when examining students on a topic. abundance of information could indeed make individuals more stupid.</p>
<p>the ease and speed of access to information through ai tools might encourage students to skim over information or focus on surface-level understanding rather than delving deeper into concepts and making connections. this can hinder the development of deeper cognitive skills like analysis, synthesis, and evaluation.</p>
<p><strong>beyond the worries</strong></p>
<p>despite the current challenges, education sector can also fully leverage the power of ai to accelerate learning. use of ai tools can help provide personalized learning materials based on each student's specific needs. for example, if a student is interested in biology and ancient history, ai can create learning modules that seamlessly integrate both subjects.</p>
<p>ai tools can also help students in research and explanation, potentially leading to a deeper understanding of the subject matter for students who actively engage with the information it provides. this can also an stimulate curiosity and critical thinking, making learning more engaging and encouraging independent exploration.</p>
<p>however, as we look into the future, schools must be prepared to adopt ai and become smarter than their students. by being early adopters of ai, educators can help fight challenges such as academic dishonesty. afterall, we need a thief to catch a thief.</p>
<p>there is also a likelihood that legislations related to data privacy, fairness and bias, transparency and ethics will help shape how educators interact with ai and ai generated materials. these regulations will help ensure schools provide better quality education to their students and guarantee their rights</p>",how-artificial-intelligence-ai-will-affect-the-future-of-education,"ai,education,dishonesty,chatgpt",published,15,1629,http://res.cloudinary.com/dipkbpinx/image/upload/v1725021499/tech-tales/cover-images/tlelwlqrofentplamsa7.png
30,authentication in nextjs part 2: usecontext,"<p>this blog is a continuation of the previous blog on&nbsp;<a title=""handling auth in next js"" href=""blogs/handling-authentication-with-jwt-in-nextjs"" target=""_blank"" rel=""noopener"">handling auth in next js</a> where we discussed the use of jwt tokens in server actions to fetch user data. in the blog, we talked about creating an api route&nbsp;<code>(/api/me)</code> where we can use context to fetch user data. this blog discusses how to do that.</p>
<h1 class=""wp-block-heading""><span id=""what_is_contextapi"">what is context-api?</span></h1>
<p>context-api is a way to make a global store in an application where we can store data and variables. the variables and data which are in the context can be accessed from any page or component without manually passing the props from the parent component to the child component.</p>
<h1 class=""wp-block-heading""><span id=""why_use_contextapi"">why use context-api?</span></h1>
<p>although there are many ways to achieve this functionality in our application, context api has its own place and advantages. these are some of the benefits of using it over others.</p>
<ul class=""wp-block-list"">
<li>if we do not use context api or any other library and simply pass props from parents to the child and then from this child to another child, it will become a very hectic and bad way to write code as the number of children and props increases.</li>
<li>context api is very light and fast in comparison to other state management libraries like redux and recoil as it is inbuilt in next.js.</li>
</ul>
<h1 class=""wp-block-heading""><span id=""using_the_contextapi_effectively"">using the context-api effectively</span></h1>
<p>as you know by now, nextjs leverages the power of server side rendering to make the page faster. since every page is a server code by default, usecontext is not supported in pages that have not specifically declared ""use client"" at the top.&nbsp;</p>
<p>there are three main steps in creating the global store using context api and making the user information available globally.</p>
<p><strong>step 1: creating the context</strong></p>
<p>create a folder in the outmost directory of your app and name it providers. in this folder, add an index.js file, where we will create a user context that will be exported to pages that need to check whether the user exists.</p>
<pre class=""language-javascript""><code>//index.js
""use client"";
import { createcontext, usecontext, useeffect, usestate } from ""react"";
const usercontext = createcontext({});
export function usercontextprovider({ children }) {
  const [user, setuser] = usestate(null);
  useeffect(() =&gt; {
    const fetchuser = async () =&gt; {
      try {
        const response = await fetch(`${baseurl}/me`);
        const data = await response.json();
        setuser(data);
      } catch (error) {
        console.error(""failed to fetch user"", error);
      }
    };
      fetchuser();
  }, []);
  return &lt;usercontext.provider value={user}&gt;{children}&lt;/usercontext.provider&gt;;
}
// make useusercontext hook to easily use our context throughout the application
export function useusercontext() {
  return usecontext(usercontext);
}
</code></pre>
<p><strong>step 2: wrapping our app in context</strong></p>
<p>to ensure that each component can have access to the user object, we need to wrap our layout.ts file with the context provider. in the layout.js file, add the following code:</p>
<pre class=""language-javascript""><code>import ""../globals.css"";
import { usercontextprovider } from ""@/providers"";
export const metadata = {
  title: """",
  description:  """",
};
export default function rootlayout({ children }) {
  return (
    &lt;html lang=""en""&gt;
      &lt;body&gt;
        &lt;usercontextprovider&gt;
            &lt;main&gt;
              {children}
            &lt;/main&gt;
        &lt;/usercontextprovider&gt;
      &lt;/body&gt;
    &lt;/html&gt;
  );
}
</code></pre>
<p><br><strong>step 3: using the context</strong></p>
<p>the last step is ensuring that components that need access to context can have such access. ensure that any component using context is a client component. for example, let add context to the navbar:<br><br></p>
<pre class=""language-javascript""><code>// components/navbar.js
""use client"";
import dynamic from 'next/dyanmic';
import { useusercontext } from '../context/user';
export const dynamic = ""force-dynamic"";
export default function navbar() {
 // getting user object using useusercontext hook
  const user  = useusercontext();
  return (
    &lt;div classname=""container""&gt;
        &lt;h1&gt;navbar&lt;/h1&gt;
        &lt;p&gt;logged in user: &lt;strong&gt;{user?.name}&lt;/strong&gt;&lt;/p&gt;
        &lt;p&gt;user token: &lt;strong&gt;{user?.token}&lt;/strong&gt;&lt;/p&gt;  
    &lt;/div&gt;
  )
}</code></pre>
<h1>conclusion:</h1>
<p>if we want an easy, fast, and lightweight store for our project, then context-api is the best choice. remember to add additional checks on whether the user is present to prevent errors. for example, in my code i check if the user token exists but has expired so i can tell users their session has expired.</p>",authentication-in-nextjs-part-2-usecontext,"authentication,nextjs,contextapi,dataflow",published,2,1453,http://res.cloudinary.com/dipkbpinx/image/upload/v1725019180/tech-tales/cover-images/u8rw07lwlnppmkuifwok.png
29,handling authentication with jwt in nextjs,"<p>authentication is crucial in every app, and ensuring sufficient security is vital whether you are creating a small app or a production ready deployment. understanding auth concepts such as hashing, cryptography and so on could be challenging, but luckily there are few libraries that simplify the process.</p>
<p>for this blog, i will explain how i have implemented authentication in my app using json web token and server actions in nextjs. since nextjs is a fullstack app, the concept of cors will not be covered here.&nbsp;</p>
<p>to begin we need to install the relevant libraries. this include <a title=""jsonwebtoken"" href=""https://www.npmjs.com/package/jsonwebtoken"" target=""_blank"" rel=""noopener"">jsonwebtoken</a>, <a title=""jose"" href=""https://www.npmjs.com/package/jose"" target=""_blank"" rel=""noopener"">jose</a>, and <a title=""bcrypt"" href=""https://www.npmjs.com/package/bcrypt"" target=""_blank"" rel=""noopener"">bcrypt.js.</a> there are vital to encoded and decode user password stored in the database. i am using a postgress database with prisma orm.</p>
<p>to get started, assuming you have all the necessary setup (nextjs app and database), run the following command:</p>
<pre class=""language-javascript""><code>npm i jsonwebtoken bcrypt jose</code></pre>
<p>jose is similar to jsonwebtoken but also works in browser environment, enabling you to decode the token if you need the data in the frontend.</p>
<p>next, we are going to create a jwt_secret that will be used to hash the passwords. you can set this to any random number or use openssl to generate the token by running the command:</p>
<pre class=""language-javascript""><code>openssl rand -base64 32</code></pre>
<p>save the token in .env file, without the .local prefix to ensure it is not exposed into the browser environment.&nbsp;</p>
<p id=""e591"" class=""pw-post-body-paragraph nw nx hg ny b nz oa ob oc od oe of og oh oi oj ok ol om on oo op oq or os ot gz fp"" data-selectable-paragraph="""">note: it&rsquo;s&nbsp;<strong class=""ny hh"">crucial</strong>&nbsp;that you keep this key private and only accessible to the server. you can use a dot env provider or keep it in a secure location. be sure you set it in next.js&nbsp;<em class=""oy"">without&nbsp;</em>the&nbsp;<code class=""gf ou ov ow ox b"">next_public</code> prefix.</p>
<p class=""pw-post-body-paragraph nw nx hg ny b nz oa ob oc od oe of og oh oi oj ok ol om on oo op oq or os ot gz fp"" data-selectable-paragraph="""">if you accidentally leak the key to the client, then an attacker could use your key to sign bogus credentials with whatever role they like and gain full access to your platform!</p>
<p class=""pw-post-body-paragraph nw nx hg ny b nz oa ob oc od oe of og oh oi oj ok ol om on oo op oq or os ot gz fp"" data-selectable-paragraph="""">next we are going to tap into the power of middleware in nextjs. middleware is the cornerstone of our authentication system, designed to protect routes that require authentication.</p>
<p class=""pw-post-body-paragraph nw nx hg ny b nz oa ob oc od oe of og oh oi oj ok ol om on oo op oq or os ot gz fp"" data-selectable-paragraph="""">by implementing this, you ensure that only authenticated users can access certain parts of your application, safeguarding sensitive information and user privacy.</p>
<p class=""pw-post-body-paragraph nw nx hg ny b nz oa ob oc od oe of og oh oi oj ok ol om on oo op oq or os ot gz fp"" data-selectable-paragraph="""">nextjs already includes a middleware.js file but if it does not exist, create one in the root directory and name it middleware.js. add the following code to the middleware.</p>
<pre class=""language-javascript""><code>import { nextresponse, nextrequest } from ""next/server"";
import * as jose from ""jose"";

const jwt_secret = new textencoder().encode(process.env.jwt_secret);

export async function middleware(request: nextrequest) {
  const path = request.nexturl.pathname;
  const isprotectedpath =
    path.startswith(""/profile"") ||
    path.startswith(""/admin"") ||
 

  const ispublicpath =
    path.startswith(""/login"") ||
    path.startswith(""/register"") 
  const token = request.cookies.get(""token"");
  let userdata = null;
  if (token) {
    try {
      const { payload } = await jose.jwtverify(token.value, jwt_secret);
      userdata = payload;
    } catch (error) {
      console.error(""invalid token:"", error.message);
    }
  }
  const isadmin = userdata?.role == ""admin"";
  // redirect users to homepage if they are not admin
  if (path.startswith(""/admin"") &amp;&amp; !isadmin) {
    return nextresponse.redirect(new url(""/"", request.nexturl));
  }
  if (path === ""/admin"" &amp;&amp; isadmin) {
    return nextresponse.redirect(
      new url(""/admin/dashboard?tab=0"", request.nexturl)
    );
  }
  if (isprotectedpath &amp;&amp; !userdata) {
    return nextresponse.redirect(
      new url(""/login"", request.nexturl)
    );
  } else if (userdata &amp;&amp; ispublicpath) {
    //prevent users from visiting login page if they are already logged in
    return nextresponse.redirect(new url(""/"", request.nexturl));
  }
}

export const config = {
  matcher: [
    ""/"",
    ""/login"",
    ""/signup"",
    ""/register"",
    ""/profile"",
    ""/profile/:path*"",
    ""/admin"",
    ""/admin/:path*"",
  ],
};
</code></pre>
<p>note we are using jose instead of jwt since we need to read user data rather than just check if the token exists. if we just check if the token exists, a user can create a token with nothing and be authenticated.</p>
<p>the matcher object configures the path that you want the api to match. you can modify the protected and public routes, and make sure to include them in the matcher function.</p>
<p>next we are going to create a login functionality that utilizes prisma to find and authenticate the user and return a http only cookie in the response body. it is better to create this in an api route.</p>
<p>here is the login function in a file called /api/auth/login:</p>
<pre class=""language-javascript""><code>import bcrypt from ""bcryptjs"";
import prisma from ""@/prisma/prisma"";
import jwt from ""jsonwebtoken"";
import { nextrequest, nextresponse } from ""next/server"";

export async function post(req: nextrequest, res: nextresponse) {
  const { email, password } = await req.json();
  try {
    // check if the user exists
    const user = await prisma.user.findunique({
      where: {
        email: email.tolowercase(),
        deleted: false,
      },
    });

    // compare the password
    if (user) {
      const ispasswordvalid = await bcrypt.compare(
        password,
        user.password_digest
      );
      if (!ispasswordvalid) {
        return nextresponse.json(
          { error: ""invalid password, please try again!"" },
          { status: 401 }
        );
      } else {
        // generate a jwt token
        const token = jwt.sign(user, process.env.jwt_secret, {
          expiresin: ""8h"",
        });
        // return user details and token
        const response = nextresponse.json(user, { status: 202 });
        response.cookies.set(""token"", token, { httponly: true });
        return response;
      }
    } else {
      return nextresponse.json(
        { error: ""no user with matching email found"" },
        { status: 404 }
      );
    }
  } catch (error) {
    console.error(error);
    return nextresponse.json(
      { error: ""internal server error"" },
      { status: 500 }
    );
  } finally {
    await prisma.$disconnect();
  }
}
</code></pre>
<p>you can add some more complicated functionalities, such as checking the request ip address to rate limit the user. if you wish to add a rate limiter in the login function, you can get user ip address by doing the following:</p>
<pre class=""language-javascript""><code>const ratelimitmap = new map();
//creates a map to store the requests
 const ip = req.ip || req.headers.get(""x-forwarded-for"");
  const limit = 3; // limiting requests to 3 login attempts per minute per ip
  const windowms = 60 * 1000; // 1 minute
  const suspensionms = 5 * 60 * 1000; // 5 minutes
  // function to limit requests to 3 login attempts per ip
  const now = date.now();
  if (!ratelimitmap.has(ip)) {
    ratelimitmap.set(ip, { count: 0, lastreset: now, suspendeduntil: null });
  }
  const ipdata = ratelimitmap.get(ip);
  // check if the ip is currently suspended
  if (ipdata.suspendeduntil &amp;&amp; now &lt; ipdata.suspendeduntil) {
    return nextresponse.json(
      { error: ""too many requests. try again after 5 minutes"" },
      { status: 429 }
    );
  }
  if (now - ipdata.lastreset &gt; windowms) {
    ipdata.count = 0;
    ipdata.lastreset = now;
  }
  if (ipdata.count &gt;= limit) {
    ipdata.suspendeduntil = now + suspensionms;
    return nextresponse.json(
      { error: ""too many requests. try again after 5 minutes"" },
      { status: 429 }
    );
  }
  ipdata.count += 1;</code></pre>
<p>i know this is alot of if requests, i am guilty but you can also streamline this code to make it more efficient. in the register route, you can use the same functionality in the login route to return the http code.&nbsp;</p>
<p>now we need to create a helper function that you can call to get the user. remember this function cannot return the user in the frontend, it will only work in the server.</p>
<pre class=""language-javascript""><code>// file path /lib/decodetoken
import { nextrequest, nextresponse } from ""next/server"";
import jwt from ""jsonwebtoken"";
export const getdatafromtoken = (request: nextrequest) =&gt; {
  try {
    const token = request.cookies.get(""token"")?.value || """";
    const decodedtoken: any = jwt.verify(token, process.env.jwt_secret);
    return decodedtoken;
  } catch (error: any) {
    throw new error(error.message);
  }
};
</code></pre>
<p>this function enables you to decode the token but does not account for scenarios where the token exists but is expired and you might need to further modify it to handle such scenarios.&nbsp;</p>
<p>to get user data, create a route (/api/me) where you can fetch the user data each time there is a logged in user. this route will receive the request cookies and use decodetoken function to return user data:</p>
<pre class=""language-javascript""><code>import { getdatafromtoken } from ""@/lib/decodetoken"";
import { nextrequest, nextresponse } from ""next/server"";
export async function get(req: nextrequest, res: nextresponse) {
  try {
    const userdata = await getdatafromtoken(req);
    let responsedata = userdata;
    if (!userdata || !userdata) {
      return nextresponse.json(
        { error: ""unauthorized request"" },
        { status: 401 }
      );
    } 
      return nextresponse.json(userdata, { status: 200 });
  } catch (error) {
    return new nextresponse(null, { status: 400 });
  } 
}
</code></pre>
<p>with the current setting, you can fetch user data and save it in context each time the user logs in. this ensures that components that need user data have access to the data.</p>
<h1>creating logout route</h1>
<p>creating a logout route is as easy as just deleting the token. create a new route in /api/auth/logout and add this code:</p>
<pre class=""language-javascript""><code>import { nextresponse, nextrequest } from ""next/server"";
export async function get(res: nextrequest) {
  try {
    const response = nextresponse.json({
      message: ""logout successful"",
      success: true,
    });
    response.cookies.delete(""token"");
    return response;
  } catch (error) {
    return nextresponse.json({ error: ""something went wrong"" }, { status: 500 })
}</code></pre>
<h1>conclusion</h1>
<p id=""490e"" class=""pw-post-body-paragraph nw nx hg ny b nz ps ob oc od pt of og oh pu oj ok ol pv on oo op pw or os ot gz fp"" data-selectable-paragraph="""">we&rsquo;ve covered the use of jwts for efficient user authentication, storing user data in cookies for quick access, and the importance of custom middleware for route protection.&nbsp;</p>
<p id=""cc5d"" class=""pw-post-body-paragraph nw nx hg ny b nz oa ob oc od oe of og oh oi oj ok ol om on oo op oq or os ot gz fp"" data-selectable-paragraph="""">remember, the journey to secure and efficient authentication is ongoing and ever-evolving. the strategies and tools we&rsquo;ve discussed are at the forefront of current best practices, providing a strong foundation for your next.js applications.</p>
<p class=""pw-post-body-paragraph nw nx hg ny b nz oa ob oc od oe of og oh oi oj ok ol om on oo op oq or os ot gz fp"" data-selectable-paragraph="""">however, the world of web security is dynamic, so staying updated with the latest trends and updates is crucial. adding the rate limiter is also necessary to protect the login route from brute attack.</p>
<p class=""pw-post-body-paragraph nw nx hg ny b nz oa ob oc od oe of og oh oi oj ok ol om on oo op oq or os ot gz fp"" data-selectable-paragraph="""">&nbsp;</p>",handling-authentication-with-jwt-in-nextjs,"nextjs,authentication,jwt,server-actions",published,3,1590,http://res.cloudinary.com/dipkbpinx/image/upload/v1725020962/tech-tales/cover-images/lb1bspa9gi9drjec9bt1.png
